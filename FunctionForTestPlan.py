from module.auto_click import *
from selenium.webdriver.support.ui import Select
import amigo as a
from selenium.common.exceptions import TimeoutException, WebDriverException
from selenium.webdriver.support import expected_conditions as EC
import datetime
import pyautogui
import subprocess
import ctypes
import os
import shutil
from urllib.parse import urlparse
import requests
import sys
import re
import pygetwindow as gw
from bs4 import BeautifulSoup
import clipboard
from selenium.common.exceptions import UnexpectedAlertPresentException
import logging
from selenium.common.exceptions import NoAlertPresentException, UnexpectedAlertPresentException
import speedtest
#pip uninstall speedtest
#pip install speedtest-cli
import pytesseract
from PIL import Image

import pyshark
def move_files(DKP_folder):
    source_folder = a.Log_folder
    target_folder = os.path.join(source_folder, DKP_folder)
    if not os.path.exists(target_folder):
        os.makedirs(target_folder)
    for file in os.listdir(source_folder):
        source_path = os.path.join(source_folder, file)
        if os.path.isfile(source_path) and file.endswith('.log'):
            target_file = os.path.join(target_folder, file)
            if os.path.exists(target_file):
                current_time = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
                filename, file_extension = os.path.splitext(file)
                new_filename = f"{filename}_{current_time}{file_extension}"
                target_file = os.path.join(target_folder, new_filename)
            try_count = 0
            while try_count < 3:
                try:
                    shutil.move(source_path, target_file)
                    print(f"File {file} has been moved to {target_file}")
                    break
                except PermissionError as e:
                    print(f"Cannot move file {file}: {e}")
                    try_count += 1
                    if try_count == 3:
                        print(f"Tried three times to move file {file} but still failed")
                        break
                    time.sleep(1)
                    continue
    print("Move completed")

def setup_logger(file_path, log_level=logging.INFO):
    logger = logging.getLogger(file_path)
    logger.setLevel(logging.INFO)
    handler = logging.FileHandler(file_path, mode='a', encoding='cp950')
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger

#reset
def RestorToFactoryDefault(Browser):
    file_path = f"{a.Log_folder}\\restorToFactoryDefault.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for restorToFactoryDefault")
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser=Browser)
    result_restorToFactoryDefault = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Admin")
        d.element("java", "System")
        d.element("id", "btn_restorToFactoryDefault")
        d.element("id", "dialogBtn_restorToFactoryDefaultOk", sec=a.reboot_time)
        #check Default Login Page
        d.open(url, a.DUT_default_pwd)
        timeout = a.button_time
        wizard_title = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.ID, "wizard_title"))
        )
        logger.info("Pass.Page is default login page.")
        result_restorToFactoryDefault = True
        print("Finish")
        time.sleep(5)
    except TimeoutException:
        logger.error("Fail.Page is not default login page within 15 seconds.")
        result_restorToFactoryDefault = False
        print("Fail")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_restorToFactoryDefault = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_restorToFactoryDefault, execution_time, current_time
def restorToFactoryDefault():
    return RestorToFactoryDefault('chrome')
def restorToFactoryDefault_firefox():
    return RestorToFactoryDefault('firefox')
#RM18
'''
def DHCPDefaultWizard():
    file_path = f"{a.Log_folder}\\DHCPDefaultWizard.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for DHCPDefaultWizard")
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_DHCPDefaultWizard = False
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        #policy
        d.element("downmenu", "English", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_agree", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        time.sleep(a.wizard_time)
        #check
        d.open(url, a.DUT_admin_pwd)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Pass.Dut has finished wizard and can access login page.")
        result_DHCPDefaultWizard = True
        print("Finish")
        time.sleep(10)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access the login page.")
        result_DHCPDefaultWizard = False
        print("Fail.TimeoutException..")
        time.sleep(10)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_DHCPDefaultWizard = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DHCPDefaultWizard, execution_time, current_time


def CHTDefaultWizard():
    file_path = f"{a.Log_folder}\\CHTDefaultWizard.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for CHTDefaultWizard")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_CHTDefaultWizard = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_default_pwd)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "op_option_smart_router",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "pppoe_username",txt=a.CHT_name,sec=a.buffer_time)
        d.element("input", "pppoe_password",txt=a.CHT_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "wifi_networkName24G",txt=a.DUT_Wifi_SSID,sec=a.buffer_time)
        d.element("input", "wifi_password24G",txt=a.WiFi_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "device_password",txt=a.DUT_admin_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "timeZone_Search",txt="Asia/Taipei",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "AutoUpgrade_off",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.wizard_time)
        #check
        d.open(url,a.DUT_admin_pwd )
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Pass.Dut has finished wizard and can access login page.")
        result_CHTDefaultWizard = True
        print("Finish")
        time.sleep(10)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access login page.")
        result_CHTDefaultWizard = False
        print("Fail")
        time.sleep(10)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CHTDefaultWizard = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CHTDefaultWizard, execution_time, current_time
'''
#MS30.MS60
def DHCPDefaultWizard():
    file_path = f"{a.Log_folder}\\DHCPDefaultWizard.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for DHCPDefaultWizard")
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_DHCPDefaultWizard = False
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        #policy
        d.element("downmenu", "English", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_agree", sec=a.buffer_time)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.wizard_time)
        #check
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Pass.Dut has finished wizard and can access login page.")
        result_DHCPDefaultWizard = True
        print("Finish")
        time.sleep(5)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access the login page.")
        result_DHCPDefaultWizard = False
        print("Fail.TimeoutException..")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_DHCPDefaultWizard = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DHCPDefaultWizard, execution_time, current_time
    
#MS30.MS60
def CHTDefaultWizard():
    file_path = f"{a.Log_folder}\\CHTDefaultWizard.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for CHTDefaultWizard")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_CHTDefaultWizard = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "op_option_smart_router",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "pppoe_username",txt=a.CHT_name,sec=a.buffer_time)
        d.element("input", "pppoe_password",txt=a.CHT_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "wifi_networkName24G",txt=a.DUT_Wifi_SSID,sec=a.buffer_time)
        d.element("input", "wifi_password24G",txt=a.WiFi_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "device_password",txt=a.DUT_admin_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "timeZone_Search",txt="Asia/Taipei",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "AutoUpgrade_off",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.wizard_time)
        #check
        d.open(url,a.DUT_admin_pwd )
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Pass.Dut has finished wizard and can access login page.")
        result_CHTDefaultWizard = True
        print("Finish")
        time.sleep(5)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access login page.")
        result_CHTDefaultWizard = False
        print("Fail")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CHTDefaultWizard = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CHTDefaultWizard, execution_time, current_time

def move_txt_files():
    source_folder = a.all_file_path
    destination_folder = a.New_auto_folder + r'\TestReport'
    ignore_files = ["AmigoAuto Release Notes.txt", "requirements.txt"]
    txt_files = [f for f in os.listdir(source_folder) if f.endswith('.txt') and f not in ignore_files]
    if not txt_files:
        print("AmigoAuto has no txt file to be moved")
        return
    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)
    for txt_file in txt_files:
        source_path = os.path.join(source_folder, txt_file)
        destination_path = os.path.join(destination_folder, txt_file)
        shutil.move(source_path, destination_path)
    print("Txt files (except 'AmigoAuto Release Notes.txt' and 'requirements.txt') have been moved.")

def RenameTestReport():
    source_dir = a.New_auto_folder
    original_folder_name = 'TestReport'
    new_folder_name = f'TestReport_{datetime.datetime.now().strftime("%Y%m%d%H%M%S")}'
    if not os.path.exists(source_dir):
        print(f"source folder '{source_dir}' does not exist")
        return
    original_folder_path = os.path.join(source_dir, original_folder_name)
    if not os.path.exists(original_folder_path):
        print(f"original folder '{original_folder_name}' does not exist")
        return
    try:
        os.rename(original_folder_path, os.path.join(source_dir, new_folder_name))
        print(f"Already folder '{original_folder_name}' Rename to '{new_folder_name}'")
    except Exception as e:
        print(f"Error renaming folder:{str(e)}")
    new_folder_path = os.path.join(source_dir, original_folder_name)
    if not os.path.exists(new_folder_path):
        try:
            os.mkdir(new_folder_path)
            print(f"New folder created '{original_folder_name}'")
        except Exception as e:
            print(f"An error occurred while creating the folder:{str(e)}")

def AddWebsite():
    file_path = f"{a.Log_folder}\\AddWebsite.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for AddWebsite")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_AddWebsite = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl",sec=a.buffer_time)
        #Add Profile
        d.element("id", "pc_createButton",sec=a.buffer_time)
        #Profile Name
        d.element("input", "profileName",txt="001",sec=a.buffer_time)
        d.scrolldown(600)
        time.sleep(5)
        #Add Device
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice0,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        #Website Filter
        #Add Rule_a~d
        input_values = [("http://www.yahoo.com.tw", "www.yahoo.com.tw"),
                        ("www.yahoo.com.tw", "www.yahoo.com"),
                        ("yahoo.com", "yahoo.com"),
                        ("yahoo", "yahoo"),
                        ]
        for value_pair in input_values:
            d.element("id", "wf_createButton",sec=a.buffer_time)
            d.element("input", "wf_name", txt=value_pair[0],sec=a.buffer_time)
            d.element("input", "wf_url", txt=value_pair[1],sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d.save_new()
        time.sleep(5)
        #edit profile
        d.element("xpath", a.EditIcon,sec=a.buffer_time)
        d.scrolldown(500)
        #Add Rule_e~f
        input_values = [
                        ("zootaxa.info", "zootaxa.info"),
                        ("http://ukbsc.info/", "ukbsc.info")
                        ]
        for value_pair in input_values:
            d.element("id", "wf_createButton",sec=a.buffer_time)
            d.element("input", "wf_name", txt=value_pair[0],sec=a.buffer_time)
            d.element("input", "wf_url", txt=value_pair[1],sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d._driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(5)
        d.save_new()
        time.sleep(5)
        #edit profile
        d.element("xpath", a.EditIcon,sec=a.buffer_time)
        d.scrolldown(500)
        timeout = a.button_time
        AddWebsite = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located(("xpath", "//*[contains(text(), '18')]"))
    )
        logger.info("Pass.Add Add 6 Website success.")
        result_AddWebsite = True
        print("Finish")
        time.sleep(60)
    except TimeoutException:
        logger.error("Fail to add 6 Website.")
        result_AddWebsite = False
        print("Fail")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_AddWebsite = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddWebsite, execution_time, current_time

def CheckRestrictedWeb():
    file_path = f"{a.Log_folder}\\CheckRestrictedWeb.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for CheckRestrictedWeb")
    result_CheckRestrictedWeb = False
    start_time = time.time()
    websites = [
        
        {
            "url": "http://www.yahoo.com.tw",
            "expected_texts": ["Access to this website is restricted.", "沒有網際網路連線", "無法連上這個網站","你的連線不是私人連線",]
        },
        {
            "url": "http://zootaxa.info",
            "expected_texts": ["Access to this website is restricted.", "沒有網際網路連線", "無法連上這個網站"]
        },
        {
            "url": "http://ukbsc.info",
            "expected_texts": ["Access to this website is restricted.", "沒有網際網路連線", "無法連上這個網站"]
        }
    ]
    pass_count = 0
    driver = Dlink(browser='chrome')
    time.sleep(5)
    try:
        for website in websites:
            driver._driver.get(website["url"])
            wait = WebDriverWait(driver._driver, a.button_time)
            if "/info/Login.html" in driver._driver.current_url:
                logger.info(f"Website redirected to login page: {website['url']}")
                pass_count += 1
                continue
            driver._driver.refresh()
            time.sleep(5)
            restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{website["expected_texts"][0]}")]')))
            if restricted:
                logger.info(f"Pass. {website['expected_texts'][0]}")
                pass_count += 1
            else:
                logger.error("Fail.")
            time.sleep(5)
        if pass_count == len(websites):
            result_CheckRestrictedWeb = True
            print("Pass")
        else:
            result_CheckRestrictedWeb = False
            print("Fail")
    except Exception as e:
        logger.error(f"An error occurred:", exc_info=True)
        print("Fail.Exception...")
        result_CheckRestrictedWeb = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckRestrictedWeb, execution_time, current_time

def RemoveProfile():
    file_path = f"{a.Log_folder}\\RemoveProfile.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for RemoveProfile")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_RemoveProfile = []
    start_time = time.time()
    try:
        time.sleep(5)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl",sec=a.buffer_time)
        d.element("xpath", a.RemoveIcon,sec=a.buffer_time)
        d.element("id", "popalert_ok",sec=a.buffer_time)
        timeout = a.button_time
        popalert_ok = WebDriverWait(d._driver, timeout).until(
            EC.presence_of_element_located((By.ID, "popalert_ok"))
        )
        result_RemoveProfile.append(True)
        d.element("id", "submenu_ParentalControl",sec=a.buffer_time)
        d.scrolldown(600)
        label_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'pd_RemainingRules'))
        )
        label_text = label_element.text
        if label_text == "12":
            logger.info(f"Pass.Remaining: {label_text}")
            result_RemoveProfile.append(True)
            print("Pass.")
            time.sleep(10)
        else:
            result_RemoveProfile.append(False)
            logger.error(f"Fail.Remaining: {label_text}")
            print("Fail.")
            time.sleep(10)
    except TimeoutException:
        logger.error("Fail to remove profile.")
        result_RemoveProfile = False
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_RemoveProfile = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        d._driver.quit()
        return result_RemoveProfile, execution_time, current_time

def CheckWeb():
    file_path = f"{a.Log_folder}\\CheckWeb.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for CheckWeb")
    result_CheckWeb = False
    start_time = time.time()
    
    websites = [
        {
            "url": "http://www.yahoo.com.tw",
            "expected_text": "yahoo"
        },
        {
            "url": "http://zootaxa.info",
            "expected_text": "Welcome to Zootaxa"
        },
        {
            "url": "http://ukbsc.info",
            "expected_text": "Welcome to UK Biodiversity Science"
        }
    ]
    
    pass_count = 0
    driver = Dlink(browser='chrome')
    
    time.sleep(5)
    try:
        # 打開第一個分頁
        driver._driver.get(websites[0]["url"])
        time.sleep(5)  # 等待加載
        
        for index, website in enumerate(websites[1:], start=1):  # 從第二個網站開始
            # 使用 JavaScript 打开新分頁
            driver._driver.execute_script(f"window.open('{website['url']}', '_blank');")
            time.sleep(5)  # 等待新分頁加载
            
            # 切換到新分頁
            new_window = driver._driver.window_handles[-1]  # 獲取最新打開的分頁
            driver._driver.switch_to.window(new_window)
            print(driver._driver.title)
            driver._driver.refresh()
            time.sleep(5)
            
            wait = WebDriverWait(driver._driver, a.button_time)
            restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{website["expected_text"]}")]')))
            if restricted:
                logger.info(f"Pass. {website['expected_text']}")
                print(f"Pass. {website['expected_text']}")
                pass_count += 1
            else:
                logger.error("Fail.")
                print("Fail")
            
            # 關閉第一個分頁
            driver._driver.switch_to.window(driver._driver.window_handles[0])  # 切換回第一個分頁
            driver._driver.close()  # 關閉第一個分頁
            
            # 切換回新分頁
            driver._driver.switch_to.window(new_window)
        
        if pass_count == len(websites) - 1:  # 減去第一個已經訪問的網站
            result_CheckWeb = True
            print("Pass")
        else:
            result_CheckWeb = False
            print("Fail")
    
    except Exception as e:
        logger.error(f"An error occurred:", exc_info=True)
        print("Fail.Exception...")
        result_CheckWeb = False
    
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckWeb, execution_time, current_time

def CheckNotReboot():
    result_CheckNotReboot = False
    start_time = time.time()
    try:
        result = subprocess.run(["ping", "8.8.8.8", "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_%Y%m%d_%H%M%S.txt")
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                print("Fail.Dut reboot.")
                result_CheckNotReboot = False
                time.sleep(a.reboot_time)
            else:
                result_CheckNotReboot = True
                print("Pass.Dut not reboot.")
                time.sleep(10)
        else:
            print("Pass. No connection issues found.")
            result_CheckNotReboot = True
            
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_CheckNotReboot = False
        time.sleep(a.reboot_time)
    finally:
            end_time = time.time()
            execution_time = end_time - start_time
            current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            return result_CheckNotReboot, execution_time, current_time

def CheckUpgradePageUrl():
    result_CheckUpgradePageUrl = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #upgrade
        d.element("id", "submenu_UpdateFirmware", sec=a.buffer_time)
        #http://tsd.dlink.com.tw/GPL.asp.
        wait = WebDriverWait(d._driver, a.button_time)
        GPL = wait.until(EC.presence_of_element_located((By.LINK_TEXT, "http://tsd.dlink.com.tw/GPL.asp.")))
        GPL.click()
        time.sleep(5)
        wait.until(EC.visibility_of_element_located((By.XPATH, '//*[contains(text(),"GPL")]')))
        time.sleep(10)
        print("Pass. Successfully accessed the GPL linked website.")
        result_CheckUpgradePageUrl = True
        time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_CheckUpgradePageUrl = False
        time.sleep(10)
    finally:
            end_time = time.time()
            execution_time = end_time - start_time
            current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            return result_CheckUpgradePageUrl, execution_time, current_time
    
#ping www.google.com
def ping_test():
    file_path = f"{a.Log_folder}\\ping_test.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ping_test")
    start_time = time.time()
    result_ping_test = False
    try:
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", "www.google.com", "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_%Y%m%d_%H%M%S.txt")
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.error("Fail.Ping fail.")
                print("Fail.")
                result_ping_test = False
            else:
                logger.info("Pass.Can ping google.")
                result_ping_test = True
                print("Pass.")
        else:
            logger.info("Pass. No connection issues found.")
            result_ping_test = True
            print("Pass.")

    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ping_test = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ping_test, execution_time, current_time

def CheckDefaultNTP():
    result_CheckDefaultNTP = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Time", sec=a.buffer_time)
        d.scrolldown(500)
        elements = d._driver.find_elements(By.XPATH, "//a[starts-with(@id, 'sbSelector_') and text()='Google NTP Server']")
        for element in elements:
            element_text = element.text
            print(f"Get: {element_text}")
            if element_text == "Google NTP Server":
                print(f"Pass. Get: {element_text}")
                result_CheckDefaultNTP = True
                break
            else:
                print(f"Fail. Get: {element_text}")
    except Exception as e:
        print(f"An error occurred: {e}")
        print("\n+++++ False +++++\n")
        result_CheckDefaultNTP = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckDefaultNTP, execution_time, current_time

def ChangeNTPManual():
    result_ChangeNTPManual = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #time
        d.element("id", "submenu_Time", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("downmenu", "Manual", sec=a.buffer_time)
        d.element("input", "NTPServer_Address",txt="tock.stdtime.gov.tw", sec=a.buffer_time)
        d.save_new()
        time.sleep(10)
        Manual = d._driver.find_element('xpath','//input[@name="NTPServer_Address"]')
        if "tock.stdtime.gov.tw" in Manual.get_attribute("value"):
            print("Pass. tock.stdtime.gov.tw")
            result_ChangeNTPManual = True
            time.sleep(10)
        else:
            print("Fail.")
            result_ChangeNTPManual = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeNTPManual = False
        time.sleep(10)
    finally:
            end_time = time.time()
            execution_time = end_time - start_time
            current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            return result_ChangeNTPManual, execution_time, current_time
    
def AddScheduleMonday():
    result_AddScheduleMonday = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #time
        d.element("id", "submenu_Time", sec=a.buffer_time)
        #schedule
        d.element("java", "Schedule", sec=a.buffer_time)
        #add schedule
        d.element("id", "createButton", sec=a.buffer_time)
        d.element("input", "schedule_name",txt="Monday", sec=a.buffer_time)
        d.plan("Monday", "19:00", "22:00", sec=3)
        d.element("xpath", "//button[contains(text(), 'Apply')]", sec=a.buffer_time)
        d.save_new()
        elements = d._driver.find_elements("xpath",'//*[contains(text(),"Monday")]')
        if len(elements) > 0:
            print("Pass. Successfully Add Schedule Monday .")
            result_AddScheduleMonday = True
            time.sleep(10)
        else:
            print("Fail.")
            result_AddScheduleMonday = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_AddScheduleMonday = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AddScheduleMonday, execution_time, current_time
    
def EditScheduleMondayToTuesday():
    result_EditScheduleMondayToTuesday = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #time
        d.element("id", "submenu_Time", sec=a.buffer_time)
        #schedule
        d.element("java", "Schedule", sec=a.buffer_time)
        #Edit schedule
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.element("input", "schedule_name",txt="Tuesday", sec=a.buffer_time)
        d.plan("Tuesday", "19:00", "22:00", sec=3)
        d.element("xpath", "//button[contains(text(), 'Apply')]", sec=a.buffer_time)
        d.save_new()
        elements = d._driver.find_elements("xpath",'//*[contains(text(),"Tuesday")]')
        if len(elements) > 0:
            print("Pass. Successfully Edit Schedule to Tuesday .")
            result_EditScheduleMondayToTuesday = True
            time.sleep(10)
        else:
            print("Fail.")
            result_EditScheduleMondayToTuesday = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_EditScheduleMondayToTuesday = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_EditScheduleMondayToTuesday, execution_time, current_time

def DeleteScheduleMonday():
    result_DeleteScheduleMonday = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #time
        d.element("id", "submenu_Time", sec=a.buffer_time)
        #schedule
        d.element("java", "Schedule", sec=a.buffer_time)
        #Delete schedule
        d.element("xpath", a.RemoveIcon, sec=a.buffer_time)
        d.save_new()
        elements = d._driver.find_elements("xpath",'//*[contains(text(),"10")]')
        if len(elements) > 0:
            print("Pass. Successfully Delete Schedule Monday .")
            result_DeleteScheduleMonday = True
            time.sleep(10)
        else:
            print("Fail.")
            result_DeleteScheduleMonday = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_DeleteScheduleMonday = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_DeleteScheduleMonday, execution_time, current_time

def defaultCancelWizard(Browser):
    file_path = f"{a.Log_folder}\\DefaultCancelWizard.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for DefaultCancelWizard")
    url = a.DUT_GUI_url
    d = Dlink(browser=Browser)
    result_DefaultCancelWizard = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_default_pwd)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "closeCreatePopBtn",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "device_password",txt=a.DUT_admin_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.wizard_time)
        #check
        d.open(url,a.DUT_admin_pwd )
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Finish.Dut has finished wizard and can access login page.")
        result_DefaultCancelWizard = True
        print("Finish")
        time.sleep(5)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access login page.")
        result_DefaultCancelWizard = False
        print("Fail")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DefaultCancelWizard = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DefaultCancelWizard, execution_time, current_time
def DefaultCancelWizard():
    return defaultCancelWizard('chrome')
def DefaultCancelWizard_firefox():
    return defaultCancelWizard('firefox')

def DHCPCHTSettingsWizardYes():
    file_path = f"{a.Log_folder}\\DHCPCHTSettingsWizardYes.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DHCPCHTSettingsWizardYes")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_DHCPCHTSettingsWizardYes = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Wizard_Manual",sec=a.buffer_time)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "hasup_yes",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "pppoe_username",txt=a.CHT_name,sec=a.buffer_time)
        d.element("input", "pppoe_password",txt=a.CHT_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "wifi_networkName24G",txt=a.DUT_Wifi_SSID,sec=a.buffer_time)
        d.element("input", "wifi_password24G",txt=a.WiFi_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "device_password",txt=a.DUT_admin_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "timeZone_Search",txt="Asia/Taipei",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "AutoUpgrade_off",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.wizard_time)
        #check
        d.open(url,a.DUT_admin_pwd )
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Finish.Dut has finished wizard and can access login page.")
        result_DHCPCHTSettingsWizardYes = True
        print("Finish")
        time.sleep(5)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access login page.")
        result_DHCPCHTSettingsWizardYes = False
        print("Fail")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DHCPCHTSettingsWizardYes = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DHCPCHTSettingsWizardYes, execution_time, current_time
    
def DHCPCHTSettingsWizardNo():
    file_path = f"{a.Log_folder}\\DHCPCHTSettingsWizardNo.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DHCPCHTSettingsWizardNo")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_DHCPCHTSettingsWizardNo = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Wizard_Manual",sec=a.buffer_time)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "hasup_no",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "wifi_networkName24G",txt=a.DUT_Wifi_SSID,sec=a.buffer_time)
        d.element("input", "wifi_password24G",txt=a.WiFi_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "device_password",txt=a.DUT_admin_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "timeZone_Search",txt="Asia/Taipei",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "AutoUpgrade_off",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.wizard_time)
        #check
        d.open(url,a.DUT_admin_pwd )
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Pass.Dut has finished wizard and can access login page.")
        result_DHCPCHTSettingsWizardNo = True
        print("Finish")
        time.sleep(5)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access login page.")
        result_DHCPCHTSettingsWizardNo = False
        print("Fail")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DHCPCHTSettingsWizardNo = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DHCPCHTSettingsWizardNo, execution_time, current_time

def DHCPSettingsWizardCancel():
    file_path = f"{a.Log_folder}\\DHCPSettingsWizardCancel.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DHCPSettingsWizardCancel")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_DHCPSettingsWizardCancel = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Wizard_Manual",sec=a.buffer_time)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "closeCreatePopBtn",sec=a.buffer_time)
        #check
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Pass.Dut has finished wizard and can access login page.")
        result_DHCPSettingsWizardCancel = True
        print("Finish")
        time.sleep(5)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access login page.")
        result_DHCPSettingsWizardCancel = False
        print("Fail")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DHCPSettingsWizardCancel = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DHCPSettingsWizardCancel, execution_time, current_time

def run_DownLan():
    file_path = f"{a.Log_folder}\\run_DownLan.log"
    logger = setup_logger(file_path)
    logger.info("Log message for run_DownLan")
    start_time = time.time()
    def disable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=disable'])
    def enable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=enable'])
    result_DownLan = False
    if not ctypes.windll.shell32.IsUserAnAdmin():
        logger.error("Fail.Please run the program as administrator.")
        print("Please run the program as administrator.")
        return False, 0, ""
    try:
        disable_Lan()
        time.sleep(5)
        result_DownLan = True
        print("Finish")      
    except Exception as e:
        print("\n+++++ False +++++\n")
        logger.error(f"An error occurred: {str(e)}")
        result_DownLan = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DownLan, execution_time, current_time

def run_UpLan():
    file_path = f"{a.Log_folder}\\run_UpLan.log"
    logger = setup_logger(file_path)
    logger.info("Log message for run_UpLan")
    start_time = time.time()
    def disable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=disable'])
    def enable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=enable'])
    result_UpLan = False    
    if not ctypes.windll.shell32.IsUserAnAdmin():
        logger.error("Fail.Please run the program as administrator.")
        print("Please run the program as administrator.")
        return False, 0, ""
    try:
        enable_Lan()
        time.sleep(5)
        result_UpLan = True
        print("Finish")
    except Exception as e:
        print("\n+++++ False +++++\n")
        logger.error(f"An error occurred: {str(e)}")
        result_UpLan = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_UpLan, execution_time, current_time
    
def run_pingv4v6():
    file_path = f"{a.Log_folder}\\run_pingv4v6.log"
    logger = setup_logger(file_path)
    logger.info("Log message for run_pingv4v6")
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    time.sleep(60)
    def execute_ping(address, version):
        time.sleep(40)
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        connection_issues_counts = 0
        connection_issue_messages = ["目的地連接埠無法連線", "目的地主機無法連線", "要求等候逾時", "Ping 要求找不到主機","傳輸失敗。一般失敗","目的地網路無法連線"]
        for message in connection_issue_messages:
            connection_issues_counts += result.stdout.count(message)
        if connection_issues_counts > 5:
            logger.error("Fail. More than 4 occurrences of connection issues.")
            print("Fail.")
            return False
        else:
            logger.info("Pass. Connection issues found but not exceeding 4 occurrences.")
            print("Pass.")
            return True
    try:
        start_time = time.time()
        is_passed_v4 = []
        is_passed_v6 = []
        v4_address = "8.8.8.8"
        v6_address = "2001:4860:4860::8888"
        is_passed_v4.append(execute_ping(v4_address, "-4"))
        is_passed_v6.append(execute_ping(v6_address, "-6"))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        is_passed_v4 = [False]
        is_passed_v6 = [False]
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(is_passed_v4, is_passed_v6)
        logging.shutdown()
        return is_passed_v4, is_passed_v6, execution_time, current_time

def Add12ProfileParentalControl():
    file_path = f"{a.Log_folder}\\Add12ProfileParentalControl.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Add12ProfileParentalControl")
    result_Add12ProfileParentalControl = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        profile_names = [
            "001",
        ]
        device = [
            "pcdevice_chk_0",
        ]
        for profile_name,device in zip(profile_names,device):
            #parental control
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            # Add Profile
            d.element("id", "pc_createButton", sec=a.buffer_time)
            # Profile Name
            d.element("input", "profileName", txt=profile_name, sec=a.buffer_time)
            # add schedule
            d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
            d.plan("Monday", "19:00", "22:00", sec=3)
            d.element("id", "schedule_apply", sec=a.buffer_time)
            # Bedtime
            d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
            d.element("id", "bedTime_apply", sec=a.buffer_time)
            d.scrolldown(500)
            # Add device
            d.element("id", "device_createButton", sec=a.buffer_time)
            d.element("id", device, sec=a.buffer_time)
            d.element("id", "device_selectBtn_apply", sec=a.buffer_time)
            # Add website Filter
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt="http://www.yahoo.com.tw", sec=a.buffer_time)
            d.element("input", "wf_url", txt="www.yahoo.com.tw", sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
            d.save_new()
        profile_names = [
            "002abcdefghijklmnopqrstuvwxyz",
            "003ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "00401234567890",
            "005- _ -",
            "006",
            "007",
            "008",
            "009",
            "010",
            "011",
            "012"
        ]
        for profile_name in zip(profile_names):
            #parental control
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            # Add Profile
            d.element("id", "pc_createButton", sec=a.buffer_time)
            # Profile Name
            d.element("input", "profileName", txt=profile_name, sec=a.buffer_time)
            # add schedule
            d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
            d.plan("Monday", "19:00", "22:00", sec=3)
            d.element("id", "schedule_apply", sec=a.buffer_time)
            # Bedtime
            d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
            d.element("id", "bedTime_apply", sec=a.buffer_time)
            d.scrolldown(500)
            # Add website Filter
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt="http://www.yahoo.com.tw", sec=a.buffer_time)
            d.element("input", "wf_url", txt="www.yahoo.com.tw", sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
            d.save_new()
        d.scrolldown(500)
        time.sleep(5)
        button_element = d._driver.find_element(By.ID,"pc_createButton")
        if button_element.is_enabled():
            print("Fail.Button is enabled.")
            logger.error("Fail to Add Profiles to Max.")
            result_Add12ProfileParentalControl = False
            time.sleep(5)
        else:
            logger.info("Pass.Button is disable")
            print("Pass. Successfully Add Profiles to Max .")
            result_Add12ProfileParentalControl = True
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Add12ProfileParentalControl = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Add12ProfileParentalControl, execution_time, current_time

def Addtest001Profile():
    file_path = f"{a.Log_folder}\\Addtest001Profile.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Addtest001Profile")
    result_Addtest001Profile = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Add Profile
        d.element("id", "pc_createButton", sec=a.buffer_time)
        # Profile Name
        d.element("input", "profileName", txt="test001", sec=a.buffer_time)
        # add schedule
        d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
        d.plan("Monday", "19:00", "22:00", sec=3)
        d.element("id", "schedule_apply", sec=a.buffer_time)
        # Bedtime
        d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        d.element("id", "wf_createButton", sec=a.buffer_time)
        d.element("input", "wf_name", txt="http://www.yahoo.com.tw", sec=a.buffer_time)
        d.element("input", "wf_url", txt="www.yahoo.com.tw", sec=a.buffer_time)
        try:
            apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
            for button in apply_buttons:
                if "Apply" in button.text:
                    d._driver.execute_script("arguments[0].click();", button)
                    print("Clicked the 'Apply' button successfully.")
                    break
        except:
            print("Failed to click the 'Apply' button.")
        time.sleep(5)
        d.save_new()
        d.scrolldown(500)
        time.sleep(5)
        ProfileName = d._driver.find_elements('xpath', "//*[contains(text(), 'test001')]")
        DeviceCount = d._driver.find_elements('xpath', "//*[contains(text(), '0')]")
        time.sleep(5)
        if len(ProfileName) > 0 and len(DeviceCount) > 0:
            logger.info("Pass.Successfully add test001 Profile in Parental Control.")
            print("Pass.")
            result_Addtest001Profile = True
            time.sleep(5)
        else:
            logger.error("Fail to Add test001 Profile.")
            print("Fail.")
            result_Addtest001Profile = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Addtest001Profile = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Addtest001Profile, execution_time, current_time
    
def Edittest001ProfileTotest002():
    file_path = f"{a.Log_folder}\\Edittest001ProfileTotest002.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Edittest001ProfileTotest002")
    result_Edittest001ProfileTotest002 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Edit Profile
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        # Edit Profile Name
        d.element("id", "edit_Btn_profileName", sec=a.buffer_time)
        d.element("input", "pop_profileName", txt="test002", sec=a.buffer_time)
        d.element("id", "wf_save", sec=a.buffer_time)
        d.scrolldown(300)
        # edit schedule
        d.element("id", "sch_editBtn", sec=a.buffer_time)
        d.plan("Tuesday", "19:00", "22:00", sec=3)
        d.element("id", "schedule_apply", sec=a.buffer_time)
        # edit Bedtime
        d.element("id", "bedsch_editBtn", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.scrolldown(500)
        # Edit website Filter
        d.element("xpath", "//*[@id='wf_table']/tbody/tr/td[3]/img", sec=a.buffer_time)
        d.element("input", "wf_name", txt="yahoo", sec=a.buffer_time)
        d.element("input", "wf_url", txt="yahoo.com.tw", sec=a.buffer_time)
        try:
            apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
            for button in apply_buttons:
                if "Apply" in button.text:
                    d._driver.execute_script("arguments[0].click();", button)
                    print("Clicked the 'Apply' button successfully.")
                    break
        except:
            print("Failed to click the 'Apply' button.")
        time.sleep(5)
        d.scrolldown(600)
        #Add Device
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice0,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        d.save_new()
        d.scrolldown(500)
        time.sleep(5)
        elements_test002 = d._driver.find_elements('xpath', "//*[contains(text(), 'test002')]")
        if len(elements_test002) > 0:
            logger.info("Pass.Successfully edit test001 Profile to test002 in Parental Control.")
            print("Pass.")
            result_Edittest001ProfileTotest002 = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit test001 Profile To test002.")
            print("Fail.")
            result_Edittest001ProfileTotest002 = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Edittest001ProfileTotest002 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Edittest001ProfileTotest002, execution_time, current_time

def Add5ProfileParentalControl():
    file_path = f"{a.Log_folder}\\Add5ProfileParentalControl.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Add5ProfileParentalControl")
    result_Add5ProfileParentalControl = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        profile_names1 = [
            "001",
        ]
        device1 = [
            "pcdevice_chk_0",
        ]
        for profile_name1,device1 in zip(profile_names1,device1):
            #parental control
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            # Add Profile
            d.element("id", "pc_createButton", sec=a.buffer_time)
            # Profile Name
            d.element("input", "profileName", txt=profile_name1, sec=a.buffer_time)
            # add schedule
            d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
            d.plan("Monday", "19:00", "22:00", sec=3)
            d.element("id", "schedule_apply", sec=a.buffer_time)
            # Bedtime
            d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
            d.element("id", "bedTime_apply", sec=a.buffer_time)
            d.scrolldown(500)
            # Add device
            d.element("id", "device_createButton", sec=a.buffer_time)
            d.element("id", device1 , sec=a.buffer_time)
            d.element("id", "device_selectBtn_apply", sec=a.buffer_time)
            # Add website Filter
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt="http://www.yahoo.com.tw", sec=a.buffer_time)
            d.element("input", "wf_url", txt="www.yahoo.com.tw", sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
            d.save_new()
        profile_names2 = [
            "002abcdefghijklmnopqrstuvwxyz",
            "003ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "00401234567890",
            "005- _ -",
        ]
        for profile_name2 in zip(profile_names2):
            #parental control
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            # Add Profile
            d.element("id", "pc_createButton", sec=a.buffer_time)
            # Profile Name
            d.element("input", "profileName", txt=profile_name2, sec=a.buffer_time)
            # add schedule
            d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
            d.plan("Monday", "19:00", "22:00", sec=3)
            d.element("id", "schedule_apply", sec=a.buffer_time)
            # Bedtime
            d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
            d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
            d.element("id", "bedTime_apply", sec=a.buffer_time)
            d.scrolldown(500)
            # Add website Filter
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt="http://www.yahoo.com.tw", sec=a.buffer_time)
            d.element("input", "wf_url", txt="www.yahoo.com.tw", sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
            d.save_new()
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(500)
        time.sleep(5)
        profile = d._driver.find_elements('xpath', "//*[contains(text(), '7')]")
        if len(profile) > 0:
            logger.info("Pass.Successfully add 5 profile.")
            print("Pass.")
            result_Add5ProfileParentalControl = True
            time.sleep(5)
        else:
            logger.error("Fail to Add 5 Profile Parental Control")
            print("Fail.")
            result_Add5ProfileParentalControl = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_Add5ProfileParentalControl = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Add5ProfileParentalControl, execution_time, current_time
    
def Delete1Profile():
    file_path = f"{a.Log_folder}\\Delete1Profile.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Delete1Profile")
    result_Delete1Profile = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        
        # Delete Profile
        d.element("xpath", a.RemoveIcon,index=1, sec=a.buffer_time)
        #popalert_ok
        d.element("id", "popalert_ok", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        elements_test002 = d._driver.find_elements('xpath', "//*[contains(text(), '8')]")
        if len(elements_test002) > 0:
            logger.info("Pass.Successfully delete 1 profile in Parental Control.")
            print("Pass.")
            result_Delete1Profile = True
            time.sleep(5)
        else:
            logger.error("Fail to Delete 1 Profile.")
            print("Fail.")
            result_Delete1Profile = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Delete1Profile = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Delete1Profile, execution_time, current_time

#Delete4Profile
def Delete4Profile():
    file_path = f"{a.Log_folder}\\Delete4Profile.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Delete4Profile")
    result_Delete4Profile = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        for _ in range(4):
            #parental control
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            # Delete Profile
            d.element("xpath", a.RemoveIcon,index=1, sec=a.buffer_time)
            #popalert_ok
            d.element("id", "popalert_ok", sec=a.buffer_time)
            d.element("id", "popalert_ok", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        elements_test002 = d._driver.find_elements('xpath', "//*[contains(text(), '12')]")
        if len(elements_test002) > 0:
            logger.info("Pass.Successfully delete all profiles in Parental Control.")
            print("Pass.")
            result_Delete4Profile = True
            time.sleep(5)
        else:
            logger.error("Fail to Delete 4 Profile.")
            print("Fail.")
            result_Delete4Profile = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Delete4Profile = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Delete4Profile, execution_time, current_time

def ClientNameCheckNoUnknow():
    file_path = f"{a.Log_folder}\\ClientNameCheckNoUnknow.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ClientNameCheckNoUnknow")
    result_ClientNameCheckNoUnknow = False
    client_names = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(10)
        client_name_elements = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, "client_Name"))
        )
        client_names = [element.text for element in client_name_elements]

        for client_name_text in client_names:
            if client_name_text and client_name_text.lower() != "unknown":
                logger.info(f"Pass.The client name is: {client_name_text}")
                print("Pass.")
                result_ClientNameCheckNoUnknow = True
            else:
                logger.error("Fail.Client name is empty or unknown")
                print("Fail.")
                result_ClientNameCheckNoUnknow = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ClientNameCheckNoUnknow = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ClientNameCheckNoUnknow, execution_time, current_time

def CheckClient1stParentalControlDisable():
    file_path = f"{a.Log_folder}\\CheckClient1stParentalControlDisable.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckClient1stParentalControlDisable")
    result_CheckClient1stParentalControlDisable = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData1, sec=a.buffer_time)
        time.sleep(5)
        #按鈕狀態為disable但在他的xpath裡面會是enable
        ParentalControlStatus = d._driver.find_elements(By.XPATH, "//*[contains(text(), 'enable')]")
        if len(ParentalControlStatus) > 0:
            logger.info("Pass.Client 1st Parental Control default status is Disable.")
            print("Pass.")
            result_CheckClient1stParentalControlDisable = True
            time.sleep(5)
        else:
            logger.error("Fail.Client 1st Parental Control default status is not Disable.")
            print("Fail.")
            result_CheckClient1stParentalControlDisable = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckClient1stParentalControlDisable = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckClient1stParentalControlDisable, execution_time, current_time
    
def Client1stHyperlink():
    file_path = f"{a.Log_folder}\\Client1stHyperlink.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Client1stHyperlink")
    result_Client1stHyperlink = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="enable", sec=a.buffer_time)
        d.element("xpath", "//a[@href='ParentalControl_AQpro.html']", sec=a.buffer_time)
        time.sleep(5)
        parentalControl = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.XPATH, "//*[contains(text(),'Parental Control')]"))
        )
        if len(parentalControl) > 0:
            time.sleep(5)
            logger.info("Pass. It links to the parental control page successfully.")
            print("Pass.")
            result_Client1stHyperlink = True
            time.sleep(5)
        else:
            logger.error("Fail.It's fail to link to the parental control page.")
            print("Fail.")
            result_Client1stHyperlink = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Client1stHyperlink = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Client1stHyperlink, execution_time, current_time
    
#UpLan2
def run_UpLan2():
    file_path = f"{a.Log_folder}\\run_UpLan2.log"
    logger = setup_logger(file_path)
    logger.info("Log message for run_UpLan2")
    start_time = time.time()
    def disable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=disable'])
    def enable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=enable'])
    def enable_Lan2():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan2, 'admin=enable'])
    def disable_Lan2():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan2, 'admin=disable'])
    result_UpLan2 = False
    if not ctypes.windll.shell32.IsUserAnAdmin():
        logger.error("Fail.Please run the program as administrator.")
        print("Please run the program as administrator.")
        return False, 0, ""
    try:
        enable_Lan2()
        time.sleep(5)
        result_UpLan2 = True
        print("Finish")
    except Exception as e:
        print("Error:", e)
        logger.error(f"An error occurred: {str(e)}")
        result_UpLan2 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_UpLan2, execution_time, current_time
    
#DownLan2
def run_DownLan2():
    file_path = f"{a.Log_folder}\\run_DownLan2.log"
    logger = setup_logger(file_path)
    logger.info("Log message for run_DownLan2")
    start_time = time.time()
    def disable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=disable'])
    def enable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=enable'])
    def enable_Lan2():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan2, 'admin=enable'])
    def disable_Lan2():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan2, 'admin=disable'])
    result_DownLan2 = False
    if not ctypes.windll.shell32.IsUserAnAdmin():
        logger.error("Fail.Please run the program as administrator.")
        print("Please run the program as administrator.")
        return False, 0, ""
    try:
        disable_Lan2()
        time.sleep(5)
        result_DownLan2 = True
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception...")
        result_DownLan2 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DownLan2, execution_time, current_time

def Edittest001ProfileToAdd2Clients():
    file_path = f"{a.Log_folder}\\Edittest001ProfileToAdd2Clients.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Edittest001ProfileToAdd2Clients")
    result_Edittest001ProfileToAdd2Clients = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Edit Profile
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        #Add Device
        #1
        d.scrolldown(600)
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice0,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        time.sleep(5)
        #2
        d.scrolldown(600)
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice1,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        d.scrolldown(200)
        time.sleep(5)
        elements_DeviceCount = d._driver.find_elements('xpath', "//*[text() = '2']")
        if len(elements_DeviceCount) > 0:
            logger.info("Pass.Successfully edit test001 Profile to add 2 clients in Parental Control.")
            print("Pass.")
            result_Edittest001ProfileToAdd2Clients = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit test001 Profile To Add 2 Clients.")
            print("Fail.")
            result_Edittest001ProfileToAdd2Clients = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Edittest001ProfileToAdd2Clients = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Edittest001ProfileToAdd2Clients, execution_time, current_time
    
def RemoveProfile1Client():
    file_path = f"{a.Log_folder}\\RemoveProfile1Client.log"
    logger = setup_logger(file_path)
    logger.info("Log message for RemoveProfile1Client")
    result_RemoveProfile1Client = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #edit
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.element("id", "edit_Btn_profileName", sec=a.buffer_time)
        input_profileName = 'test1.'
        d.element("input", "pop_profileName",txt=input_profileName, sec=a.buffer_time)
        d.element("id", "wf_save", sec=a.buffer_time)
        d.scrolldown(600)
        d.element("class", "cardElement_remove",index=1, sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        #check
        time.sleep(5)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        element_1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, f'//td[text()="{input_profileName}"]'))
        )
        value_1 = element_1.text
        if value_1 == input_profileName:
            print(f"Pass.ProfileName: {value_1}")
            result_RemoveProfile1Client.append(True)
        else:
            print(f"Fail.ProfileName: {value_1}")
            result_RemoveProfile1Client.append(False)
        
        element_2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, f'//td[text()="{input_profileName}"]/following-sibling::td[1]'))
        )
        value_2 = element_2.text
        if value_2 == "1":
            logger.info(f"Pass.DeviceCount: {value_2}")
            result_RemoveProfile1Client.append(True)
            print("Pass.")
        else:
            logger.error(f"Fail.DeviceCount: {value_2}")
            result_RemoveProfile1Client.append(False)
            print("Fail.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception...")
        result_RemoveProfile1Client = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_RemoveProfile1Client, execution_time, current_time
    
def AddClient1Manually():
    file_path = f"{a.Log_folder}\\AddClient1Manually.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddClient1Manually")
    result_AddClient1Manually = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Add Client
        d.element("class", "client_add_Tag", sec=a.buffer_time)
        d.element("input", "client_Name",txt="test1", sec=a.buffer_time)
        d.element("input", "client_editMac",txt="1a:03:4f:db:da:55", sec=a.buffer_time)
        d.element("checkbox", "enableAccess",status="enable", sec=a.buffer_time)
        d.element("downmenu", "test1.", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        time.sleep(5)
        ProfileClientNumber = d._driver.find_elements('xpath', "//*[text() = '2']")
        if len(ProfileClientNumber) > 0:
            logger.info("Pass.Add Client 1 Manually and Check Profile Client number Is 2.")
            print("Pass.")
            result_AddClient1Manually = True
            time.sleep(5)
        else:
            logger.error("Fail.Fail to add Client 1 Manually or Check Profile Client number Is not 2.")
            print("Fail.")
            result_AddClient1Manually = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddClient1Manually = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddClient1Manually, execution_time, current_time
    
def AddClient2Manually():
    file_path = f"{a.Log_folder}\\AddClient2Manually.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddClient2Manually")
    result_AddClient2Manually = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Add Client
        d.element("class", "client_add_Tag", sec=a.buffer_time)
        d.element("input", "client_Name",txt="test2", sec=a.buffer_time)
        d.element("input", "client_editMac",txt="2b:03:4f:db:da:66", sec=a.buffer_time)
        d.element("checkbox", "enableAccess",status="enable", sec=a.buffer_time)
        d.element("downmenu", "test1.", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        time.sleep(5)
        ProfileClientNumber = d._driver.find_elements('xpath', "//*[text() = '3']")
        if len(ProfileClientNumber) > 0:
            logger.info("Pass.Add Client 2 Manually and Check Profile Client number Is 3.")
            print("Pass.")
            result_AddClient2Manually = True
            time.sleep(5)
        else:
            logger.error("Fail.Fail to add Client 2 Manually or Check Profile Client number Is not 3.")
            print("Fail.")
            result_AddClient2Manually = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddClient2Manually = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddClient2Manually, execution_time, current_time
    
def DeleteProflle2ndClient():
    file_path = f"{a.Log_folder}\\DeleteProflle2ndClient.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DeleteProflle2ndClient")
    result_DeleteProflle2ndClient = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Edit Profile
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(600)
        #Remove 1 Device
        d.element("class", "cardElement_remove",index=3, sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        d.scrolldown(200)
        time.sleep(5)
        elements_DeviceCount = d._driver.find_elements('xpath', "//*[text() = '2']")
        if len(elements_DeviceCount) > 0:
            logger.info("Pass.Successfully delete 1 device in test001 Profile in Parental Control.")
            print("Pass.")
            result_DeleteProflle2ndClient = True
            time.sleep(5)
        else:
            logger.error("Fail to Delete Proflle 2nd Client")
            print("Fail.")
            result_DeleteProflle2ndClient = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DeleteProflle2ndClient = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DeleteProflle2ndClient, execution_time, current_time
    

def AddClientManuallyWithIPAdrReserve():
    file_path = f"{a.Log_folder}\\AddClientManuallyWithIPAdrReserve.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddClientManuallyWithIPAdrReserve")
    result_AddClientManuallyWithIPAdrReserve = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Add Client
        d.element("class", "client_add_Tag", sec=a.buffer_time)
        d.element("input", "client_Name",txt="client01", sec=a.buffer_time)
        d.element("input", "client_editMac",txt="1a:00:00:00:aa:66", sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=a.client1IP, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData2, sec=a.buffer_time)
        time.sleep(5)
        #按鈕狀態為disable但在他的xpath裡面會是enable
        ParentalControlStatus = d._driver.find_elements(By.XPATH, "//*[contains(text(), 'enable')]")
        if len(ParentalControlStatus) > 0:
            logger.info("Pass.The Client Parental Control default status is Disable.")
            print("Pass.")
            result_AddClientManuallyWithIPAdrReserve = True
            time.sleep(5)
        else:
            logger.error("Fail.The Client Parental Control default status is not Disable.")
            print("Fail.")
            result_AddClientManuallyWithIPAdrReserve = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddClientManuallyWithIPAdrReserve = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddClientManuallyWithIPAdrReserve, execution_time, current_time
    
def ClientHyperlink2nd():
    file_path = f"{a.Log_folder}\\ClientHyperlink2nd.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ClientHyperlink2nd")
    result_ClientHyperlink2nd = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData2, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="enable", sec=a.buffer_time)
        d.element("xpath", "//a[@href='ParentalControl_AQpro.html']", sec=a.buffer_time)
        time.sleep(5)
        parentalControl = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.XPATH, "//*[contains(text(),'Parental Control')]"))
        )
        if len(parentalControl) > 0:
            time.sleep(5)
            logger.info("Pass. It links to the parental control page successfully.")
            print("Pass.")
            result_ClientHyperlink2nd = True
            time.sleep(5)
        else:
            logger.error("Fail.It's fail to link to the parental control page.")
            print("Fail.")
            result_ClientHyperlink2nd = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ClientHyperlink2nd = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ClientHyperlink2nd, execution_time, current_time
    
def AddProfileTest1SaturdaySunday():
    file_path = f"{a.Log_folder}\\AddProfileTest1SaturdaySunday.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddProfileTest1SaturdaySunday")
    result_AddProfileTest1SaturdaySunday = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Add Profile
        d.element("id", "pc_createButton", sec=a.buffer_time)
        # Profile Name
        d.element("input", "profileName", txt="test1", sec=a.buffer_time)
        # add schedule
        d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
        d.plan("Saturday", "19:00", "22:00", sec=3)
        d.plan("Sunday", "19:00", "22:00", sec=3)
        d.element("id", "schedule_apply", sec=a.buffer_time)
        # Bedtime
        d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        d.element("id", "wf_createButton", sec=a.buffer_time)
        d.element("input", "wf_name", txt="http://www.yahoo.com.tw", sec=a.buffer_time)
        d.element("input", "wf_url", txt="www.yahoo.com.tw", sec=a.buffer_time)
        try:
            apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
            for button in apply_buttons:
                if "Apply" in button.text:
                    d._driver.execute_script("arguments[0].click();", button)
                    print("Clicked the 'Apply' button successfully.")
                    break
        except:
            print("Failed to click the 'Apply' button.")
        time.sleep(5)
        d.save_new()
        d.scrolldown(500)
        time.sleep(5)
        ProfileName = d._driver.find_elements('xpath', "//*[contains(text(), 'test1')]")
        DeviceCount = d._driver.find_elements('xpath', "//*[contains(text(), '0')]")
        time.sleep(5)
        if len(ProfileName) > 0 and len(DeviceCount) > 0:
            logger.info("Pass.Test1 Profile:Device Count = 0")
            print("Pass.")
            result_AddProfileTest1SaturdaySunday = True
            time.sleep(5)
        else:
            logger.error("Fail to Add Profile Test1 Saturday Sunday.")
            print("Fail .")
            result_AddProfileTest1SaturdaySunday = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddProfileTest1SaturdaySunday = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddProfileTest1SaturdaySunday, execution_time, current_time
    
def ModifyProfileAddControlClient():
    file_path = f"{a.Log_folder}\\ModifyProfileAddControlClient.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ModifyProfileAddControlClient")
    result_ModifyProfileAddControlClient = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Edit Profile
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        #Add Device
        #1
        d.scrolldown(600)
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice0,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        time.sleep(5)
        #2
        d.scrolldown(600)
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice1,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        d.scrolldown(200)
        time.sleep(5)
        elements_DeviceCount = d._driver.find_elements('xpath', "//*[text() = '2']")
        if len(elements_DeviceCount) > 0:
            logger.info("Pass.Successfully edit test001 Profile to add 2 clients in Parental Control.")
            print("Pass.")
            result_ModifyProfileAddControlClient = True
            time.sleep(5)
        else:
            logger.error("Fail to Modify Profile Add Control Client.")
            print("Fail.")
            result_ModifyProfileAddControlClient = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ModifyProfileAddControlClient = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ModifyProfileAddControlClient, execution_time, current_time
    
def AddProfileTest1MondayToFriday():
    file_path = f"{a.Log_folder}\\AddProfileTest1MondayToFriday.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddProfileTest1MondayToFriday")
    result_AddProfileTest1MondayToFriday = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Add Profile
        d.element("id", "pc_createButton", sec=a.buffer_time)
        # Profile Name
        d.element("input", "profileName", txt="test1", sec=a.buffer_time)
        # add schedule
        d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
        d.plan("Monday", "19:00", "22:00", sec=3)
        d.plan("Tuesday", "19:00", "22:00", sec=3)
        d.plan("Wednesday", "19:00", "22:00", sec=3)
        d.plan("Thursday", "19:00", "22:00", sec=3)
        d.plan("Friday", "19:00", "22:00", sec=3)
        d.element("id", "schedule_apply", sec=a.buffer_time)
        # Bedtime
        d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        d.element("id", "wf_createButton", sec=a.buffer_time)
        d.element("input", "wf_name", txt="x", sec=a.buffer_time)
        d.element("input", "wf_url", txt="xxx", sec=a.buffer_time)
        try:
            apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
            for button in apply_buttons:
                if "Apply" in button.text:
                    d._driver.execute_script("arguments[0].click();", button)
                    print("Clicked the 'Apply' button successfully.")
                    break
        except:
            print("Failed to click the 'Apply' button.")
        time.sleep(5)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        ProfileName = d._driver.find_elements('xpath', "//*[contains(text(), 'test1')]")
        DeviceCount = d._driver.find_elements('xpath', "//*[contains(text(), '0')]")
        time.sleep(5)
        if len(ProfileName) > 0 and len(DeviceCount) > 0:
            logger.info("Pass.Test1 Profile:Device Count = 0")
            print("Pass.")
            result_AddProfileTest1MondayToFriday = True
            time.sleep(5)
        else:
            logger.error("Fail to Add Profile Test1 Monday To Friday.")
            print("Fail.")
            result_AddProfileTest1MondayToFriday = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddProfileTest1MondayToFriday = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddProfileTest1MondayToFriday, execution_time, current_time
    
def AddProfileTest2SaturdaySunday():
    file_path = f"{a.Log_folder}\\AddProfileTest2SaturdaySunday.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddProfileTest2SaturdaySunday")
    result_AddProfileTest2SaturdaySunday = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Add Profile
        d.element("id", "pc_createButton", sec=a.buffer_time)
        # Profile Name
        d.element("input", "profileName", txt="test2", sec=a.buffer_time)
        # add schedule
        d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
        d.plan("Saturday", "19:00", "22:00", sec=3)
        d.plan("Sunday", "19:00", "22:00", sec=3)
        d.element("id", "schedule_apply", sec=a.buffer_time)
        # Bedtime
        d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        d.element("id", "wf_createButton", sec=a.buffer_time)
        d.element("input", "wf_name", txt="x", sec=a.buffer_time)
        d.element("input", "wf_url", txt="xxx", sec=a.buffer_time)
        try:
            apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
            for button in apply_buttons:
                if "Apply" in button.text:
                    d._driver.execute_script("arguments[0].click();", button)
                    print("Clicked the 'Apply' button successfully.")
                    break
        except:
            print("Failed to click the 'Apply' button.")
        time.sleep(5)
        d.save_new()
        d.scrolldown(500)
        time.sleep(5)
        ProfileName = d._driver.find_elements('xpath', "//*[contains(text(), 'test2')]")
        DeviceCount = d._driver.find_elements('xpath', "//*[contains(text(), '0')]")
        time.sleep(5)
        if len(ProfileName) > 0 and len(DeviceCount) > 0:
            logger.info("Pass.test2 Profile:Device Count = 0")
            print("Pass.")
            result_AddProfileTest2SaturdaySunday = True
            time.sleep(5)
        else:
            logger.error("Fail to Add Profile Test2 Saturday Sunday.")
            print("Fail.")
            result_AddProfileTest2SaturdaySunday = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddProfileTest2SaturdaySunday = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddProfileTest2SaturdaySunday, execution_time, current_time
    
def EditClient1stSettingTest1():
    file_path = f"{a.Log_folder}\\EditClient1stSettingTest1.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditClient1stSettingTest1")
    result_EditClient1stSettingTest1 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="enable", sec=a.buffer_time)
        d.element("downmenu", "test1", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(10)
        test1 = d._driver.find_elements('xpath', "//*[text() = 'test1']")
        if len(test1) > 0:
            logger.info("Pass.Edit Client 1st select test1 Profile.")
            print("Pass.")
            result_EditClient1stSettingTest1 = True
            time.sleep(5)
        else:
            logger.error("Fail.Fail to Edit Client 1st select test1 Profile.")
            print("Fail.")
            result_EditClient1stSettingTest1 = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditClient1stSettingTest1 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditClient1stSettingTest1, execution_time, current_time
    
def CannotPingv4v6():
    file_path = f"{a.Log_folder}\\CannotPingv4v6.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CannotPingv4v6")
    # Release and renew the IP addresses
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    time.sleep(60)
    def execute_ping(address, version):
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        connection_issue_counts = 0
        connection_issue_messages = ["目的地連接埠無法連線", "目的地主機無法連線", "要求等候逾時", "Ping 要求找不到主機","傳輸失敗。一般失敗","目的地網路無法連線"]
        for message in connection_issue_messages:
            connection_issue_counts += result.stdout.count(message)

        if connection_issue_counts > 4 or ("Ping 要求找不到主機" in result.stdout and connection_issue_counts > 0):
            logger.info("Pass. Cannot Ping v4 v6.")
            print("Pass.")
            return True
        else:
            logger.error("Fail. Still Can ping v4 v6.")
            print("Fail.")
            return False
    try:
        start_time = time.time()
        CannotPingv4 = []
        CannotPingv6 = []
        v4_address = "8.8.8.8"
        v6_address = "2001:4860:4860::8888"
        CannotPingv4.append(execute_ping(v4_address, "-4"))
        CannotPingv6.append(execute_ping(v6_address, "-6"))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        CannotPingv4 = [False]
        CannotPingv6 = [False]
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(CannotPingv4, CannotPingv6)
        logging.shutdown()
        return CannotPingv4, CannotPingv6, execution_time, current_time

def CheckPause():
    file_path = f"{a.Log_folder}\\CheckPause.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckPause")
    result_CheckPause = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    time.sleep(5)
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        time.sleep(5)
        Paused = d._driver.find_elements('xpath', "//*[text() = 'Schedule Paused']")
        if len(Paused) > 0:
            logger.info("Pass.Schedule Paused.")
            print("Pass.")
            result_CheckPause = True
            time.sleep(5)
        else:
            logger.error("Fail.State Not Schedule Paused.")
            print("Fail.")
            result_CheckPause = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckPause = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckPause, execution_time, current_time
    
def EditClient1stSettingAlwaysBlock():
    file_path = f"{a.Log_folder}\\EditClient1stSettingAlwaysBlock.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditClient1stSettingAlwaysBlock")
    result_EditClient1stSettingAlwaysBlock = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="enable", sec=a.buffer_time)
        d.element("downmenu", "Always Block", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        AlwaysBlock = d._driver.find_elements('xpath', "//*[text() = 'Always Block']")
        if len(AlwaysBlock) > 0:
            logger.info("Pass.Edit Client 1st select Always Block Profile.")
            print("Pass.")
            result_EditClient1stSettingAlwaysBlock = True
            time.sleep(5)
        else:
            logger.error("Fail.Fail to Edit Client 1st select Always Block Profile.")
            print("Fail.")
            result_EditClient1stSettingAlwaysBlock = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditClient1stSettingAlwaysBlock = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditClient1stSettingAlwaysBlock, execution_time, current_time
    
def AddRealClientManually():
    file_path = f"{a.Log_folder}\\AddRealClientManually.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddRealClientManually")
    result_AddRealClientManually = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        ClientName = a.wirelessClientName
        d.element("class", "client_add_Tag", sec=a.buffer_time)
        d.element("input", "client_Name",txt=ClientName, sec=a.buffer_time)
        d.element("input", "client_editMac",txt=a.clientMac_wireless, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=a.client3IP, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        logger.info(f"Pass.Add Real Client Manually {ClientName}.")
        print("Pass.")
        result_AddRealClientManually = True
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddRealClientManually = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddRealClientManually, execution_time, current_time

def CheckClient2ndParentalControlDisable():
    file_path = f"{a.Log_folder}\\CheckClient2ndParentalControlDisable.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckClient2ndParentalControlDisable")
    result_CheckClient2ndParentalControlDisable = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData2, sec=a.buffer_time)
        time.sleep(5)
        #按鈕狀態為disable但在他的xpath裡面會是enable
        ParentalControlStatus = d._driver.find_elements(By.XPATH, "//*[contains(text(), 'enable')]")
        if len(ParentalControlStatus) > 0:
            logger.info("Pass.Client 2nd Parental Control default status is Disable.")
            print("Pass.")
            result_CheckClient2ndParentalControlDisable = True
            time.sleep(5)
        else:
            logger.error("Fail.Client 2nd Parental Control default status is not Disable.")
            print("Fail.")
            result_CheckClient2ndParentalControlDisable = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckClient2ndParentalControlDisable = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckClient2ndParentalControlDisable, execution_time, current_time

def EditClient2ndSettingTest1():
    file_path = f"{a.Log_folder}\\EditClient2ndSettingTest1.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditClient2ndSettingTest1")
    result_EditClient2ndSettingTest1 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData2, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="enable", sec=a.buffer_time)
        d.element("downmenu", "test1", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="enable", sec=a.buffer_time)
        d.element("downmenu", "test1", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        test1 = d._driver.find_elements('xpath', "//*[text() = 'test1']")
        if len(test1) > 0:
            logger.info("Pass.Edit Client 2nd select test1 Profile.")
            print("Pass.")
            result_EditClient2ndSettingTest1 = True
            time.sleep(5)
        else:
            logger.error("Fail.Fail to Edit Client 2nd select test1 Profile.")
            print("Fail.")
            result_EditClient2ndSettingTest1 = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditClient2ndSettingTest1 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditClient2ndSettingTest1, execution_time, current_time
    
def UpWiFi():
    file_path = f"{a.Log_folder}\\UpWiFi.log"
    logger = setup_logger(file_path)
    logger.info("Log message for UpWiFi")
    start_time = time.time()
    def disable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=disable'])
    def enable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=enable'])
    def enable_wifi():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Wifi, 'admin=enable'])
    def disable_wifi():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Wifi, 'admin=disable'])
    result_UpWiFi = False
    if not ctypes.windll.shell32.IsUserAnAdmin():
        logger.error("Fail.Please run the program as administrator.")
        print("Please run the program as administrator.")
        return False, 0, ""
    try:
        enable_wifi()
        time.sleep(5)
        result_UpWiFi = True
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_UpWiFi = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_UpWiFi, execution_time, current_time

def CheckCanGoToRestrictedWebGoogle():
    file_path = f"{a.Log_folder}\\CheckCanGoToRestrictedWebGoogle.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCanGoToRestrictedWebGoogle")
    start_time = time.time()
    driver = webdriver.Chrome()
    result_CheckCanGoToRestrictedWebGoogle = []
    websites = [
        {"url": "http://www.google.com", "text": "google"}
    ]
    try:
        driver.set_window_size(a.W, a.H)
        for website in websites:
            time.sleep(10)
            driver.get(website["url"])
            time.sleep(5)
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["text"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        result_CheckCanGoToRestrictedWebGoogle.append(True)
                        found = True
                        break
                except Exception:
                    pass
            if not found:
                logger.error("Fail to Check Can Go To Restricted Web Google.")
                print("Fail.")
                result_CheckCanGoToRestrictedWebGoogle.append(False)
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_CheckCanGoToRestrictedWebGoogle = False
    finally:
            end_time = time.time()
            execution_time = end_time - start_time
            current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            logging.shutdown()
            return result_CheckCanGoToRestrictedWebGoogle, execution_time, current_time

def CheckCannotGoToRestrictedWebGoogle():
    file_path = f"{a.Log_folder}\\CheckCannotGoToRestrictedWebGoogle.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoToRestrictedWebGoogle")
    start_time = time.time()
    driver = webdriver.Chrome()
    result = []
    websites = [
        {"url": "http://www.google.com", "text": [
            "paused",
            "restriction",
            "連線至 Wi-Fi",
            "連線至網路",
            "你的連線不是私人連線",
            "無法連上這個網站",
            "沒有網際網路連線",
            "Internet access is unavailable at this time.",
            "Internet access is paused.",
            a.blocked_internet_pause,
            "404 Not Found"
            ]
        },
    ]
    try:
        driver.set_window_size(a.W, a.H)
        for website in websites:
            time.sleep(5)
            driver.get(website["url"])
            time.sleep(10)
            wait = WebDriverWait(driver, a.button_time)
            result_CheckCannotGoToRestrictedWebGoogle = False
            for text in website["text"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}")
                        print("Pass.")
                        result.append(True)
                        result_CheckCannotGoToRestrictedWebGoogle = True
                        time.sleep(5)
                        break
                    else:
                        logger.error("Fail to Check Cannot Go To Restricted Web Google.")
                        print("Fail.")
                        result.append(False)
                        result_CheckCannotGoToRestrictedWebGoogle = False
                        time.sleep(5)
                except Exception:
                    result.append(False)
                    time.sleep(5)
                    print("Fail.Exception...")
            if result_CheckCannotGoToRestrictedWebGoogle == True:
                break
            time.sleep(5)
    except Exception as e:
        if "net::ERR_INTERNET_DISCONNECTED" in str(e):
                logger.info(f"Pass due to internet disconnection. URL: {website['url']}")
                print("Pass due to internet disconnection.")
                result.append(True)
                result_CheckCannotGoToRestrictedWebGoogle = True
        else:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_CheckCannotGoToRestrictedWebGoogle = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        result_CheckCannotGoToRestrictedWebGoogle = any(result)
        logging.shutdown()
        return result_CheckCannotGoToRestrictedWebGoogle, execution_time, current_time

def DownWiFi():
    file_path = f"{a.Log_folder}\\DownWiFi.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DownWiFi")
    start_time = time.time()
    def disable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=disable'])
    def enable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=enable'])
    def enable_wifi():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Wifi, 'admin=enable'])
    def disable_wifi():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Wifi, 'admin=disable'])
    result_DownWiFi = False
    if not ctypes.windll.shell32.IsUserAnAdmin():
        logger.error("Fail.Please run the program as administrator.")
        print("Please run the program as administrator.")
        return False, 0, ""
    try:
        disable_wifi()
        time.sleep(5)
        result_DownWiFi = True
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DownWiFi = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DownWiFi, execution_time, current_time

def EditClient2ndSettingAlwaysBlock():
    file_path = f"{a.Log_folder}\\EditClient2ndSettingAlwaysBlock.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditClient2ndSettingAlwaysBlock")
    result_EditClient2ndSettingAlwaysBlock = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData2, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="enable", sec=a.buffer_time)
        d.element("downmenu", "Always Block", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        AlwaysBlock = d._driver.find_elements('xpath', "//*[text() = 'Always Block']")
        if len(AlwaysBlock) > 0:
            logger.info("Pass.Edit Client 2nd select Always Block Profile.")
            print("Pass.")
            result_EditClient2ndSettingAlwaysBlock = True
            time.sleep(5)
        else:
            logger.error("Fail.Fail to Edit Client 2nd select Always Block Profile.")
            print("Fail.")
            result_EditClient2ndSettingAlwaysBlock = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditClient2ndSettingAlwaysBlock = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditClient2ndSettingAlwaysBlock, execution_time, current_time
    
def EditClient1stSettingDisableParentalControl():
    file_path = f"{a.Log_folder}\\EditClient1stSettingDisableParentalControl.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditClient1stSettingDisableParentalControl")
    result_EditClient1stSettingDisableParentalControl = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="disable", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(10)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData1, sec=a.buffer_time)
        time.sleep(10)
        #按鈕狀態為disable但在他的xpath裡面會是enable
        ParentalControlStatus = d._driver.find_elements(By.XPATH, "//*[contains(text(), 'enable')]")
        if len(ParentalControlStatus) > 0:
            logger.info("Pass.Client 1st Parental Control default status is Disable.")
            print("Pass.")
            result_EditClient1stSettingDisableParentalControl = True
            time.sleep(5)
        else:
            logger.error("Fail.Fail to Edit Client ist Disable Profile.")
            print("Fail.")
            result_EditClient1stSettingDisableParentalControl = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditClient1stSettingDisableParentalControl = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditClient1stSettingDisableParentalControl, execution_time, current_time
    
def AddProfileTest1WithoutScheduleAndBedtime():
    file_path = f"{a.Log_folder}\\AddProfileTest1WithoutScheduleAndBedtime.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddProfileTest1WithoutScheduleAndBedtime")
    result_AddProfileTest1WithoutScheduleAndBedtime = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="test1", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice0,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        time.sleep(5)
        d.element("id", "wf_createButton", sec=a.buffer_time)
        d.element("input", "wf_name", txt="x", sec=a.buffer_time)
        d.element("input", "wf_url", txt="xxx", sec=a.buffer_time)
        try:
            apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
            for button in apply_buttons:
                if "Apply" in button.text:
                    d._driver.execute_script("arguments[0].click();", button)
                    print("Clicked the 'Apply' button successfully.")
                    break
        except:
            print("Failed to click the 'Apply' button.")
        time.sleep(5)
        d.save_new()
        time.sleep(5)
        result_AddProfileTest1WithoutScheduleAndBedtime = True
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddProfileTest1WithoutScheduleAndBedtime = False
        print(result_AddProfileTest1WithoutScheduleAndBedtime)
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddProfileTest1WithoutScheduleAndBedtime, execution_time, current_time

def EditProflleTest1EnableBedtime():
    file_path = f"{a.Log_folder}\\EditProflleTest1EnableBedtime.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1EnableBedtime")
    result_EditProflleTest1EnableBedtime = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        # Bedtime
        d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        d.save_new()
        d.scrolldown(500)
        time.sleep(5)
        ProfileName = d._driver.find_elements('xpath', "//*[contains(text(), 'test1')]")
        DeviceCount = d._driver.find_elements('xpath', "//*[contains(text(), '1')]")
        time.sleep(5)
        if len(ProfileName) > 0 and len(DeviceCount) > 0:
            logger.info("Pass.Test1 Profile:Device Count = 1")
            print("Pass.")
            result_EditProflleTest1EnableBedtime = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Enable Bedtime.")
            print("Fail.")
            result_EditProflleTest1EnableBedtime = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1EnableBedtime = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1EnableBedtime, execution_time, current_time
    
def EditProflleTest1DisableBedtime():
    file_path = f"{a.Log_folder}\\EditProflleTest1DisableBedtime.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1DisableBedtime")
    result_EditProflleTest1DisableBedtime = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        # Bedtime
        d.element("checkbox", "status_bedSchedule", status="disable", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        d.save_new()
        d.scrolldown(500)
        time.sleep(5)
        ProfileName = d._driver.find_elements('xpath', "//*[contains(text(), 'test1')]")
        DeviceCount = d._driver.find_elements('xpath', "//*[contains(text(), '1')]")
        time.sleep(5)
        if len(ProfileName) > 0 and len(DeviceCount) > 0:
            logger.info("Pass.Test1 Profile:Device Count = 1")
            print("Pass.")
            result_EditProflleTest1DisableBedtime = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Disable Bedtime.")
            print("Fail.")
            result_EditProflleTest1DisableBedtime = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1DisableBedtime = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1DisableBedtime, execution_time, current_time

def TelnetReboot():
    file_path = f"{a.Log_folder}\\TelnetReboot.log"
    logger = setup_logger(file_path)
    logger.info("Log message for TelnetReboot")
    result_TelnetReboot = False
    start_time = time.time()
    try:
        time.sleep(30)
        TERATERM_PATH = a.TERATERM_PATH
        p = subprocess.Popen(TERATERM_PATH)
        time.sleep(10)
        new_connection_window = gw.getWindowsWithTitle('建立新連線')[0]
        # 切換到 "建立新連線" 視窗
        new_connection_window.activate()
        new_connection_window.always_on_top = True
        time.sleep(10)
        pyautogui.typewrite(a.DUT_default_Lan_IP)
        pyautogui.press('enter')
        time.sleep(5)
        pyautogui.typewrite('admin')
        pyautogui.press('enter')
        time.sleep(2)
        pyautogui.typewrite(a.DUT_admin_pwd)
        pyautogui.press('enter')
        time.sleep(2)
        pyautogui.typewrite('date')
        pyautogui.press('enter')
        time.sleep(2)
        pyautogui.typewrite('reboot')
        pyautogui.press('enter')
        time.sleep(a.reboot_time)
        result_TelnetReboot = True
        print("Finish")
    except Exception :
        print("Fail.Exception...")
        result_TelnetReboot = False
        time.sleep(a.reboot_time)
    finally:
        p.terminate()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_TelnetReboot, execution_time, current_time
    
def EditProflleTest1EnableSchedule():
    file_path = f"{a.Log_folder}\\EditProflleTest1EnableSchedule.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1EnableSchedule")
    result_EditProflleTest1EnableSchedule = False
    start_time2 = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        # add schedule
        d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
        day = [
                "Monday",
                "Tuesday",
                "Wednesday", 
                "Thursday", 
                "Friday", 
                "Saturday", 
                "Sunday"
            ]
        time_intervals = [
            ("12:00", "12:30"),
            ("13:00", "13:30"),
            ("14:00", "14:30"),
            ("15:00", "15:30"),
            ("16:00", "16:30"),
            ("17:00", "17:30"),
            ("18:00", "18:30"),
            ("19:00", "19:30"),
            ("20:00", "20:30"),
            ("21:00", "21:30")
        ]
        for Day in day:
            for start_time1, end_time1 in time_intervals:
                d.plan(Day, start_time1, end_time1, sec=3)
        d.element("id", "schedule_apply", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        result_EditProflleTest1EnableSchedule = True
        print("Finish")
    except Exception as e:
        result_EditProflleTest1EnableSchedule = False
        print(result_EditProflleTest1EnableSchedule)
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time2 = time.time()
        execution_time = end_time2 - start_time2
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1EnableSchedule, execution_time, current_time
    
def CheckNormal():
    file_path = f"{a.Log_folder}\\CheckNormal.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNormal")
    result_CheckNormal = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    time.sleep(5)
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        time.sleep(5)
        Normal = d._driver.find_elements('xpath', "//*[text() = 'Normal']")
        if len(Normal) > 0:
            logger.info("Pass.Normal.")
            print("Pass.")
            result_CheckNormal = True
            time.sleep(5)
        else:
            logger.info("Fail.State Not Normal.")
            print("Fail.")
            result_CheckNormal = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckNormal = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckNormal, execution_time, current_time
    
def EditProflleTest1DisableSchedule():
    file_path = f"{a.Log_folder}\\EditProflleTest1DisableSchedule.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1DisableSchedule")
    result_EditProflleTest1DisableSchedule = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        # Bedtime
        d.element("checkbox", "status_schedule", status="disable", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        d.save_new()
        d.scrolldown(500)
        time.sleep(5)
        ProfileName = d._driver.find_elements('xpath', "//*[contains(text(), 'test1')]")
        DeviceCount = d._driver.find_elements('xpath', "//*[contains(text(), '1')]")
        time.sleep(5)
        if len(ProfileName) > 0 and len(DeviceCount) > 0:
            logger.info("Pass.Test1 Profile:Device Count = 1")
            print("Pass.")
            result_EditProflleTest1DisableSchedule = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Disable Schedule.")
            print("Fail .")
            result_EditProflleTest1DisableSchedule = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1DisableSchedule = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1DisableSchedule, execution_time, current_time
    
def AddProfileTest1WithoutWebsiteFilter():
    file_path = f"{a.Log_folder}\\AddProfileTest1WithoutWebsiteFilter.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddProfileTest1WithoutWebsiteFilter")
    result_AddProfileTest1WithoutWebsiteFilter = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Add Profile
        d.element("id", "pc_createButton", sec=a.buffer_time)
        # Profile Name
        d.element("input", "profileName", txt="test1", sec=a.buffer_time)
        d.scrolldown(500)
        #add device
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice0,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(10)
        WebsiteFilter = d._driver.find_elements('xpath', "//*[contains(text(), '24')]")
        time.sleep(5)
        if len(WebsiteFilter) > 0 :
            logger.info("Pass.Add Test1 Profile and The default Domain List is empty.")
            print("Pass.")
            result_AddProfileTest1WithoutWebsiteFilter = True
            time.sleep(5)
        else:
            logger.error("Fail.Fail to Add Test1 Profile and The default Domain List is not empty.")
            print("Fail.")
            result_AddProfileTest1WithoutWebsiteFilter = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddProfileTest1WithoutWebsiteFilter = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddProfileTest1WithoutWebsiteFilter, execution_time, current_time
    
def CannotPingv4v6RestrictedDomain():
    file_path = f"{a.Log_folder}\\CannotPingv4v6RestrictedDomain.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CannotPingv4v6RestrictedDomain")
    def execute_ping(address, version):
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.info("Pass. Cannot Ping v4 v6 Restricted Domain.")
                print("Pass.")
                return True
            else:
                logger.error("Fail. Still Can ping v4 v6.")
                print("Fail.")
                return False
        else:
            logger.error("Fail.Still Can ping v4 v6")
            print("Fail.")
            return False
    # Release and renew the IP addresses
    print("ipconfig/flushdns")
    subprocess.run(["ipconfig", "/flushdns"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/release")
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/renew")
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    print("Wait 60 sec...")
    time.sleep(60)
    start_time = time.time()
    CannotPingv4v6RestrictedDomain_v4 = []
    CannotPingv4v6RestrictedDomain_v6 = []
    addresses = [
        "yahoo.com",
        "www.youtube.com",
        "www.facebook.com",
        "www.google.com",
        "www.ge.com",
        "www.blogger.com",
        "microsoft.com",
    ]
    versions = ["-4", "-6"]
    try:
        for address in addresses:
            for version in versions:
                if version == "-4" or version == "-6":
                    is_passed = execute_ping(address, version)
                    if version == "-4":
                        CannotPingv4v6RestrictedDomain_v4.append(is_passed)
                    elif version == "-6":
                        CannotPingv4v6RestrictedDomain_v6.append(is_passed)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        CannotPingv4v6RestrictedDomain_v4 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return CannotPingv4v6RestrictedDomain_v4, CannotPingv4v6RestrictedDomain_v6, execution_time, current_time
    
def CheckCannotGoToRestrictedWeb():
    file_path = f"{a.Log_folder}\\CheckCannotGoToRestrictedWeb.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoToRestrictedWeb")
    start_time = time.time()
    options = webdriver.ChromeOptions()
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--incognito')
    driver = webdriver.Chrome(options=options)
    result_CheckCannotGoToRestrictedWeb = []
    try:
        driver.set_window_size(a.W, a.H)
        websites = [
            {
                "url": "https://yahoo.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.youtube.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.facebook.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.google.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.ge.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.blogger.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://microsoft.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
        ]
        for website in websites:
            try:
                driver.get(website["url"])
                wait = WebDriverWait(driver, a.button_time)
                found_restricted = False

                for text in website["expected_texts"]:
                    try:
                        restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                        if restricted:
                            logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                            print("Pass.")
                            result_CheckCannotGoToRestrictedWeb.append(True)
                            found_restricted = True
                            time.sleep(3)
                            break
                    except Exception:
                        continue
                # 如果沒有找到任何預期的文本，則視為無法訪問
                if not found_restricted:
                    logger.info(f"Pass. URL: {website['url']} is not accessible.")
                    print("Pass (not accessible).")
                    result_CheckCannotGoToRestrictedWeb.append(True)

            except Exception as e:
                logger.error(f"Error accessing {website['url']}: {str(e)}")
                print(f"Error accessing {website['url']}. Pass (not accessible).")
                result_CheckCannotGoToRestrictedWeb.append(True)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckCannotGoToRestrictedWeb = False
    finally:
        print(result_CheckCannotGoToRestrictedWeb)
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCannotGoToRestrictedWeb, execution_time, current_time

def EditProflleTest1Add7WebsiteFilter():
    file_path = f"{a.Log_folder}\\EditProflleTest1Add7WebsiteFilter.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1Add7WebsiteFilter")
    result_EditProflleTest1Add7WebsiteFilter = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        wf_name = [
            "yahoo",
            "YouTube",
            "facebook",
            "google",
            "ge",
            "xn--fiq228c",
            "microsoft",
        ]
        wf_url = [
            "yahoo.com",
            "www.youtube.com",
            "www.facebook.com",
            "www.google.com",
            "www.ge.com",
            "xn--fiq228c",
            "microsoft.com",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d.save_new()
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(5)
        WebsiteFilter = d._driver.find_elements('xpath', "//*[contains(text(), '17')]")
        time.sleep(5)
        if len(WebsiteFilter) > 0 :
            logger.info("Pass.WebsiteFilter Remaining: 17 => Add following website and 7 random Domain from top 500 Domain List(https://moz.com/top500) and save successfully.")
            print("Pass.")
            result_EditProflleTest1Add7WebsiteFilter = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Add 7 Website Filter.")
            print("Fail .")
            result_EditProflleTest1Add7WebsiteFilter = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1Add7WebsiteFilter = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1Add7WebsiteFilter, execution_time, current_time
       
def AddProfileTest1MonToSun():
    file_path = f"{a.Log_folder}\\AddProfileTest1MonToSun.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddProfileTest1MonToSun")
    result_AddProfileTest1MonToSun = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Add Profile
        d.element("id", "pc_createButton", sec=a.buffer_time)
        # Profile Name
        d.element("input", "profileName", txt="test1", sec=a.buffer_time)
        d.scrolldown(600)
        #Add Device
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice0,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        d.scrolldown(300)
        time.sleep(5)
        # add schedule
        d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
        d.plan("Monday", "19:00", "22:00", sec=3)
        d.plan("Tuesday", "19:00", "22:00", sec=3)
        d.plan("Wednesday", "19:00", "22:00", sec=3)
        d.plan("Thursday", "19:00", "22:00", sec=3)
        d.plan("Friday", "19:00", "22:00", sec=3)
        d.plan("Saturday", "19:00", "22:00", sec=3)
        d.plan("Sunday", "19:00", "22:00", sec=3)
        d.element("id", "schedule_apply", sec=a.buffer_time)
        # Bedtime
        d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        d.element("id", "wf_createButton", sec=a.buffer_time)
        d.element("input", "wf_name", txt="http://www.yahoo.com.tw", sec=a.buffer_time)
        d.element("input", "wf_url", txt="www.yahoo.com.tw", sec=a.buffer_time)
        try:
            apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
            for button in apply_buttons:
                if "Apply" in button.text:
                    d._driver.execute_script("arguments[0].click();", button)
                    print("Clicked the 'Apply' button successfully.")
                    break
        except:
            print("Failed to click the 'Apply' button.")
        time.sleep(5)
        d.save_new()
        d.scrolldown(500)
        time.sleep(5)
        ProfileName = d._driver.find_elements('xpath', "//*[contains(text(), 'test1')]")
        DeviceCount = d._driver.find_elements('xpath', "//*[contains(text(), '1')]")
        time.sleep(5)
        if len(ProfileName) > 0 and len(DeviceCount) > 0:
            logger.info("Pass.Test1 Profile:Device Count = 1")
            print("Pass.")
            result_AddProfileTest1MonToSun = True
            time.sleep(5)
        else:
            logger.error("Fail Add Profile Test1 Mon To Sun.")
            print("Fail.")
            result_AddProfileTest1MonToSun = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddProfileTest1MonToSun = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddProfileTest1MonToSun, execution_time, current_time
    
def EditProfiletest1Pause():
    file_path = f"{a.Log_folder}\\EditProfiletest1Pause.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProfiletest1Pause")
    result_EditProfiletest1Pause = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.element("class", "profileInfo_chk_false", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        result_EditProfiletest1Pause = True
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProfiletest1Pause = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProfiletest1Pause, execution_time, current_time
    
def EditProfiletest1Resume():
    file_path = f"{a.Log_folder}\\EditProfiletest1Resume.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProfiletest1Resume")
    result_EditProfiletest1Resume = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.element("class", "profileInfo_chk_true", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        result_EditProfiletest1Resume = True
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProfiletest1Resume = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProfiletest1Resume, execution_time, current_time

def HomePagePause():
    file_path = f"{a.Log_folder}\\HomePagePause.log"
    logger = setup_logger(file_path)
    logger.info("Log message for HomePagePause")
    result_HomePagePause = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #pause
        d.element("class", "profileInfo_chk_false", sec=a.buffer_time)
        time.sleep(5)
        elements = d._driver.find_elements("xpath",'//*[contains(text(),"Internet Access Paused")]')
        if len(elements) > 0:
            logger.info("Pass.Internet Access Paused.")
            print("Pass.")
            result_HomePagePause = True
            time.sleep(5)
        else:
            logger.error("Fail.Internet Access not Pause.")
            print("Fail.")
            result_HomePagePause = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_HomePagePause = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_HomePagePause, execution_time, current_time
    
def HomePageResume():
    file_path = f"{a.Log_folder}\\HomePageResume.log"
    logger = setup_logger(file_path)
    logger.info("Log message for HomePageResume")
    result_HomePageResume = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #pause
        d.element("class", "profileInfo_chk_true", sec=a.buffer_time)
        time.sleep(5)
        elements = d._driver.find_elements("xpath",'//*[contains(text(),"Internet Connected")]')
        if len(elements) > 0:
            logger.info("Pass.Internet Connected.")
            print("Pass.")
            result_HomePageResume = True
            time.sleep(5)
        else:
            logger.error("Fail.Home Page not Resume.")
            print("Fail.")
            result_HomePageResume = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_HomePageResume = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_HomePageResume, execution_time, current_time

def EditProflleTest1AddAToFWebsiteFilter():
    result_EditProflleTest1AddAToFWebsiteFilter = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        wf_name = [
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
        ]
        wf_url = [
            "xn--",
            "xn--fiq228c",
            "xn--kpry57d",
            "kpry57d",
            "fiq228c",
            "xn--fiq228c.xn--kpry57d",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d.save_new()
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(10)
        WebsiteFilter = d._driver.find_elements('xpath', "//*[contains(text(), '18')]")
        time.sleep(5)
        if len(WebsiteFilter) > 0 :
            print("Pass.WebsiteFilter Remaining: 18 => Add following website and a to f Domain and save successfully.")
            result_EditProflleTest1AddAToFWebsiteFilter = True
            time.sleep(10)
        else:
            print("Fail .")
            result_EditProflleTest1AddAToFWebsiteFilter = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_EditProflleTest1AddAToFWebsiteFilter = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_EditProflleTest1AddAToFWebsiteFilter, execution_time, current_time
    
def CheckCannotGoAToFRestrictedWeb():
    start_time = time.time()
    driver = webdriver.Chrome()
    driver.set_window_size(a.W, a.H)
    websites = [
        #a
        {
            "url": "http://中文.tw",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        #b
        {
            "url": "http://中文.tw",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        #c
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        #d
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        #e
        {
            "url": "http://中文.tw",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        #f
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
    ]
    result_CheckCannotGoAToFRestrictedWeb = []
    try:
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["expected_texts"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        print(f"Pass. URL: {website['url']}, Text: {text}")
                        found = True
                        result_CheckCannotGoAToFRestrictedWeb.append(True)
                        break
                    time.sleep(3)
                except Exception:
                    pass
            if not found:
                print("Fail.Not found Text.")
                result_CheckCannotGoAToFRestrictedWeb.append(False)
    finally:
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckCannotGoAToFRestrictedWeb, execution_time, current_time

def EditProflleTest1AddWebsiteFilterA():
    file_path = f"{a.Log_folder}\\EditProflleTest1AddWebsiteFilterA.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1AddWebsiteFilterA")
    result_EditProflleTest1AddWebsiteFilterA = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        wf_name = [
            "a",
            #"b",
            #"c",
            #"d",
            #"e",
            #"f",
        ]
        wf_url = [
            "xn--",
            #"xn--fiq228c",
            #"xn--kpry57d",
            #"kpry57d",
            #"fiq228c",
            #"xn--fiq228c.xn--kpry57d",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d.save_new()
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(10)
        WebsiteFilter = d._driver.find_elements('xpath', "//*[contains(text(), '23')]")
        time.sleep(5)
        if len(WebsiteFilter) > 0 :
            logger.info("Pass.WebsiteFilter Remaining: 23 => Add following website and a Domain and save successfully.")
            print("Pass.")
            result_EditProflleTest1AddWebsiteFilterA = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Add Website Filter A.")
            print("Fail.")
            result_EditProflleTest1AddWebsiteFilterA = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1AddWebsiteFilterA = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1AddWebsiteFilterA, execution_time, current_time
    
def CheckCannotGoRestrictedWebA():
    file_path = f"{a.Log_folder}\\CheckCannotGoRestrictedWebA.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoRestrictedWebA")
    start_time = time.time()
    driver = webdriver.Chrome()
    driver.set_window_size(a.W, a.H)
    websites = [
        #a
        {
            "url": "http://中文.tw",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
    ]
    result_CheckCannotGoRestrictedWebA = []
    try:
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["expected_texts"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        found = True
                        result_CheckCannotGoRestrictedWebA.append(True)
                        break
                except Exception :
                    pass
            if not found:
                logger.error("Fail.Not found Text.")
                print("Fail.")
                result_CheckCannotGoRestrictedWebA.append(False)
    finally:
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCannotGoRestrictedWebA, execution_time, current_time

def EditProflleTest1AddWebsiteFilterB():
    file_path = f"{a.Log_folder}\\EditProflleTest1AddWebsiteFilterB.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1AddWebsiteFilterB")
    result_EditProflleTest1AddWebsiteFilterB = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        wf_name = [
            "b",
            #"c",
            #"d",
            #"e",
            #"f",
        ]
        wf_url = [
            "xn--fiq228c",
            #"xn--kpry57d",
            #"kpry57d",
            #"fiq228c",
            #"xn--fiq228c.xn--kpry57d",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d.save_new()
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(10)
        WebsiteFilter = d._driver.find_elements('xpath', "//*[contains(text(), '22')]")
        time.sleep(5)
        if len(WebsiteFilter) > 0 :
            logger.info("Pass.WebsiteFilter Remaining: 22 => Add following website and b Domain and save successfully.")
            print("Pass.")
            result_EditProflleTest1AddWebsiteFilterB = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Add Website Filter B.")
            print("Fail.")
            result_EditProflleTest1AddWebsiteFilterB = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1AddWebsiteFilterB = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1AddWebsiteFilterB, execution_time, current_time

def CheckCannotGoRestrictedWebB():
    file_path = f"{a.Log_folder}\\CheckCannotGoRestrictedWebB.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoRestrictedWebB")
    start_time = time.time()
    driver = webdriver.Chrome()
    driver.set_window_size(a.W, a.H)
    websites = [
        #b
        {
            "url": "http://中文.tw",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
    ]
    result_CheckCannotGoRestrictedWebB = []
    try:
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["expected_texts"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        found = True
                        result_CheckCannotGoRestrictedWebB.append(True)
                        break
                except Exception:
                    pass
            if not found:
                logger.error("Fail.Not found Text.")
                print("Fail.")
                result_CheckCannotGoRestrictedWebB.append(False)
    finally:
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCannotGoRestrictedWebB, execution_time, current_time

def EditProflleTest1AddWebsiteFilterC():
    file_path = f"{a.Log_folder}\\EditProflleTest1AddWebsiteFilterC.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1AddWebsiteFilterC")
    result_EditProflleTest1AddWebsiteFilterC = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        wf_name = [
            "c",
            #"d",
            #"e",
            #"f",
        ]
        wf_url = [
            "xn--kpry57d",
            #"kpry57d",
            #"fiq228c",
            #"xn--fiq228c.xn--kpry57d",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d.save_new()
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(5)
        WebsiteFilter = d._driver.find_elements('xpath', "//*[contains(text(), '21')]")
        time.sleep(5)
        if len(WebsiteFilter) > 0 :
            logger.info("Pass.WebsiteFilter Remaining: 21 => Add following website and c Domain and save successfully.")
            print("Pass.")
            result_EditProflleTest1AddWebsiteFilterC = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Add Website Filter C.")
            print("Fail.")
            result_EditProflleTest1AddWebsiteFilterC = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1AddWebsiteFilterC = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1AddWebsiteFilterC, execution_time, current_time
    
def CheckCannotGoRestrictedWebC():
    file_path = f"{a.Log_folder}\\CheckCannotGoRestrictedWebC.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoRestrictedWebC")
    start_time = time.time()
    driver = webdriver.Chrome()
    driver.set_window_size(a.W, a.H)
    websites = [
        #c
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
    ]
    result_CheckCannotGoRestrictedWebC = []
    try:
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["expected_texts"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        found = True
                        result_CheckCannotGoRestrictedWebC.append(True)
                        break
                except Exception:
                    pass
            if not found:
                logger.error("Fail.Not found Text.")
                print("Fail.")
                result_CheckCannotGoRestrictedWebC.append(False)
    finally:
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCannotGoRestrictedWebC, execution_time, current_time

def EditProflleTest1AddWebsiteFilterD():
    file_path = f"{a.Log_folder}\\EditProflleTest1AddWebsiteFilterD.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1AddWebsiteFilterD")
    result_EditProflleTest1AddWebsiteFilterD = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        wf_name = [
            "d",
            #"e",
            #"f",
        ]
        wf_url = [
            "kpry57d",
            #"fiq228c",
            #"xn--fiq228c.xn--kpry57d",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d.save_new()
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(5)
        WebsiteFilter = d._driver.find_elements('xpath', "//*[contains(text(), '20')]")
        time.sleep(5)
        if len(WebsiteFilter) > 0 :
            logger.info("Pass.WebsiteFilter Remaining: 20 => Add following website and d Domain and save successfully.")
            print("Pass.")
            result_EditProflleTest1AddWebsiteFilterD = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Add Website Filter D.")
            print("Fail.")
            result_EditProflleTest1AddWebsiteFilterD = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1AddWebsiteFilterD = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1AddWebsiteFilterD, execution_time, current_time
    
def CheckCannotGoRestrictedWebD():
    file_path = f"{a.Log_folder}\\CheckCannotGoRestrictedWebD.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoRestrictedWebD")
    start_time = time.time()
    driver = webdriver.Chrome()
    driver.set_window_size(a.W, a.H)
    websites = [
        #d
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
    ]
    result_CheckCannotGoRestrictedWebD = []
    try:
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["expected_texts"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        found = True
                        result_CheckCannotGoRestrictedWebD.append(True)
                        break
                except Exception:
                    pass
            if not found:
                logger.error("Fail.Not found Text.")
                print("Fail.")
                result_CheckCannotGoRestrictedWebD.append(False)
    finally:
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCannotGoRestrictedWebD, execution_time, current_time
    
def EditProflleTest1AddWebsiteFilterE():
    file_path = f"{a.Log_folder}\\EditProflleTest1AddWebsiteFilterE.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1AddWebsiteFilterE")
    result_EditProflleTest1AddWebsiteFilterE = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        wf_name = [
            "e",
            #"f",
        ]
        wf_url = [
            "fiq228c",
            #"xn--fiq228c.xn--kpry57d",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d.save_new()
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(10)
        WebsiteFilter = d._driver.find_elements('xpath', "//*[contains(text(), '19')]")
        time.sleep(5)
        if len(WebsiteFilter) > 0 :
            logger.info("Pass.WebsiteFilter Remaining: 19 => Add following website and e Domain and save successfully.")
            print("Pass.")
            result_EditProflleTest1AddWebsiteFilterE = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Add Website Filter E.")
            print("Fail.")
            result_EditProflleTest1AddWebsiteFilterE = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1AddWebsiteFilterE = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1AddWebsiteFilterE, execution_time, current_time
    
def CheckCannotGoRestrictedWebE():
    file_path = f"{a.Log_folder}\\CheckCannotGoRestrictedWebE.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoRestrictedWebE")
    start_time = time.time()
    driver = webdriver.Chrome()
    driver.set_window_size(a.W, a.H)
    websites = [
        #e
        {
            "url": "http://中文.tw",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
    ]
    result_CheckCannotGoRestrictedWebE = []
    try:
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["expected_texts"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        found = True
                        result_CheckCannotGoRestrictedWebE.append(True)
                        break
                except Exception:
                    pass
            if not found:
                logger.error("Fail.Not found Text.")
                print("Fail.")
                result_CheckCannotGoRestrictedWebE.append(False)
    finally:
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCannotGoRestrictedWebE, execution_time, current_time
    
def EditProflleTest1AddWebsiteFilterF():
    file_path = f"{a.Log_folder}\\EditProflleTest1AddWebsiteFilterF.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1AddWebsiteFilterF")
    result_EditProflleTest1AddWebsiteFilterF = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        # Add website Filter
        wf_name = [
            "f",
        ]
        wf_url = [
            "xn--fiq228c.xn--kpry57d",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
        d.save_new()
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(5)
        WebsiteFilter = d._driver.find_elements('xpath', "//*[contains(text(), '18')]")
        time.sleep(5)
        if len(WebsiteFilter) > 0 :
            logger.info("Pass.WebsiteFilter Remaining: 18 => Add following website and f Domain and save successfully.")
            print("Pass.")
            result_EditProflleTest1AddWebsiteFilterF = True
            time.sleep(5)
        else:
            logger.error("Fail to Edit Proflle Test1 Add Website Filter F.")
            print("Fail.")
            result_EditProflleTest1AddWebsiteFilterF = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1AddWebsiteFilterF = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1AddWebsiteFilterF, execution_time, current_time
    
def CheckCannotGoRestrictedWebF():
    file_path = f"{a.Log_folder}\\CheckCannotGoRestrictedWebF.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoRestrictedWebF")
    start_time = time.time()
    driver = webdriver.Chrome()
    driver.set_window_size(a.W, a.H)
    websites = [
        #f
        {
            "url": "http://中文.台灣",
            "expected_texts": ["Access to this website is restricted.", "無法連上這個網站","你的連線不是私人連線"]
        },
    ]
    result_CheckCannotGoRestrictedWebF = []
    try:
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["expected_texts"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        found = True
                        result_CheckCannotGoRestrictedWebF.append(True)
                        break
                except Exception:
                    pass
            if not found:
                logger.error("Fail.Not found Text.")
                print("Fail.")
                result_CheckCannotGoRestrictedWebF.append(False)
    finally:
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCannotGoRestrictedWebF, execution_time, current_time

def CannotPingv4v6RestrictedDomainAToF():
    file_path = f"{a.Log_folder}\\CannotPingv4v6RestrictedDomainAToF.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CannotPingv4v6RestrictedDomainAToF")
    def execute_ping(address, version):
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.info("Pass. Cannot Ping v4 v6 Restricted Domain.")
                print("Pass.")
                return True
            else:
                logger.error("Fail. Still Can ping v4 v6.")
                print("Fail.")
                return False
        else:
            logger.error("Fail.Still Can ping v4 v6")
            print("Fail.")
            return False
    # Release and renew the IP addresses
    print("ipconfig/flushdns")
    subprocess.run(["ipconfig", "/flushdns"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/release")
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/renew")
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    print("Wait 60 sec...")
    time.sleep(60)
    start_time = time.time()
    CannotPingv4v6RestrictedDomainAToF_v4 = []
    CannotPingv4v6RestrictedDomainAToF_v6 = []
    addresses = [
        "中文.tw",
        "中文.台灣",
    ]
    versions = ["-4", "-6"]
    try:
        for address in addresses:
            for version in versions:
                if version == "-4" or version == "-6":
                    is_passed = execute_ping(address, version)
                    if version == "-4":
                        CannotPingv4v6RestrictedDomainAToF_v4.append(is_passed)
                    elif version == "-6":
                        CannotPingv4v6RestrictedDomainAToF_v6.append(is_passed)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        CannotPingv4v6RestrictedDomainAToF_v4 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return CannotPingv4v6RestrictedDomainAToF_v4, CannotPingv4v6RestrictedDomainAToF_v6, execution_time, current_time
    
def ModifyAdminPwd_admin12345():
    result_ModifyAdminPwd_admin12345 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #Password
        d.element("input", "password_Admin",txt="admin12345", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        time.sleep(5)
        d.open(url,"admin12345" )
        time.sleep(10)
        login = d._driver.find_elements('xpath', "//*[text() = 'Click on any item in the diagram for more information.']")
        if len(login) > 0:
            print("Pass.The New password can Login DUT.")
            result_ModifyAdminPwd_admin12345 = True
            time.sleep(10)
        else:
            print("Fail.")
            result_ModifyAdminPwd_admin12345 = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ModifyAdminPwd_admin12345 = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ModifyAdminPwd_admin12345, execution_time, current_time
    
def ModifyAdminPwdAgain_admin123():
    result_ModifyAdminPwdAgain_admin123 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url,"admin12345" )
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #Password
        d.element("input", "password_Admin",txt=a.DUT_admin_pwd, sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        time.sleep(5)
        d.open(url, a.DUT_admin_pwd)
        time.sleep(10)
        login = d._driver.find_elements('xpath', "//*[text() = 'Click on any item in the diagram for more information.']")
        if len(login) > 0:
            print("Pass.The New password can Login DUT.")
            result_ModifyAdminPwdAgain_admin123 = True
            time.sleep(10)
        else:
            print("Fail.")
            result_ModifyAdminPwdAgain_admin123 = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ModifyAdminPwdAgain_admin123 = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ModifyAdminPwdAgain_admin123, execution_time, current_time

def SavedConfig():
    file_path = f"{a.Log_folder}\\SavedConfig.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for SavedConfig")
    result_SavedConfig = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='firefox')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d.element("id", "menu_Management", sec=a.buffer_time)
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        d.element("java", "System", sec=a.buffer_time)
        wait = WebDriverWait(d._driver, a.button_time)
        btn_saveSettingsToLocal = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="btn_saveSettingsToLocal"]')))
        btn_saveSettingsToLocal.click()
        time.sleep(5)
        save_path = a.download_path
        if not os.path.exists(save_path):
            os.makedirs(save_path)
        time.sleep(5)
        result_SavedConfig = True
        logger.info("Finish.")
        print("Finish")
    except Exception as e:
        logger.error(e)
        print(e)
        print("\n+++++ False +++++\n")
        result_SavedConfig = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_SavedConfig, execution_time, current_time

def ReNewConfigFileNameAndMove():
    start_time = time.time()
    result_ReNewConfigFileNameAndMove = False
    source_file = os.path.join(a.download_path, 'config.bin')
    target_folder = os.path.join(a.all_file_path)
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    new_file_name = f'config_{current_time}.bin'
    target_file = os.path.join(target_folder, new_file_name)
    shutil.move(source_file, target_file)
    time.sleep(5)
    try:
        print(target_file)
        result_ReNewConfigFileNameAndMove = True
        time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ReNewConfigFileNameAndMove = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ReNewConfigFileNameAndMove, execution_time, current_time

def MoveConfigFile():
    start_time = time.time()
    result_MoveConfigFile = False
    source_file = os.path.join(a.download_path, 'config.bin')
    target_folder = os.path.join(a.all_file_path)
    target_file = os.path.join(target_folder)
    shutil.move(source_file, target_file)
    time.sleep(5)
    try:
        print(target_file)
        result_MoveConfigFile = True
        time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_MoveConfigFile = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_MoveConfigFile, execution_time, current_time

def LoadConfig():
    result_LoadConfig = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #system
        d.element("java", "System", sec=a.buffer_time)
        #Load Settings From Local Hard Drive
        # 上傳檔案
        btn_loadSettingsFromLocal = d._driver.find_element("id","btn_loadSettingsFromLocal")
        btn_loadSettingsFromLocal.click()
        time.sleep(5)
        file_path = os.path.join(a.all_file_path, "config.bin")
        print(file_path)
        pyautogui.write(file_path)
        time.sleep(5)
        pyautogui.hotkey('alt', 'o')
        time.sleep(5)
        #Restore
        d.element("id", "btn_loadSettingsFromLocal_restore", sec=a.buffer_time)
        time.sleep(5)
        #//*[@id="popMessage_button_upload"]
        popMessage_button_upload = d._driver.find_element("id","popMessage_button_upload")
        popMessage_button_upload.click()
        time.sleep(150)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Restore configuration file success!')]"):
            print("Pass.Restore configuration file success.")
            result_LoadConfig = True
            time.sleep(10)
        else:
            print("Fail.")
            result_LoadConfig = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_LoadConfig = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_LoadConfig, execution_time, current_time

def ReNewConfigFileName():
    start_time = time.time()
    result_ReNewConfigFileName = False
    source_file = os.path.join(a.all_file_path, 'config.bin')
    target_folder = os.path.join(a.all_file_path)
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    new_file_name = f'config_{current_time}.bin'
    target_file = os.path.join(target_folder, new_file_name)
    shutil.move(source_file, target_file)
    time.sleep(5)
    try:
        print(new_file_name)
        result_ReNewConfigFileName = True
        time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ReNewConfigFileName = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ReNewConfigFileName, execution_time, current_time

def CheckDefaultWiFiSSID():
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_CheckDefaultWiFiSSID = False
    try:
        d.open(url, a.DUT_default_pwd)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        #check
        timeout = a.button_time
        body_element = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.XPATH, "//body"))
        )
        page_text = body_element.text
        if a.DUT_modelName in page_text:
            print("Check CHT Default WiFi SSID is correct.")
            result_CheckDefaultWiFiSSID = True
            print("Pass")
        else:
            result_CheckDefaultWiFiSSID = False
            print("Fail")
    except TimeoutException:
        result_CheckDefaultWiFiSSID = False
        print("Fail.TimeoutException...")
    except Exception:
        result_CheckDefaultWiFiSSID = False
        print("Fail.Exception...")
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckDefaultWiFiSSID, execution_time, current_time

def AutoRebootNever():
    result_AutoRebootNever = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #system
        d.element("java", "System", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        Never = d._driver.find_elements('xpath', "//*[text() = 'Never']")
        if len(Never) > 0:
            print("Pass.Auto Reboot:Never.")
            result_AutoRebootNever = True
            time.sleep(10)
        else:
            print("Fail.")
            result_AutoRebootNever = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_AutoRebootNever = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AutoRebootNever, execution_time, current_time
    
def AutoRebootDaily():
    result_AutoRebootDaily = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #system
        d.element("java", "System", sec=a.buffer_time)
        d.scrolldown(500)
        #Daily Reboot
        d.element("downmenu", "Daily", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        time.sleep(10)
        Daily = d._driver.find_elements('xpath', "//*[text() = 'Daily']")
        if len(Daily) > 0:
            print("Pass.Auto Reboot:Daily.")
            result_AutoRebootDaily = True
            time.sleep(10)
        else:
            print("Fail.")
            result_AutoRebootDaily = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_AutoRebootDaily = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AutoRebootDaily, execution_time, current_time
    
def AutoRebootWeekly():
    result_AutoRebootWeekly = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #system
        d.element("java", "System", sec=a.buffer_time)
        d.scrolldown(500)
        #Weekly Reboot
        d.element("downmenu", "Weekly", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        time.sleep(10)
        Weekly = d._driver.find_elements('xpath', "//*[text() = 'Weekly']")
        if len(Weekly) > 0:
            print("Pass.Auto Reboot:Weekly.")
            result_AutoRebootWeekly = True
            time.sleep(10)
        else:
            print("Fail.")
            result_AutoRebootWeekly = False
            time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_AutoRebootWeekly = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AutoRebootWeekly, execution_time, current_time

def LoadConfig_xlsx():
    result_LoadConfig_xlsx = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #system
        d.element("java", "System", sec=a.buffer_time)
        #Load Settings From Local Hard Drive
        button = d._driver.find_element(By.XPATH,'//label[contains(text(), "Select File")]')
        button.click()
        time.sleep(5)
        source_file = os.path.join(a.all_file_path, 'a.xlsx')
        pyautogui.write(source_file)
        time.sleep(5)
        pyautogui.hotkey('alt', 'o')
        time.sleep(5)
        #Restore
        d.element("id", "btn_loadSettingsFromLocal_restore", sec=a.buffer_time)
        time.sleep(5)
        d.element("id", "popMessage_button_upload", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[text() = 'Restore configuration file failed!']"):
            print("Pass.Restore configuration file failed!")
            result_LoadConfig_xlsx = True
            time.sleep(5)
        else:
            print("Fail.")
            result_LoadConfig_xlsx = False
            time.sleep(a.reboot_time)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_LoadConfig_xlsx = False
        time.sleep(a.reboot_time)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_LoadConfig_xlsx, execution_time, current_time

def LoadConfig_b():
    result_LoadConfig_b = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #system
        d.element("java", "System", sec=a.buffer_time)
        #Load Settings From Local Hard Drive
        button = d._driver.find_element(By.XPATH,'//label[contains(text(), "Select File")]')
        button.click()
        time.sleep(5)
        source_file = os.path.join(a.all_file_path, 'b.b')
        pyautogui.write(source_file)
        time.sleep(5)
        pyautogui.hotkey('alt', 'o')
        time.sleep(5)
        #Restore
        d.element("id", "btn_loadSettingsFromLocal_restore", sec=a.buffer_time)
        time.sleep(5)
        d.element("id", "popMessage_button_upload", sec=a.buffer_time)
        time.sleep(10)
        if d._driver.find_elements('xpath', "//*[text() = 'Restore configuration file failed!']"):
            print("Pass.Restore configuration file failed!")
            result_LoadConfig_b = True
            time.sleep(5)
        else:
            print("Fail.")
            result_LoadConfig_b = False
            time.sleep(a.reboot_time)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_LoadConfig_b = False
        time.sleep(a.reboot_time)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_LoadConfig_b, execution_time, current_time

def LoadConfig_pdf():
    result_LoadConfig_pdf = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #system
        d.element("java", "System", sec=a.buffer_time)
        #Load Settings From Local Hard Drive
        button = d._driver.find_element(By.XPATH,'//label[contains(text(), "Select File")]')
        button.click()
        time.sleep(5)
        source_file = os.path.join(a.all_file_path, 'C.pdf')
        pyautogui.write(source_file)
        time.sleep(5)
        pyautogui.hotkey('alt', 'o')
        time.sleep(5)
        #Restore
        d.element("id", "btn_loadSettingsFromLocal_restore", sec=a.buffer_time)
        time.sleep(5)
        d.element("id", "popMessage_button_upload", sec=a.buffer_time)
        time.sleep(10)
        if d._driver.find_elements('xpath', "//*[text() = 'Restore configuration file failed!']"):
            print("Pass.Restore configuration file failed!")
            result_LoadConfig_pdf = True
            time.sleep(5)
        else:
            print("Fail.")
            result_LoadConfig_pdf = False
            time.sleep(a.reboot_time)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_LoadConfig_pdf = False
        time.sleep(a.reboot_time)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_LoadConfig_pdf, execution_time, current_time

#原密碼登入後改密碼再用新密碼登入
def ModifyAndTestPassword(password, new_password):
    result_ModifyAndTestPassword = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, password )
        time.sleep(5)
        d.element("id", "menu_Management", sec=a.buffer_time)
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        d.element("input", "password_Admin", txt=new_password, sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        d.open(url, new_password )
        homePage = d._driver.find_elements('xpath', "//*[contains(text(), 'Click on any item in the diagram for more information.')]")
        time.sleep(5)
        if len(homePage) > 0:
            print("Pass. The New password can Login DUT.")
            result_ModifyAndTestPassword = True
            time.sleep(10)
        else:
            print("Fail.")
            result_ModifyAndTestPassword = False
            time.sleep(10)
    except Exception:
        print("Fail. Exception...")
        result_ModifyAndTestPassword = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ModifyAndTestPassword, execution_time, current_time
    
def RemoteWanIP8081():
    file_path = f"{a.Log_folder}\\RemoteWanIP8081.log"
    logger = setup_logger(file_path)
    logger.info("Log message for RemoteWanIP8081")
    result_RemoteWanIP8081 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #Advanced Settings
        d.element("id", "advBtn_administration", sec=a.buffer_time)
        d.scrolldown(500)
        #Enable HTTPs Management
        d.element("checkbox", "status_enableHTTPSServer",status="enable", sec=a.buffer_time)
        #Enable HTTPs Remote Management
        d.element("checkbox", "status_enableRemoteManage",status="enable", sec=a.buffer_time)
        #Use HTTPS
        d.element("checkbox", "status_enableuseHTTPS",status="enable", sec=a.buffer_time)
        d.element("input", "remoteAdminPort",txt="8081", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        logger.info("Finish.Enable Remote Wan IP 8081")
        print("Finish")
        result_RemoteWanIP8081 = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_RemoteWanIP8081 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_RemoteWanIP8081, execution_time, current_time

def Loginhttps8081():
    file_path = f"{a.Log_folder}\\Loginhttps8081.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Loginhttps8081")
    result_Loginhttps8081 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #//*[@id="index_ShowIPAddress"]
        wait = WebDriverWait(d._driver, a.button_time)
        wan_ip_element = wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="index_ShowIPAddress"]')))
        wan_ip = wan_ip_element.text
        print("WAN IP:", wan_ip)
        ip = [wan_ip]
        print(wan_ip)
        time.sleep(5)
        target_url = "https://" + ip[0] + ":8081/"
        time.sleep(5)
        d._driver.get(target_url)
        time.sleep(5)
        if d._driver.find_element(By.ID, "Language"):
            # Change Language to English
            language_select = Select(d._driver.find_element(By.ID, "Language"))
            desired_language = "en-us"
            language_select.select_by_value(desired_language)
            # input password
            time.sleep(5)
            password = d._driver.find_element("name","admin_Password")
            actions = ActionChains(d._driver)
            actions.move_to_element(password).click().perform()
            time.sleep(2)
            password.send_keys(a.DUT_admin_pwd + Keys.ENTER)
            print("Enter Password")
            time.sleep(3)
            d._driver.refresh()
            time.sleep(3)
            homePage = d._driver.find_elements('xpath', "//*[contains(text(), 'Click on any item in the diagram for more information.')]")
            time.sleep(5)
            if len(homePage) > 0:
                result_Loginhttps8081 = True
                logger.info("Pass.Login https 8081 successed..")
                print("Pass.")
                time.sleep(5)
            else:
                logger.error("Fail to Login https 8081.")
                print("Fail.")
                result_Loginhttps8081 = False
                time.sleep(5)
        else:
            ##details-button
            wait = WebDriverWait(d._driver, a.button_time)
            button = wait.until(EC.element_to_be_clickable((By.XPATH, f'//button[contains(text(), "進階")]')))
            button.click()
            time.sleep(10)
            #//*[@id="proceed-link"]
            d.element("id","proceed-link",sec=a.buffer_time)
            time.sleep(10)
            d._driver.refresh()
            # Change Language to English
            language_select = Select(d._driver.find_element(By.ID, "Language"))
            desired_language = "en-us"
            language_select.select_by_value(desired_language)
            # input password
            time.sleep(5)
            password = d._driver.find_element("name","admin_Password")
            actions = ActionChains(d._driver)
            actions.move_to_element(password).click().perform()
            time.sleep(2)
            password.send_keys(a.DUT_admin_pwd + Keys.ENTER)
            print("Enter Password")
            time.sleep(3)
            d._driver.refresh()
            time.sleep(3)
            homePage = d._driver.find_elements('xpath', "//*[contains(text(), 'Click on any item in the diagram for more information.')]")
            time.sleep(5)
            if len(homePage) > 0:
                result_Loginhttps8081 = True
                logger.info("Pass.Login https 8081 successed..")
                print("Pass.")
                time.sleep(5)
            else:
                logger.error("Fail to Login https 8081.")
                print("Fail.")
                result_Loginhttps8081 = False
                time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Loginhttps8081 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Loginhttps8081, execution_time, current_time

def RemoteWanIP8080():
    file_path = f"{a.Log_folder}\\RemoteWanIP8080.log"
    logger = setup_logger(file_path)
    logger.info("Log message for RemoteWanIP8080")
    result_RemoteWanIP8080 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #Advanced Settings
        d.element("id", "advBtn_administration", sec=a.buffer_time)
        d.scrolldown(500)
        #Enable HTTPs Management
        d.element("checkbox", "status_enableHTTPSServer",status="enable", sec=a.buffer_time)
        #Enable HTTPs Remote Management
        d.element("checkbox", "status_enableRemoteManage",status="enable", sec=a.buffer_time)
        #Use HTTPS
        d.element("checkbox", "status_enableuseHTTPS",status="enable", sec=a.buffer_time)
        d.element("input", "remoteAdminPort",txt="8080", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        logger.info("Pass.Enable Remote Wan IP 8080.")
        print("Finish.")
        result_RemoteWanIP8080 = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_RemoteWanIP8080 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_RemoteWanIP8080, execution_time, current_time

def Loginhttps8080():
    file_path = f"{a.Log_folder}\\Loginhttps8080.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Loginhttps8080")
    result_Loginhttps8080 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #//*[@id="index_ShowIPAddress"]
        wait = WebDriverWait(d._driver, a.button_time)
        wan_ip_element = wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="index_ShowIPAddress"]')))
        wan_ip = wan_ip_element.text
        print("WAN IP:", wan_ip)
        ip = [wan_ip]
        print(wan_ip)
        time.sleep(5)
        target_url = "https://" + ip[0] + ":8080/"
        time.sleep(5)
        d._driver.get(target_url)
        time.sleep(5)
        if d._driver.find_element(By.ID, "Language"):
            # Change Language to English
            language_select = Select(d._driver.find_element(By.ID, "Language"))
            desired_language = "en-us"
            language_select.select_by_value(desired_language)
            logger.info("Language changed to English.")
        else:
            # Execute the ##details-button section
            wait = WebDriverWait(d._driver, a.button_time)
            button = wait.until(EC.element_to_be_clickable((By.XPATH, f'//button[contains(text(), "進階")]')))
            button.click()
            time.sleep(10)
            #//*[@id="proceed-link"]
            d.element("id","proceed-link",sec=a.buffer_time)
            time.sleep(10)
            d._driver.refresh()
            # Then, try to change the language
            language_select = Select(d._driver.find_element(By.ID, "Language"))
            desired_language = "en-us"
            language_select.select_by_value(desired_language)
            logger.info("Language changed to English.")
        # input password
        time.sleep(5)
        password = d._driver.find_element("name","admin_Password")
        actions = ActionChains(d._driver)
        actions.move_to_element(password).click().perform()
        time.sleep(2)
        password.send_keys(a.DUT_admin_pwd + Keys.ENTER)
        print("Enter Password")
        time.sleep(3)
        d._driver.refresh()
        time.sleep(3)
        homePage = d._driver.find_elements('xpath', "//*[contains(text(), 'Click on any item in the diagram for more information.')]")
        time.sleep(5)
        if len(homePage) > 0:
            result_Loginhttps8080 = True
            logger.info("Pass.Login https 8080 successed.")
            print("Pass.")
            time.sleep(5)
        else:
            logger.error("Fail to Login https 8080.")
            print("Fail.")
            result_Loginhttps8080 = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Loginhttps8080 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Loginhttps8080, execution_time, current_time

def Loginhttps8081v6():
    file_path = f"{a.Log_folder}\\Loginhttps8081v6.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Loginhttps8081v6")
    result_Loginhttps8081v6 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(10)
        #//*[@id="v6_btn_WAN"]
        v6_btn_WAN = d._driver.find_element('xpath', '//*[@id="v6_btn_WAN"]')
        v6_btn_WAN.click()
        time.sleep(5)
        #//*[@id="wan_IPv6_Address"]
        wait = WebDriverWait(d._driver, a.button_time)
        wan_ip_element = wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="wan_IPv6_Address"]')))
        wan_ip = wan_ip_element.text
        print("WAN IP:", wan_ip)
        ip = [wan_ip.split('/')[0]]
        print(ip[0])
        time.sleep(5)
        #https://[2001:B011:D804:86A9:A98F:9FDE:4DC5:115F]:8081/
        target_url = "https://[" + ip[0] + "]:8081/"
        time.sleep(5)
        d._driver.get(target_url)
        time.sleep(5)
        if d._driver.find_element(By.ID, "Language"):
            language_select = Select(d._driver.find_element(By.ID, "Language"))
            desired_language = "en-us"
            language_select.select_by_value(desired_language)
        else:
            wait = WebDriverWait(d._driver, a.button_time)
            button = wait.until(EC.element_to_be_clickable((By.XPATH, f'//button[contains(text(), "進階")]')))
            button.click()
            time.sleep(10)
            d.element("id","proceed-link",sec=a.buffer_time)
            time.sleep(10)
            d._driver.refresh()
            language_select = Select(d._driver.find_element(By.ID, "Language"))
            desired_language = "en-us"
            language_select.select_by_value(desired_language)
        time.sleep(5)
        password = d._driver.find_element("name","admin_Password")
        actions = ActionChains(d._driver)
        actions.move_to_element(password).click().perform()
        time.sleep(2)
        password.send_keys(a.DUT_admin_pwd + Keys.ENTER)
        print("Enter Password")
        time.sleep(3)
        d._driver.refresh()
        time.sleep(3)
        homePage = d._driver.find_elements('xpath', "//*[contains(text(), 'Click on any item in the diagram for more information.')]")
        time.sleep(5)
        if len(homePage) > 0:
            result_Loginhttps8081v6 = True
            logger.info("Pass.Login https 8081 v6 successed.")
            print("Pass.")
            time.sleep(5)
        else:
            logger.error("Fail to Login https 8081 v6.")
            print("Fail.")
            result_Loginhttps8081v6 = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Loginhttps8081v6 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Loginhttps8081v6, execution_time, current_time

def loginFail5Times():
    file_path = f"{a.Log_folder}\\loginFail5Times.log"
    logger = setup_logger(file_path)
    logger.info("Log message for loginFail5Times")
    result_loginFail5Times = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        passwords = ["admin1", "admin2", "admin3", "admin4", "admin5"]
        for password in passwords:
            d._driver.get(url)
            print("Open Home page")
            time.sleep(2)
            # Change Language to English
            language_select = Select(d._driver.find_element(By.ID, "Language"))
            desired_language = "en-us"
            language_select.select_by_value(desired_language)
            # input password
            time.sleep(2)
            password_input = d._driver.find_element("name", "admin_Password")
            actions = ActionChains(d._driver)
            actions.move_to_element(password_input).click().perform()
            time.sleep(2)
            password_and_enter = password + Keys.ENTER
            password_input.send_keys(password_and_enter)
            time.sleep(2)
            try:
                alert = WebDriverWait(d._driver, a.button_time).until(EC.alert_is_present())
                alert.accept()
            except (NoAlertPresentException, UnexpectedAlertPresentException):
                pass
            print("Enter Password again.")
            time.sleep(5)
        time.sleep(10)
        loginFail = d._driver.find_elements('xpath', "//*[contains(text(), 'Too many failed login attempts. Wait a while and try again.')]")
        if len(loginFail) > 0:
            logger.info("Pass. Login Fail 5 Times.")
            print("Pass.")
            result_loginFail5Times = True
            time.sleep(60)
        else:
            logger.error("Fail to login Fail 5 Times.")
            print("Fail.")
            result_loginFail5Times = False
            time.sleep(60)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail. Exception...")
        result_loginFail5Times = False
        time.sleep(60)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_loginFail5Times, execution_time, current_time

def Login_admin123():
    file_path = f"{a.Log_folder}\\Login_admin123.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Login_admin123")
    result_Login_admin123 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        homePage = d._driver.find_elements('xpath', "//*[contains(text(), 'Click on any item in the diagram for more information.')]")
        time.sleep(5)
        if len(homePage) > 0:
            logger.info("Pass. Login Success.")
            print("Pass.")
            result_Login_admin123 = True
            time.sleep(5)
        else:
            logger.error("Fail to Login with admin123.")
            print("Fail.")
            result_Login_admin123 = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Login_admin123 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Login_admin123, execution_time, current_time

def DisableUseHTTPS():
    file_path = f"{a.Log_folder}\\DisableUseHTTPS.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisableUseHTTPS")
    result_DisableUseHTTPS = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #Advanced Settings
        d.element("id", "advBtn_administration", sec=a.buffer_time)
        d.scrolldown(500)
        #Enable HTTPs Management
        d.element("checkbox", "status_enableHTTPSServer",status="enable", sec=a.buffer_time)
        #Enable HTTPs Remote Management
        d.element("checkbox", "status_enableRemoteManage",status="enable", sec=a.buffer_time)
        #Use HTTPS
        d.element("checkbox", "status_enableuseHTTPS",status="disable", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        logger.info("Finish.Disable Use HTTPS")
        print("Finish.")
        result_DisableUseHTTPS = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DisableUseHTTPS = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisableUseHTTPS, execution_time, current_time

def Loginhttp8081():
    file_path = f"{a.Log_folder}\\Loginhttp8081.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Loginhttp8081")
    result_Loginhttp8081 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #//*[@id="index_ShowIPAddress"]
        wait = WebDriverWait(d._driver, a.button_time)
        wan_ip_element = wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="index_ShowIPAddress"]')))
        wan_ip = wan_ip_element.text
        print("WAN IP:", wan_ip)
        ip = [wan_ip]
        print(wan_ip)
        time.sleep(5)
        target_url = "http://" + ip[0] + ":8081/"
        time.sleep(5)
        d._driver.get(target_url)
        time.sleep(5)
        # Change Language to English
        language_select = Select(d._driver.find_element(By.ID, "Language"))
        desired_language = "en-us"
        language_select.select_by_value(desired_language)
        # input password
        time.sleep(2)
        password = d._driver.find_element("name","admin_Password")
        actions = ActionChains(d._driver)
        actions.move_to_element(password).click().perform()
        time.sleep(2)
        password.send_keys(a.DUT_admin_pwd + Keys.ENTER)
        print("Enter Password")
        time.sleep(3)
        d._driver.refresh()
        time.sleep(3)
        homePage = d._driver.find_elements('xpath', "//*[contains(text(), 'Click on any item in the diagram for more information.')]")
        time.sleep(5)
        if len(homePage) > 0:
            result_Loginhttp8081 = True
            logger.info("Pass.Login http 8081 successed.")
            print("Pass.")
            time.sleep(5)
        else:
            logger.error("Fail to Login http 8081.")
            print("Fail.")
            result_Loginhttp8081 = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Loginhttp8081 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Loginhttp8081, execution_time, current_time
    
def DisableHTTPsManagement():
    result_DisableHTTPsManagement = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Management
        d.element("id", "menu_Management", sec=a.buffer_time)
        #System Admin
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        #Advanced Settings
        d.element("id", "advBtn_administration", sec=a.buffer_time)
        d.scrolldown(500)
        #Enable HTTPs Management
        d.element("checkbox", "status_enableHTTPSServer",status="disable", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        print("Pass.Disable HTTPs Management.")
        result_DisableHTTPsManagement = True
        time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_DisableHTTPsManagement = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_DisableHTTPsManagement, execution_time, current_time
    
def Loginhttps8081Fail():
    result_Loginhttps8081Fail = False
    start_time = time.time()
    try :
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #//*[@id="index_ShowIPAddress"]
        wait = WebDriverWait(d._driver, a.button_time)
        wan_ip_element = wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="index_ShowIPAddress"]')))
        wan_ip = wan_ip_element.text
        print("WAN IP:", wan_ip)
        ip = [wan_ip]
        print(wan_ip)
        time.sleep(5)
        target_url = "https://" + ip[0] + ":8081/"
        time.sleep(5)
        d._driver.get(target_url)
        time.sleep(5)
        # 等待最多 20 秒，直到找到 "無法連上這個網站" 字串
        #proceedLink = wait.until(EC.presence_of_element_located((By.XPATH, "//*[contains(text(), '無法連上這個網站')]")))
        #print("Pass.Can't use HTTPS to open Web GUI.")
        #result_Loginhttps8081Fail = True
    except TimeoutException:
        # 如果在20秒內無法前往目標網站，直接通過
        print("Pass")
        result_Loginhttps8081Fail = True
    except WebDriverException as e:
        # 如果出現 ERR_SSL_PROTOCOL_ERROR 錯誤，視為 "Pass"
        if "net::ERR_SSL_PROTOCOL_ERROR" in str(e):
            print("Pass, Can't use HTTPS to open Web GUI.")
            result_Loginhttps8081Fail = True
        else:
            # 其他 WebDriverException 錯誤視為 "Fail"
            print("Fail")
            result_Loginhttps8081Fail = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_Loginhttps8081Fail, execution_time, current_time
    
def EnableAutoUpgrade():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        start_time = time.time()
        result_EnableAutoUpgrade = False
        #firmwareCancelBtn
        d.element("class", "firmwareCancelBtn", sec=a.buffer_time)
        #upgrade
        d.element("id", "submenu_UpdateFirmware", sec=a.buffer_time)
        d.scrolldown(300)
        #enable auto upgrade
        d.element("checkbox", "status_AutoUpgrade", status="enable", sec=a.buffer_time)
        #disable upgrade time
        d.element("checkbox", "status_PreferUpgradeTime", status="disable", sec=a.buffer_time)
        d.save_new()
        time.sleep(10)
        print("Pass.Enable auto upgrade successfully!")
        result_EnableAutoUpgrade = True
        time.sleep(10)
    except Exception as e:
        print(e)
        result_EnableAutoUpgrade = False
        print("\n+++++ False +++++\n")
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_EnableAutoUpgrade, execution_time, current_time
    
def UpgradeFirmwareNow():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_UpgradeFirmwareNow = False
    try:
        d.open(url, a.DUT_admin_pwd)
        #firmwareCancelBtn
        d.element("class", "firmwareCancelBtn", sec=a.buffer_time)
        #upgrade
        d.element("id", "submenu_UpdateFirmware", sec=a.buffer_time)
        time.sleep(50)
        #Upgrade Firmware Now
        d.element("id", "autoFirmwareTableMessage_upgradeFirmwareBtn", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        time.sleep(a.reboot_time)
        print("Pass.Upgrade Firmware Now successfully!")
        result_UpgradeFirmwareNow = True
        time.sleep(60)
    except Exception as e:
        print(e)
        result_UpgradeFirmwareNow = False
        print("\n+++++ False +++++\n")
        time.sleep(60)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_UpgradeFirmwareNow, execution_time, current_time

def EnableChooseUpgradeTime():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableChooseUpgradeTime = False
    try:
        d.open(url, a.DUT_admin_pwd)
        #firmwareCancelBtn
        d.element("class", "firmwareCancelBtn", sec=a.buffer_time)
        #upgrade
        d.element("id", "submenu_UpdateFirmware", sec=a.buffer_time)
        d.scrolldown(300)
        #enable auto upgrade
        d.element("checkbox", "status_AutoUpgrade", status="enable", sec=a.buffer_time)
        #disable upgrade time
        d.element("checkbox", "status_PreferUpgradeTime", status="enable", sec=a.buffer_time)
        d.save_new()
        time.sleep(10)
        print("Pass.Enable auto upgrade successfully!")
        result_EnableChooseUpgradeTime = True
        time.sleep(10)
    except Exception as e:
        print(e)
        result_EnableChooseUpgradeTime = False
        print("\n+++++ False +++++\n")
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_EnableChooseUpgradeTime, execution_time, current_time

def checkMaster_fw():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_checkMaster_fw = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #firmwareCancelBtn
        d.element("class", "firmwareCancelBtn", sec=a.buffer_time)
        #upgrade
        d.element("id", "submenu_UpdateFirmware", sec=a.buffer_time)
        time.sleep(20)
        element = d._driver.find_element(By.CLASS_NAME,"autoFirmware_td2")
        text = element.text
        version = text.split("Firmware Version:")[1].strip()
        print("目前的韌體版本:", version)
        print("Pass.Success to check controller fw.")
        print("Finish.")
        result_checkMaster_fw = True
        time.sleep(5)
    except Exception as e:
        print(e)
        result_checkMaster_fw = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_checkMaster_fw, execution_time, current_time

def Wireless5GbandSecurityWPA2():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_Wireless5GbandSecurityWPA2 = False
    try:
        d.open(url, a.DUT_admin_pwd)
        #Wireless
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        #disable Wi-Fi Mesh
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        #disable Smart Connect
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        #disable Wireless 2.4GHz
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        #enable Wireless 5GHz
        d.element("checkbox", "status_5",status="enable", sec=a.buffer_time)
        #advButton
        d.element("advance",index=2,sec=a.buffer_time)
        d.scrolldown(500)
        #WPA2-Personal
        d.element("downmenu_Multiple", "WPA2-Personal", sec=a.buffer_time)
        d.save_new()
        time.sleep(160)
        #Wireless
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        #advButton
        d.element("advance",index=2,sec=a.buffer_time)
        d.scrolldown(500)
        WPA2 = d._driver.find_elements('xpath', "//*[contains(text(), 'WPA2-Personal')]")
        time.sleep(5)
        if len(WPA2) > 0:
            print("Pass.You choose WPA2.")
            result_Wireless5GbandSecurityWPA2 = True
            time.sleep(5)
        else:
            result_Wireless5GbandSecurityWPA2 = False
            print("Fail.")
    except Exception as e:
        print(e)
        result_Wireless5GbandSecurityWPA2 = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_Wireless5GbandSecurityWPA2, execution_time, current_time
    
def ChangeSubnetMask():
    file_path = f"{a.Log_folder}\\ChangeSubnetMask.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeSubnetMask")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeSubnetMask = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        #subnetMask
        d.element("input", "subnetMask",txt="255.0.0.0",sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        time.sleep(10)
        logger.info("Finish.Changed subnet successfully.")
        print("Finish.")
        result_ChangeSubnetMask = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeSubnetMask = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeSubnetMask, execution_time, current_time

def ReleaseAndRenew():
    file_path = f"{a.Log_folder}\\ReleaseAndRenew.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ReleaseAndRenew")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ReleaseAndRenew = False
    try :
        d.open(url, a.DUT_admin_pwd)
        time.sleep(30)
        d.scrolldown(500)
        #RenewRelease_btn
        d.element("id", "RenewRelease_btn", sec=a.buffer_time)
        time.sleep(30)
        #RenewRelease_btn
        d.element("id", "RenewRelease_btn", sec=a.buffer_time)
        time.sleep(30)
        d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
        time.sleep(10)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Internet Connected')]"):
            logger.info("Pass,Release And Renew.")
            print("Pass.")
            result_ReleaseAndRenew = True
            time.sleep(5)
        else:
            result_ReleaseAndRenew = False
            logger.error("Fail to Release And Renew.")
            print("Fail.")
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ReleaseAndRenew = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ReleaseAndRenew, execution_time, current_time

def ChangeLocalDomainName():
    file_path = f"{a.Log_folder}\\ChangeLocalDomainName.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeLocalDomainName")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeLocalDomainName = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        #subnetMask
        d.element("input", "localDomainName",txt="TSD3",sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("input", "dhcpIPAddressRange1",txt="101",sec=a.buffer_time)
        d.save_new()
        time.sleep(5)
        logger.info("Pass.Changed Local Domain Name successfully.")
        print("Finish.")
        result_ChangeLocalDomainName = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeLocalDomainName = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeLocalDomainName, execution_time, current_time
    
def ipconfigRenew():
    file_path = f"{a.Log_folder}\\ipconfigRenew.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ipconfigRenew")
    start_time = time.time()
    result_ipconfigRenew = False
    try:
        result = subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = time.strftime("ipconfig.txt")
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
            result_ipconfigRenew = True
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ipconfigRenew = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        print("Result saved to:", filename)
        logging.shutdown()
        return result_ipconfigRenew, execution_time, current_time

def checkAndRenameFiles():
    file_path = f"{a.Log_folder}\\checkAndRenameFiles.log"
    logger = setup_logger(file_path)
    logger.info("Log message for checkAndRenameFiles")
    result_checkAndRenameFiles = True
    start_time = time.time()
    base_path = a.all_file_path
    file_name = "ipconfig.txt"
    full_file_path = os.path.join(base_path, file_name)
    txt_paths = [full_file_path]
    try:
        for txt_path in txt_paths:
            with open(txt_path, "r", encoding="big5", errors="ignore") as f:
                content = f.read()
                if "TSD3" in content:
                    result_checkAndRenameFiles = True
                    print("Find TSD3 in the file.")
                    break
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "ipconfig_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish.")
            result_checkAndRenameFiles = True
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_checkAndRenameFiles = False
        print("\n+++++ False +++++\n")
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        print("Result saved to:", filename)
        logging.shutdown()
        return result_checkAndRenameFiles, execution_time, current_time

def CheckSubnetMask():
    file_path = f"{a.Log_folder}\\CheckSubnetMask.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckSubnetMask")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckSubnetMask = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #home
        d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
        #subnetMask
        d.element("id", "routerInfo_circle",sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(500)
        time.sleep(10)
        if d._driver.find_elements('xpath', "//*[contains(text(), '255.0.0.0')]"):
            logger.info("Pass.Changed Local Domain Name successfully.")
            print("Pass.")
            result_CheckSubnetMask = True
            time.sleep(5)
        else:
            result_CheckSubnetMask = False
            logger.error("Fail to Check Subnet Mask.")
            print("Fail.")
            time.sleep(5)
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_CheckSubnetMask = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        print(result_CheckSubnetMask)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckSubnetMask, execution_time, current_time

def ChenkLink():
    file_path = f"{a.Log_folder}\\ChenkLink.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChenkLink")
    #url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    #d.open(url, a.DUT_admin_pwd)
    start_time = time.time()
    result_ChenkLink = []
    check = a.DUT_modelName
    url_1 = a.url1
    url_2 = a.url2
    websites = [
        {"url": "http://devicesetup.net/", "text": [check]},
        {"url": url_1, "text": [check]},
        {"url": url_2, "text": [check]},
    ]
    try:
        for website in websites:
            time.sleep(10)
            d._driver.get(website["url"])
            time.sleep(5)
            wait = WebDriverWait(d._driver, a.button_time)
            found = False
            for text in website["text"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        result_ChenkLink.append(True)
                        found = True
                        break
                except Exception:
                    pass
            if not found:
                logger.error("Fail.")
                print("Fail.")
                result_ChenkLink.append(False)
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChenkLink = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChenkLink, execution_time, current_time

def ChangeManagementLink():
    file_path = f"{a.Log_folder}\\ChangeManagementLink.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeManagementLink")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeManagementLink = []
    try :
        inputTxt = "Linktest"
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        #Management Link
        d.element("input", "presentDeviceName",txt=inputTxt,sec=a.buffer_time)
        d.element("checkbox", "enableDNSRelay",status="disable", sec=a.buffer_time)
        d.element("checkbox", "enableDNSRelay",status="enable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Network", sec=a.buffer_time)
        current_input_text = d.element("id", "presentDeviceName").get_attribute("value")
        if current_input_text != inputTxt:
            print(f"Fail.Expected: {inputTxt}, but got: {current_input_text}")
            result_ChangeManagementLink.append(False)
        else:
            print(f"Pass.Got: {current_input_text}.Same as Expected: {inputTxt}.")
            result_ChangeManagementLink.append(True)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeManagementLink = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeManagementLink, execution_time, current_time

def ChenkNewLink():
    file_path = f"{a.Log_folder}\\ChenkNewLink.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChenkNewLink")
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChenkNewLink = []
    website_url = "http://Linktest.local/"
    try:
        time.sleep(10)
        d._driver.get(website_url)
        time.sleep(5)
        current_url = d._driver.current_url
        if "Linktest" or "linktest" in current_url:
            logger.info(f"URL contains 'Linktest': {current_url}")
            print(f"URL contains 'Linktest': {current_url}")
            result_ChenkNewLink.append(True)
        else:
            logger.error("Fail to find 'Linktest' in the URL.")
            print("Fail.")
            result_ChenkNewLink.append(False)
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChenkNewLink = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChenkNewLink, execution_time, current_time
    
def ChangeDHCPserverX():
    file_path = f"{a.Log_folder}\\ChangeDHCPserverX.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeDHCPserverX")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDHCPserverX = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("input", "dhcpIPAddressRange1",txt="1",sec=a.buffer_time)
        d.element("input", "dhcpIPAddressRange2",txt="255",sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Please enter a valid IP address.')]"):
            logger.info("Pass.Please enter a valid IP address.")
            print("Pass")
            result_ChangeDHCPserverX = True
            time.sleep(5)
        else :
            logger.error("Fail to Change DHCP server X.")
            print("Fail")
            result_ChangeDHCPserverX = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeDHCPserverX = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeDHCPserverX, execution_time, current_time

def ChangeDHCPserverO():
    file_path = f"{a.Log_folder}\\ChangeDHCPserverO.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeDHCPserverO")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDHCPserverO = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("input", "dhcpIPAddressRange1",txt="200",sec=a.buffer_time)
        d.element("input", "dhcpIPAddressRange2",txt="201",sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Internet Connected')]"):
            logger.info("Pass.Changed dhcp IP Address Range successfully.")
            print("Pass.")
            result_ChangeDHCPserverO = True
            time.sleep(5)
        else:
            result_ChangeDHCPserverO = False
            logger.error("Fail to Change DHCP server O.")
            print("Fail.")
            time.sleep(5)
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeDHCPserverO = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeDHCPserverO, execution_time, current_time

def CheckClientNumber2():
    file_path = f"{a.Log_folder}\\CheckClientNumber2.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckClientNumber2")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckClientNumber2 = False
    try :
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        # Find the element by its ID
        element = d._driver.find_element("id","Total_ConnectedClients")
        text_content = element.text
        print("Text Content:", text_content)
        if text_content == "2":
            logger.info("Pass.DUT will assign correct IP range and can't allow 3rd device get IP.")
            print("Pass.")
            result_CheckClientNumber2 = True
            time.sleep(5)
        else:
            result_CheckClientNumber2 = False
            logger.error("Fail to Check Client Number 2.")
            print("Fail.")
            time.sleep(5)
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_CheckClientNumber2 = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckClientNumber2, execution_time, current_time

def CheckDefaultDHCPLeaseTime():
    file_path = f"{a.Log_folder}\\CheckDefaultDHCPLeaseTime.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckDefaultDHCPLeaseTime")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckDefaultDHCPLeaseTime = False
    try :
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        input_element = d._driver.find_element("id","dhcpLeaseTime")
        input_value = input_element.get_attribute("value")
        if "10080" in input_value:
            logger.info("Pass.DHCP Lease Time:10080 minutes.")
            print("Pass.")
            result_CheckDefaultDHCPLeaseTime = True
            time.sleep(5)
        else:
            result_CheckDefaultDHCPLeaseTime = False
            logger.error("Fail to Check Default DHCP Lease Time.")
            print("Fail.")
            time.sleep(5)
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_CheckDefaultDHCPLeaseTime = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckDefaultDHCPLeaseTime, execution_time, current_time

def ChangeDHCPLeaseTime():
    file_path = f"{a.Log_folder}\\ChangeDHCPLeaseTime.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeDHCPLeaseTime")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDHCPLeaseTime = False
    try :
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("input", "dhcpLeaseTime",txt="10",sec=a.buffer_time)
        d.element("checkbox", "enableDNSRelay",status="disable", sec=a.buffer_time)
        d.element("checkbox", "enableDNSRelay",status="enable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        input_element = d._driver.find_element("id","dhcpLeaseTime")
        input_value = input_element.get_attribute("value")
        if "10" in input_value:
            logger.info("Pass.DHCP Lease Time:10 minutes.")
            print("Pass.")
            result_ChangeDHCPLeaseTime = True
            time.sleep(5)
        else:
            result_ChangeDHCPLeaseTime = False
            logger.error("Fail to Change DHCP Lease Time.")
            print("Fail.")
            time.sleep(5)
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeDHCPLeaseTime = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeDHCPLeaseTime, execution_time, current_time

def reboot():
    file_path = f"{a.Log_folder}\\reboot.log"
    logger = setup_logger(file_path)
    logger.info("Log message for reboot")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_reboot = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Admin")
        d.element("java", "System")
        d.element("id", "btn_reboot")
        d.element("id", "dialogBtn_rebootOk", sec=a.reboot_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Reboot success!')]"):
            logger.info("Pass.Reboot success!")
            print("Pass")
            result_reboot = True
        else :
            logger.error("Fail to reboot.")
            print("Fail")
            result_reboot = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_reboot = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_reboot, execution_time, current_time

def CheckDefaultLanIP():
    file_path = f"{a.Log_folder}\\CheckDefaultLanIP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckDefaultLanIP")
    start_time = time.time()
    result_CheckDefaultLanIP = False
    time.sleep(30)
    try :
        url = a.DUT_GUI_url
        response = requests.get(url, verify=False)
        if response.status_code == 200:
            print(url)
            logger.info("Pass.DUT default LAN IP address is '192.168.x.1'.")
            print("Pass")
            result_CheckDefaultLanIP = True
            time.sleep(5)
        else :
            logger.error("Fail to Check Default Lan IP.")
            print("Fail")
            result_CheckDefaultLanIP = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_CheckDefaultLanIP = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckDefaultLanIP, execution_time, current_time

def ChenkLinkAiSeries():
    file_path = f"{a.Log_folder}\\ChenkLinkAiSeries.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChenkLinkAiSeries")
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChenkLinkAiSeries = []
    check = a.DUT_modelName
    url_1 = a.url1
    url_2 = a.url2
    websites = [
        {"url": url_1, "text": [check]},
        {"url": url_2, "text": [check]},
    ]
    try:
        for website in websites:
            time.sleep(10)
            d._driver.get(website["url"])
            time.sleep(5)
            wait = WebDriverWait(d._driver, a.button_time)
            found = False
            for text in website["text"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        result_ChenkLinkAiSeries.append(True)
                        found = True
                        break
                except Exception:
                    pass

            if not found:
                logger.error("Fail to Chenk Link Ai Series.")
                print("Fail.")
                result_ChenkLinkAiSeries.append(False)
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChenkLinkAiSeries = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChenkLinkAiSeries, execution_time, current_time
    


def QoSsetDonwloadUploadSpeed():
    file_path = f"{a.Log_folder}\\QoSsetDonwloadUploadSpeed.log"
    logger = setup_logger(file_path)
    logger.info("Log message for QoSsetDonwloadUploadSpeed")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_QoSsetDonwloadUploadSpeed = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        time.sleep(5)
        #AI Traffic Optimizer:enable
        d.element("checkbox", "id_MGMT_TYPE_checkbox",status="enable", sec=a.buffer_time)
        #next
        d.element("xpath", "//*[@id='privacyNotice_QoSEnabling']/button", sec=a.buffer_time)
        #ok
        d.element("xpath", "//*[@id='privacyNotice']/button", sec=a.buffer_time)
        print("Wait for 60 sec...")
        time.sleep(60)
        d.element("input", "QoS_DownloadSpeed",txt="999", sec=a.buffer_time)
        d.element("input", "QoS_UploadSpeed",txt="998", sec=a.buffer_time)
        d.save_new()
        result_QoSsetDonwloadUploadSpeed = True
        logger.info("Pass.You can save the settings.")
        print("Finish")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_QoSsetDonwloadUploadSpeed = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_QoSsetDonwloadUploadSpeed, execution_time, current_time
    
def CheckChangeLanIPinQOS():
    file_path = f"{a.Log_folder}\\CheckChangeLanIPinQOS.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckChangeLanIPinQOS")
    url = 'http://192.168.30.1'
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckChangeLanIPinQOS = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(500)
        #//*[@id="clientInfo_content"]/div/div[1]/span
        clientInfo_content = d._driver.find_element("xpath",'//*[@id="clientInfo_content"]/div/div[1]/span')
        clientInfo_content.click()
        time.sleep(5)
        ip_elements = d._driver.find_elements("xpath",'//div[@id="qosInfoPop_ipAddress" and contains(text(), "192.168.30.")]')
        for element in ip_elements:
            print(element.text)
            logger.info("Pass.The LAN device will have the new subnet (192.168.30.X) IP.")
            result_CheckChangeLanIPinQOS = True
            time.sleep(5)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_CheckChangeLanIPinQOS = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckChangeLanIPinQOS, execution_time, current_time
    
def AddClientManuallyToMax():
    file_path = f"{a.Log_folder}\\AddClientManuallyToMax.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddClientManuallyToMax")
    result_AddClientManuallyToMax = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        clientName = [
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20",
                "21",
                "22",
                "23",
                "24",
                
            ]
        clientMac = [
            "00:e0:4c:66:0a:12",
            "00:e0:4c:66:0a:13",
            "00:e0:4c:66:0a:14",
            "00:e0:4c:66:0a:15",
            "00:e0:4c:66:0a:16",
            "00:e0:4c:66:0a:17",
            "00:e0:4c:66:0a:18",
            "00:e0:4c:66:0a:19",
            "00:e0:4c:66:0a:20",
            "00:e0:4c:66:0a:21",
            "00:e0:4c:66:0a:22",
            "00:e0:4c:66:0a:23",
            "00:e0:4c:66:0a:24",
            "00:e0:4c:66:0a:25",
            "00:e0:4c:66:0a:26",
            "00:e0:4c:66:0a:27",
            "00:e0:4c:66:0a:28",
            "00:e0:4c:66:0a:29",
            "00:e0:4c:66:0a:30",
            "00:e0:4c:66:0a:31",
            "00:e0:4c:66:0a:32",
            "00:e0:4c:66:0a:33",
            "00:e0:4c:66:0a:34",
        ]
        clientRSIP = [
            a.DUT_clientRSIP + "12",
            a.DUT_clientRSIP + "13",
            a.DUT_clientRSIP + "14",
            a.DUT_clientRSIP + "15",
            a.DUT_clientRSIP + "16",
            a.DUT_clientRSIP + "17",
            a.DUT_clientRSIP + "18",
            a.DUT_clientRSIP + "19",
            a.DUT_clientRSIP + "20",
            a.DUT_clientRSIP + "21",
            a.DUT_clientRSIP + "22",
            a.DUT_clientRSIP + "23",
            a.DUT_clientRSIP + "24",
            a.DUT_clientRSIP + "25",
            a.DUT_clientRSIP + "26",
            a.DUT_clientRSIP + "27",
            a.DUT_clientRSIP + "28",
            a.DUT_clientRSIP + "29",
            a.DUT_clientRSIP + "30",
            a.DUT_clientRSIP + "31",
            a.DUT_clientRSIP + "32",
            a.DUT_clientRSIP + "33",
            a.DUT_clientRSIP + "34",
        ]
        client_info = list(zip(clientName, clientMac, clientRSIP))
        for name, mac, rsip in client_info:
            d.element("id", "clientInfo_circle", sec=a.buffer_time)
            d.scrolldown(500)
            d.element("class", "client_add_Tag", sec=a.buffer_time)
            d.element("input", "client_Name", txt=name, sec=a.buffer_time)
            d.element("input", "client_editMac", txt=mac, sec=a.buffer_time)
            d.element("checkbox", "enableReserveIP", status="enable", sec=a.buffer_time)
            d.element("input", "client_IPAdrReserve", txt=rsip, sec=a.buffer_time)
            d.element("id", "check_btn", sec=30)
        time.sleep(10)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        client_add = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'client_add_Tag'))
        )
        client_add.click()
        time.sleep(5)
        remaining_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//p[@class="Remainingtext"]/span'))
        )
        print(f"Remaining: {remaining_element.text}")
        if remaining_element.text == "0":
            logger.info("Pass: Remaining value is zero.")
            print("Pass: Remaining value is zero.")
            result_AddClientManuallyToMax = True
            time.sleep(5)
    except UnexpectedAlertPresentException as alert_exception:
        logger.info(f"Pass: Encountered alert - The maxium number of permitted DHCP reservations has been exceeded.")
        print(f"Pass")
        result_AddClientManuallyToMax = True
        time.sleep(5)
    except Exception as e:
        if "The maxium number of permitted DHCP reservations has been exceeded" in str(e):
            logger.info("Pass: Encountered alert in Exception block.")
            print("Pass: Encountered alert in Exception block.")
            result_AddClientManuallyToMax = True
        else:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_AddClientManuallyToMax = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddClientManuallyToMax, execution_time, current_time

def ChangeDHCPserver10to200():
    file_path = f"{a.Log_folder}\\ChangeDHCPserver10to200.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeDHCPserver10to200")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDHCPserver10to200 = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("input", "dhcpIPAddressRange1",txt="10",sec=a.buffer_time)
        d.element("input", "dhcpIPAddressRange2",txt="200",sec=a.buffer_time)
        d.element("xpath", "//body").click() 
        time.sleep(5)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Internet Connected')]"):
            logger.info("Pass.Changed dhcp IP Address Range successfully.")
            print("Pass.")
            result_ChangeDHCPserver10to200 = True
            time.sleep(5)
        else:
            result_ChangeDHCPserver10to200 = False
            logger.error("Fail to Change DHCP server 10 to 200.")
            print("Fail.")
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeDHCPserver10to200 = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeDHCPserver10to200, execution_time, current_time

def Client1IpReservation():
    file_path = f"{a.Log_folder}\\Client1IpReservation.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Client1IpReservation")
    result_Client1IpReservation = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client 2
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=a.DUT_clientRSIP + "11", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        logger.info("Pass.Set Client 1 ip Reservation.")
        print("Finish.")
        result_Client1IpReservation = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Client1IpReservation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Client1IpReservation, execution_time, current_time
    
def DeleteClient24():
    file_path = f"{a.Log_folder}\\DeleteClient24.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DeleteClient24")
    result_DeleteClient24 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client 2
        d.element("edit", "editData(24)", sec=a.buffer_time)
        client_name_input = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.XPATH, '//input[@name="client_Name"]'))
        )
        client_name_input.clear()
        '''
        client_edit_mac_input = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.XPATH, '//input[@name="client_editMac"]'))
        )
        client_edit_mac_input.clear()
        '''
        d.element("checkbox", "enableReserveIP",status="disable", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        logger.info("Finish.Removed one of the client in the list.")
        print("Finish.")
        result_DeleteClient24 = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DeleteClient24 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DeleteClient24, execution_time, current_time

def CheckClientNewIP():
    file_path = f"{a.Log_folder}\\CheckClientNewIP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckClientNewIP")
    result_CheckClientNewIP = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        if WebDriverWait(d._driver, a.button_time).until(EC.presence_of_element_located((By.XPATH, "//*[contains(text(), '" + a.DUT_clientRSIP + "35')]"))):
            logger.info("Pass.Real client can setting reservation IP.")
            print("Pass.")
            result_CheckClientNewIP = True
            time.sleep(5)
        else:
            logger.error("Fail to Check Client New IP.")
            print("Fail.")
            result_CheckClientNewIP = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckClientNewIP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckClientNewIP, execution_time, current_time
    
def ClientIllegalip():
    file_path = f"{a.Log_folder}\\ClientIllegalip.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ClientIllegalip")
    result_ClientIllegalip = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client 2
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt="256.1.1.1", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Please enter a valid IP address. (e.g. 192.168.0.1)')]"):
            logger.info("Pass.It can not be saved.")
            print("Pass.")
            result_ClientIllegalip = True
            time.sleep(5)
        else:
            logger.error("Fail to Client Illegal ip.")
            print("Fail.")
            result_ClientIllegalip = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ClientIllegalip = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ClientIllegalip, execution_time, current_time
    
def CheckNameAndRenameFiles():
    file_path = f"{a.Log_folder}\\CheckNameAndRenameFiles.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNameAndRenameFiles")
    result_CheckNameAndRenameFiles = True
    start_time = time.time()
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    base_path = a.all_file_path
    file_name = "ipconfigall.txt"
    full_file_path = os.path.join(base_path, file_name)
    txt_paths = [full_file_path]
    new_filename = None
    try:
        for txt_path in txt_paths:
            with open(txt_path, "r", encoding="big5", errors="ignore") as f:
                content = f.read()
                normalized_content = content.lower().replace(":", "").replace("-", "")
                if a.Lan1_MAC in normalized_content:
                    result_CheckNameAndRenameFiles = True
                    logger.info(f"Pass.{a.Lan1_MAC}")
                    print(f"Pass.{a.Lan1_MAC}")
                    break

        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = f"{filename.split('.')[0]}_{a.Lan1_MAC}_{current_time}.txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish.")
            result_CheckNameAndRenameFiles = True
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_CheckNameAndRenameFiles = False
        print("\n+++++ False +++++\n")
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        if new_filename is not None:
            print("Result saved to:", new_filename)
        logging.shutdown()
        return result_CheckNameAndRenameFiles, execution_time, current_time
    
def run_pingv4():
    file_path = f"{a.Log_folder}\\run_pingv4.log"
    logger = setup_logger(file_path)
    logger.info("Log message for run_pingv4")
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    time.sleep(60)
    def execute_ping(address, version):
        time.sleep(40)
        result = subprocess.run(["ping", address, version, "-n", "20"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "傳輸失敗。一般失敗。" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")+ result.stdout.count("傳輸失敗。一般失敗。")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 5 or counts2 == 1:
                logger.error("Fail. More than 4 occurrences of connection issues.")
                print("Fail.")
                return False
            else:
                logger.info("Pass. Connection issues found but not exceeding 4 occurrences.")
                print("Pass.")
                return True
        else:
            logger.info("Pass. No connection issues found.")
            print("Pass.")
            return True
    try:
        start_time = time.time()
        result_pingv4 = []
        addresses = ["www.google.com"]
        versions = ["-4"]
        for address in addresses:
            for version in versions:
                if version == "-4":
                    result_pingv4.append(execute_ping(address, version))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_pingv4 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_pingv4, execution_time, current_time

def DisableDHCPserver():
    file_path = f"{a.Log_folder}\\DisableDHCPserver.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisableDHCPserver")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_DisableDHCPserver = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "dhcpServer_status",status="disable",sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        wait = WebDriverWait(d._driver, a.button_time)
        ok_button = wait.until(EC.visibility_of_element_located((By.ID, "popalert_ok")))
        time.sleep(5)
        ok_button.click()
        print(f"click OK ")
        logger.info("Pass.Successfully to Disable DHCP server.")
        print("Finish.")
        result_DisableDHCPserver = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_DisableDHCPserver = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisableDHCPserver, execution_time, current_time
    
def CannotPingv4():
    file_path = f"{a.Log_folder}\\CannotPingv4.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CannotPingv4")
    # Release and renew the IP addresses
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(5)
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    time.sleep(5)
    def execute_ping(address, version):
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "傳輸失敗。一般失敗" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")+ result.stdout.count("傳輸失敗。一般失敗")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.info("Pass.Cannot Ping v4.")
                print("Pass.")
                return True
            else:
                logger.error("Fail.Still can ping v4.")
                print("Fail.")
                return False
        else:
            logger.error("Fail.Still can ping v4.")
            print("Fail.")
            return False
    try:
        start_time = time.time()
        result_CannotPingv4 = []
        addresses = ["www.google.com"]
        versions = ["-4"]
        for address in addresses:
            for version in versions:
                if version == "-4":
                    result_CannotPingv4.append(execute_ping(address, version))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_CannotPingv4 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CannotPingv4, execution_time, current_time

def SetStaticIP():
    file_path = f"{a.Log_folder}\\SetStaticIP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for SetStaticIP")
    start_time = time.time()
    result_SetStaticIP = False
    def run_as_admin():
        if sys.platform.startswith('win'):
            try:
                ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, __file__, None, 1)
            except Exception as e:
                logger.error(f"An error occurred: {str(e)}")
                sys.exit(1)
        else:
            subprocess.call(['sudo', sys.executable] + sys.argv)
    interface_name = a.Lan1
    ip_address = a.DUT_clientRSIP+"123"
    subnet_mask = "255.255.255.0"
    default_gateway = a.DUT_default_Lan_IP
    command = f"netsh interface ipv4 set address name=\"{interface_name}\" static {ip_address} {subnet_mask} gateway={default_gateway}"
    time.sleep(5)
    try:
        if not ctypes.windll.shell32.IsUserAnAdmin():
            run_as_admin()
        output = subprocess.check_output(command, stderr=subprocess.STDOUT, text=True)
        logger.info("Pass.Static IP set success.")
        print("Pass.")
        print(output)
        result_SetStaticIP = True
        time.sleep(5)
    except subprocess.CalledProcessError as e:
        print("Fail.")
        print("錯誤訊息:")
        print(e.output)
        logger.error(f"An error occurred: {str(e.output)}")
        result_SetStaticIP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_SetStaticIP, execution_time, current_time
    
def CanPing8888():
    file_path = f"{a.Log_folder}\\CanPing8888.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CanPing8888")
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    time.sleep(60)
    def execute_ping(address, version):
        time.sleep(30)
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "傳輸失敗。一般失敗" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")+ result.stdout.count("傳輸失敗。一般失敗")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.error("Fail. More than 4 occurrences of connection issues.")
                print("Fail.")
                return False
            else:
                logger.info("Pass. Connection issues found but not exceeding 4 occurrences.")
                print("Pass.")
                return True
        else:
            logger.info("Pass. No connection issues found.")
            print("Pass.")
            return True
    try:
        start_time = time.time()
        result_CanPing8888 = []
        addresses = ["8.8.8.8"]
        versions = ["-4"]
        for address in addresses:
            for version in versions:
                if version == "-4":
                    result_CanPing8888.append(execute_ping(address, version))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_CanPing8888 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CanPing8888, execution_time, current_time

def SetLanDHCP():
    file_path = f"{a.Log_folder}\\SetLanDHCP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for SetLanDHCP")
    start_time = time.time()
    result_SetLanDHCP = False
    def run_as_admin():
        if sys.platform.startswith('win'):
            try:
                ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, __file__, None, 1)
            except Exception as e:
                logger.error(f"An error occurred: {str(e)}")
                sys.exit(1)
        else:
            subprocess.call(['sudo', sys.executable] + sys.argv)
    interface_name = a.Lan1
    command = f"netsh interface ipv4 set address name=\"{interface_name}\" source=dhcp"
    time.sleep(5)
    try:
        if not ctypes.windll.shell32.IsUserAnAdmin():
            run_as_admin()
        output = subprocess.check_output(command, stderr=subprocess.STDOUT, text=True)
        logger.info("Pass,set back to DHCP。")
        print("Pass,已將網路設定回 DHCP。")
        print(output)
        result_SetLanDHCP = True
        time.sleep(5)
    except subprocess.CalledProcessError as e:
        logger.error("Fail to set back to DHCP。")
        print("Fail,網路設定回 DHCP 失敗。")
        print("錯誤訊息:")
        logger.error(f"An error occurred: {str(e.output)}")
        result_SetLanDHCP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_SetLanDHCP, execution_time, current_time

def CheckClientDNSserver1():
    file_path = f"{a.Log_folder}\\CheckClientDNSserver1.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckClientDNSserver1")
    start_time = time.time()
    result_CheckClientDNSserver1 = False
    interface_name = a.Lan1
    command = f"netsh interface ipv4 show dns name=\"{interface_name}\""
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT, text=True)
        dns_ip_match = re.search(r"DNS 伺服器.*:\s+([\d.]+)", output)

        if dns_ip_match:
            dns_ip = dns_ip_match.group(1)
            logger.info(f"DNS server IP of Ethernet: {dns_ip}")
            print(f"乙太網路的 DNS 伺服器 IP：{dns_ip}")
            if dns_ip == a.DUT_default_Lan_IP:
                logger.info("DNS server IP is correct, set to Pass.")
                print("DNS 伺服器 IP 正確，設定為 Pass。")
                result_CheckClientDNSserver1 = True
            else:
                logger.error(f"DNS server IP is incorrect: {dns_ip}, set to Fail.")
                print(f"DNS 伺服器 IP 不正確:{dns_ip}，設定為 Fail。")
                result_CheckClientDNSserver1 = False
        else:
            logger.error("DNS server IP not found.")
            print("找不到 DNS 伺服器 IP。")
            result_CheckClientDNSserver1 = False
    except subprocess.CalledProcessError as e:
        logger.error("Failed to execute command. Error message:")
        print("執行命令失敗。錯誤訊息:")
        print(e.output)
        result_CheckClientDNSserver1 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckClientDNSserver1, execution_time, current_time
    
def DisableDNSRelay():
    file_path = f"{a.Log_folder}\\DisableDNSRelay.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisableDNSRelay")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_DisableDNSRelay = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(200)
        d.element("checkbox", "enableDNSRelay",status="disable",sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        wait = WebDriverWait(d._driver, a.button_time)
        ok_button = wait.until(EC.visibility_of_element_located((By.ID, "popalert_ok")))
        time.sleep(5)
        ok_button.click()
        print(f"click OK ")
        logger.info("Pass.Successfully to Disable DNS server.")
        print("Finish.")
        result_DisableDNSRelay = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_DisableDNSRelay = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisableDNSRelay, execution_time, current_time

def CheckClientDNSserver2():
    file_path = f"{a.Log_folder}\\CheckClientDNSserver2.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckClientDNSserver2")
    start_time = time.time()
    result_CheckClientDNSserver2 = False
    interface_name = a.Lan1
    command = f"netsh interface ipv4 show dns name=\"{interface_name}\""
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT, text=True)
        dns_ip_match = re.search(r"DNS 伺服器.*:\s+([\d.]+)", output)
        if dns_ip_match:
            dns_ip = dns_ip_match.group(1)
            logger.info(f"DNS server IP of Ethernet: {dns_ip}")
            print(f"乙太網路的 DNS 伺服器 IP：{dns_ip}")
            if dns_ip == a.DNS_IP:
                logger.info("DNS server IP is correct, set to Pass.")
                print("DNS 伺服器 IP 正確，設定為 Pass。")
                result_CheckClientDNSserver2 = True
            else:
                logger.error("DNS server IP is incorrect and set to Fail.")
                print("DNS 伺服器 IP 不正確，設定為 Fail。")
                result_CheckClientDNSserver2 = False
        else:
            logger.error("DNS server IP not found.")
            print("找不到 DNS 伺服器 IP。")
            result_CheckClientDNSserver2 = False
    except subprocess.CalledProcessError as e:
        logger.error("Failed to execute command. Error message:")
        print("執行命令失敗。錯誤訊息:")
        logger.error(f"An error occurred: {str(e.output)}")
        result_CheckClientDNSserver2 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckClientDNSserver2, execution_time, current_time

def CheckDefaultSmartConnect():
    file_path = f"{a.Log_folder}\\CheckDefaultSmartConnect.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckDefaultSmartConnect")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckDefaultSmartConnect = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        if d.element("checkbox", "status_superMesh", status="enable", sec=a.buffer_time):
            time.sleep(5)
            logger.info("Pass. Smart Connect is enabled by default.")
            print("Pass")
            result_CheckDefaultSmartConnect = True
        else:
            logger.error("Fail to Check Default Smart Connect.")
            print("Fail")
            result_CheckDefaultSmartConnect = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckDefaultSmartConnect = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckDefaultSmartConnect, execution_time, current_time
    
def CheckDefaultEncryption():
    file_path = f"{a.Log_folder}\\CheckDefaultEncryption.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckDefaultEncryption")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckDefaultEncryption = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        #advButton radio24_advBtn
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'WPA2-Personal')]"):
            time.sleep(5)
            logger.info("Pass.Using WPA2 encryption While default.")
            print("Pass")
            result_CheckDefaultEncryption = True
        else:
            time.sleep(5)
            logger.error("Fail to Check Default Encryption.")
            print("Fail")
            result_CheckDefaultEncryption = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckDefaultEncryption = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckDefaultEncryption, execution_time, current_time

def NetshWlanShowInterfaces():
    start_time = time.time()
    result_NetshWlanShowInterfaces = False
    try:
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = "wlan.txt"
        full_filepath = os.path.join(a.all_file_path, filename)
        print(full_filepath)
        result = subprocess.run(["netsh", "wlan", "show", "interfaces"], capture_output=True, text=True, encoding='utf-8')
        if result.stdout:
            with open(full_filepath, "w", encoding="utf-8", errors='replace') as f:
                f.write(result.stdout)
                result_NetshWlanShowInterfaces = True
                print("Finish")
        else:
            print("No output from command.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        result_NetshWlanShowInterfaces = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        print("Result saved to:", full_filepath)
        return result_NetshWlanShowInterfaces, execution_time, current_time


def CheckNetshWlanShowInterfacesSSID():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesSSID.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesSSID")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesSSID = []
    try:
        time.sleep(5)
        txt_paths = [
            os.path.join(a.all_file_path, "wlan.txt")
        ]
        search_timeout = a.button_time
        cmd = 'findstr /i /c:"' + a.DUT_Wifi_SSID + '" /c:"wpa2-personal" ' + ' '.join(txt_paths)
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=search_timeout, encoding='utf-8')
        if result.returncode == 0:
            result = True
            print(f"Pass. SSID: {a.DUT_Wifi_SSID}, Authentication: WPA2-Personal")
        else:
            result = False
            fail_reason = f"SSID: {a.DUT_Wifi_SSID} or Authentication: WPA2-Personal not found"
            print("Fail Reason:", fail_reason)
        results_CheckNetshWlanShowInterfacesSSID.append(result)
        time.sleep(5)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            results_CheckNetshWlanShowInterfacesSSID.append(True)
            logger.info("Finish")
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesSSID.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        print("Result saved to:", filename)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesSSID, execution_time, current_time
    
def ChangeEncryptionNone():
    file_path = f"{a.Log_folder}\\ChangeEncryptionNone.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeEncryptionNone")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionNone = False
    try:
        d.open(url, a.DUT_admin_pwd)
        SSID = a.DUT_Wifi_SSID+"(none)"
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu", "None", sec=a.buffer_time)
        d.element("input","wifiName_24",txt=SSID,sec=a.buffer_time)
        d.element("id", "btn_OK", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'None')]"):
            time.sleep(5)
            logger.info("Pass.Using None encryption now.")
            print("Pass.")
            result_ChangeEncryptionNone = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Encryption None.")
            print("Fail.")
            result_ChangeEncryptionNone = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeEncryptionNone = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeEncryptionNone, execution_time, current_time

def CheckNetshWlanShowInterfacesNone():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesNone.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesNone")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesNone = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "開啟" in file_contents:
                    result = True
                    print(f"'開啟' found in file: {txt_path}")
                    logger.info("Pass.")
                else:
                    result = False
                    print("Fail to find 開啟.")
                    logger.error("Fail.")
                results_CheckNetshWlanShowInterfacesNone.append(result)
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            results_CheckNetshWlanShowInterfacesNone.append(True)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesNone.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesNone, execution_time, current_time

def ChangeEncryptionWPA():
    file_path = f"{a.Log_folder}\\ChangeEncryptionWPA.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeEncryptionWPA")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionWPA = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        #advButton radio24_advBtn
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "WPA/WPA2-Personal", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'WPA/WPA2-Personal')]"):
            time.sleep(5)
            logger.info("Pass.Using WPA/WPA2-Personal encryption now.")
            print("Pass")
            result_ChangeEncryptionWPA = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Encryption WPA.")
            print("Fail")
            result_ChangeEncryptionWPA = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeEncryptionWPA = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeEncryptionWPA, execution_time, current_time

def CheckNetshWlanShowInterfacesWPA():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesWPA.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesWPA")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesWPA = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "WPA" in file_contents:
                    result = True
                    print(f"Pass.'WPA' found in file: {txt_path}")
                    logger.info("Pass.")
                else:
                    result = False
                    print("Fail to find WPA.")
                    logger.error("Fail.")
                results_CheckNetshWlanShowInterfacesWPA.append(result)
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            results_CheckNetshWlanShowInterfacesWPA.append(True)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesWPA.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesWPA, execution_time, current_time

def ChangeEncryptionWPA2():
    file_path = f"{a.Log_folder}\\ChangeEncryptionWPA2.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeEncryptionWPA2")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionWPA2 = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        #advButton radio24_advBtn
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "WPA2-Personal", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'WPA2-Personal')]"):
            time.sleep(5)
            logger.info("Pass.Using WPA2-Personal encryption now.")
            print("Pass")
            result_ChangeEncryptionWPA2 = True
        else:
            time.sleep(5)
            logger.error("Fail to change WPA2-Personal encryption")
            print("Fail")
            result_ChangeEncryptionWPA2 = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeEncryptionWPA2 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeEncryptionWPA2, execution_time, current_time
    
def CheckNetshWlanShowInterfacesWPA2():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesWPA2.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesWPA2")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesWPA2 = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "WPA2" in file_contents:
                    result = True
                    print(f"'WPA2' found in file: {txt_path}")
                    logger.info("Pass.")
                else:
                    result = False
                    print("Fail to find WPA2.")
                    logger.error("Fail.")
                results_CheckNetshWlanShowInterfacesWPA2.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            results_CheckNetshWlanShowInterfacesWPA2.append(True)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesWPA2.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesWPA2, execution_time, current_time

def CheckSSIDpwdBlank():
    file_path = f"{a.Log_folder}\\CheckSSIDpwdBlank.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckSSIDpwdBlank")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckSSIDpwdBlank = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("input", "wifiName_24",txt=" 00012 34 56 _-ABCabc0123嗨嗨 ", sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        time.sleep(5)
        Save_btn = d._driver.find_element("xpath",'//*[@id="Save_btn"]')
        Save_btn.click()
        time.sleep(10)
        if "invalid" in d._driver.page_source:
            time.sleep(5)
            logger.info("Pass. Can't config blank from head and tail.")
            print("Pass.")
            result_CheckSSIDpwdBlank = True
        else:
            time.sleep(5)
            logger.error("Fail to Check SSID pwd Blank")
            print("Fail.")
            result_CheckSSIDpwdBlank = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckSSIDpwdBlank = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckSSIDpwdBlank, execution_time, current_time
    
def ChangeSSIDpwd():
    file_path = f"{a.Log_folder}\\ChangeSSIDpwd.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeSSIDpwd")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeSSIDpwd = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("input", "wifiName_24",txt="~!@#$% ^&*()_+1a", sec=a.buffer_time)
        d.element("input", "password_24",txt="~!@#$% ^&*()_+1a", sec=a.buffer_time)
        d.save_new()
        result_ChangeSSIDpwd = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeSSIDpwd = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeSSIDpwd, execution_time, current_time
    
def ChangeEncryptionNone24GHz():
    file_path = f"{a.Log_folder}\\ChangeEncryptionNone24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeEncryptionNone24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionNone24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5",status="disable", sec=a.buffer_time)
        #advButton radio24_advBtn
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu", "None", sec=a.buffer_time)
        SSID = a.DUT_Wifi_SSID+"(none)"
        d.element("input","wifiName_24",txt=SSID,sec=a.buffer_time)
        d.element("id", "btn_OK", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'None')]"):
            time.sleep(5)
            logger.info("Pass.Using None encryption now.")
            print("Pass")
            result_ChangeEncryptionNone24GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Encryption None 24GHz.")
            print("Fail")
            result_ChangeEncryptionNone24GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeEncryptionNone24GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeEncryptionNone24GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesNone24GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesNone24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesNone24GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesNone24GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "2.4 GHz" in file_contents and "開啟" in file_contents:
                    result = True
                    print(f"'2.4 GHz' and '開啟' found in file: {txt_path}")
                    logger.info("Pass.")
                else:
                    result = False
                    print("Fail to find 2.4GHz or 開啟.")
                    logger.error("Fail.")
                results_CheckNetshWlanShowInterfacesNone24GHz.append(result)
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            results_CheckNetshWlanShowInterfacesNone24GHz.append(True)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesNone24GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesNone24GHz, execution_time, current_time

def ChangeEncryptionWPA24GHz():
    file_path = f"{a.Log_folder}\\ChangeEncryptionWPA24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeEncryptionWPA24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionWPA24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5",status="disable", sec=a.buffer_time)
        #advButton radio24_advBtn
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "WPA/WPA2-Personal", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'WPA/WPA2-Personal')]"):
            time.sleep(5)
            logger.info("Pass.Using WPA/WPA2-Personal encryption now.")
            print("Pass.")
            result_ChangeEncryptionWPA24GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Encryption WPA 24GHz")
            print("Fail")
            result_ChangeEncryptionWPA24GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeEncryptionWPA24GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeEncryptionWPA24GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesWPA24GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesWPA24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesWPA24GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesWPA24GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "2.4 GHz" in file_contents and "WPA" in file_contents:
                    result = True
                    print(f"'2.4 GHz' and 'WPA' found in file: {txt_path}")
                    logger.info("Pass")
                else:
                    result = False
                    print("Fail to find 2.4GHz or WPA.")
                    logger.error("Fail.")
                results_CheckNetshWlanShowInterfacesWPA24GHz.append(result)
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesWPA24GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesWPA24GHz, execution_time, current_time

def ChangeEncryptionWPA2_24GHz():
    file_path = f"{a.Log_folder}\\ChangeEncryptionWPA2_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeEncryptionWPA2_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionWPA2_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="enable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="enable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple","WPA2-Personal",sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_24",status="enable", sec=a.buffer_time)
        d.save_new()
        result_ChangeEncryptionWPA2_24GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_ChangeEncryptionWPA2_24GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeEncryptionWPA2_24GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesWPA2_24GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesWPA2_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesWPA2_24GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesWPA2_24GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "2.4 GHz" in file_contents and "WPA2-Personal" in file_contents:
                    result = True
                    print("Pass.")
                    logger.info(f"Pass.'2.4 GHz' and 'WPA2-Personal' found in file: {txt_path}")
                else:
                    result = False
                    print("Fail.")
                    logger.error("Fail to find 2.4GHz or WPA2-Personal.")
                results_CheckNetshWlanShowInterfacesWPA2_24GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesWPA2_24GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesWPA2_24GHz, execution_time, current_time

def ChangeEncryptionNone5GHz():
    file_path = f"{a.Log_folder}\\ChangeEncryptionNone5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeEncryptionNone5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionNone5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple","None",sec=a.buffer_time)
        d.element("id", "btn_OK", sec=a.buffer_time)
        SSID = a.DUT_Wifi_SSID+"(none)"
        d.element("input","wifiName_24",txt=SSID,sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.save_new()
        result_ChangeEncryptionNone5GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeEncryptionNone5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeEncryptionNone5GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesNone5GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesNone5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesNone5GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesNone5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "5 GHz" in file_contents and "開啟" in file_contents:
                    result = True
                    logger.info(f"'5 GHz' and '開啟' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 5GHz and 開啟.")
                    print("Fail.")
                results_CheckNetshWlanShowInterfacesNone5GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesNone5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesNone5GHz, execution_time, current_time

def ChangeEncryptionWPA5GHz():
    file_path = f"{a.Log_folder}\\ChangeEncryptionWPA5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeEncryptionWPA5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionWPA5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple","WPA/WPA2-Personal",sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_5",status="enable", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'WPA/WPA2-Personal')]"):
            time.sleep(5)
            logger.info("Pass.Using WPA/WPA2-Personal encryption now.")
            print("Pass.")
            result_ChangeEncryptionWPA5GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Encryption WPA 5GHz")
            print("Fail.")
            result_ChangeEncryptionWPA5GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeEncryptionWPA5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeEncryptionWPA5GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesWPA5GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesWPA5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesWPA5GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesWPA5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "5 GHz" in file_contents and "WPA" in file_contents:
                    result = True
                    logger.info(f"'5 GHz' and 'WPA' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 5GHz and WPA.")
                    print("Fail.")
                results_CheckNetshWlanShowInterfacesWPA5GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesWPA5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesWPA5GHz, execution_time, current_time

def ChangeEncryptionWPA2_5GHz():
    file_path = f"{a.Log_folder}\\ChangeEncryptionWPA2_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeEncryptionWPA2_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionWPA2_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple","WPA2-Personal",sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_5",status="enable", sec=a.buffer_time)
        d.save_new()
        result_ChangeEncryptionWPA2_5GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeEncryptionWPA2_5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeEncryptionWPA2_5GHz, execution_time, current_time
    
def CheckNetshWlanShowInterfacesWPA2_5GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesWPA2_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesWPA2_5GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesWPA2_5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "5 GHz" in file_contents and "WPA2-Personal" in file_contents:
                    result = True
                    logger.info(f"'5 GHz' and 'WPA2-Personal' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 5 GHz or WPA2-Personal.")
                    print("Fail.")
                results_CheckNetshWlanShowInterfacesWPA2_5GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesWPA2_5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesWPA2_5GHz, execution_time, current_time
    
def ChangeMixed80211bgn_24GHz():
    file_path = f"{a.Log_folder}\\ChangeMixed80211bgn_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeMixed80211bgn_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeMixed80211bgn_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5",status="disable", sec=a.buffer_time)
        #advButton radio24_advBtn
        SSID = a.DUT_Wifi_SSID+"_bgn"
        d.element("input","wifiName_24",txt=SSID,sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "Mixed 802.11b/g/n", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Mixed 802.11b/g/n')]"):
            time.sleep(5)
            logger.info("Pass.Using Mixed 802.11b/g/n now.")
            print("Pass.")
            result_ChangeMixed80211bgn_24GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Mixed 802.11bgn 24GHz.")
            print("Fail")
            result_ChangeMixed80211bgn_24GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeMixed80211bgn_24GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeMixed80211bgn_24GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesMixed80211bgn_24GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesMixed80211bgn_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesMixed80211bgn_24GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesMixed80211bgn_24GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "2.4 GHz" in file_contents and "802.11n" in file_contents or "802.11b" in file_contents or "802.11g" in file_contents:
                    result = True
                    logger.info(f"'2.4 GHz' and '802.11b/g/n' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 2.4GHz or 802.11b/g/n.")
                    print("Fail.")
                results_CheckNetshWlanShowInterfacesMixed80211bgn_24GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesMixed80211bgn_24GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesMixed80211bgn_24GHz, execution_time, current_time

def ChangeMixed80211anac_5GHz():
    file_path = f"{a.Log_folder}\\ChangeMixed80211anac_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeMixed80211anac_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeMixed80211anac_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "Mixed 802.11a/n/ac", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Mixed 802.11a/n/ac')]"):
            time.sleep(5)
            logger.info("Pass.Using Mixed 802.11a/n/ac now.")
            print("Pass.")
            result_ChangeMixed80211anac_5GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Mixed 802.11anac 5GHz.")
            print("Fail.")
            result_ChangeMixed80211anac_5GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeMixed80211anac_5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeMixed80211anac_5GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesMixed80211anac_5GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesMixed80211anac_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesMixed80211anac_5GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesMixed80211anac_5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "5 GHz" in file_contents and "802.11a" in file_contents or "802.11n" in file_contents or "802.11ac" in file_contents:
                    result = True
                    logger.info(f"'5 GHz' and '802.11a/n/ac ' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 5 GHz or 802.11a/n/ac .")
                    print("Fail.")
                results_CheckNetshWlanShowInterfacesMixed80211anac_5GHz.append(result)
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesMixed80211anac_5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesMixed80211anac_5GHz, execution_time, current_time


#00012 34 56 _-ABCabc0123嗨嗨
def Change24GHz5GHzSSID():
    file_path = f"{a.Log_folder}\\Change24GHz5GHzSSID.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Change24GHz5GHzSSID")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_Change24GHz5GHzSSID = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("input", "wifiName_24",txt="00012 34 56 _-ABCabc0123嗨嗨", sec=a.buffer_time)
        d.element("input", "wifiName_5",txt="00012 34 56 _-ABCabc0123嗨嗨", sec=a.buffer_time)
        d.save_new()
        result_Change24GHz5GHzSSID = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Change24GHz5GHzSSID = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Change24GHz5GHzSSID, execution_time, current_time

def CheckNetshWlanShowInterfaces_24GHz5GHzSSID():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfaces_24GHz5GHzSSID.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfaces_24GHz5GHzSSID")
    start_time = time.time()
    results_CheckNetshWlanShowInterfaces_24GHz5GHzSSID = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "2.4 GHz" in file_contents or "5 GHz" in file_contents and "00012 34 56 _-ABCabc0123嗨嗨" in file_contents:
                    result = True
                    logger.info(f"'2.4 GHz' or '5 GHz' and '00012 34 56 _-ABCabc0123嗨嗨' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find '2.4 GHz' or '5 GHz' and '00012 34 56 _-ABCabc0123嗨嗨'.")
                    print("Fail.")
                results_CheckNetshWlanShowInterfaces_24GHz5GHzSSID.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfaces_24GHz5GHzSSID.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfaces_24GHz5GHzSSID, execution_time, current_time

def EnableGuestZone_24GHz():
    file_path = f"{a.Log_folder}\\EnableGuestZone_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EnableGuestZone_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableGuestZone_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.scrolldown(200)
        SSID = a.DUT_Wifi_SSID + "_GuestZone24GHz"
        d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
        d.element("checkbox", "status_gz_5",status="disable", sec=a.buffer_time)
        d.element("input", "wifiName_24g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_24g",txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("xpath", "//*[@id='radio24_advBtn']/span", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("downmenu_Multiple","WPA/WPA2-Personal",sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=200)
        result_EnableGuestZone_24GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EnableGuestZone_24GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EnableGuestZone_24GHz, execution_time, current_time

def CheckNetshWlanShowInterfaces_24GHzGuestZoneSSID():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfaces_24GHzGuestZoneSSID.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfaces_24GHzGuestZoneSSID")
    start_time = time.time()
    results_CheckNetshWlanShowInterfaces_24GHzGuestZoneSSID = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                search_string = a.DUT_Wifi_SSID + "_GuestZone24GHz"
                if "2.4 GHz" in file_contents  and search_string in file_contents:
                    result = True
                    logger.info(f"'2.4 GHz' and {search_string} found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error(f"Fail to find '2.4 GHz' and {search_string}.")
                    print("Fail.")
                results_CheckNetshWlanShowInterfaces_24GHzGuestZoneSSID.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfaces_24GHzGuestZoneSSID.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfaces_24GHzGuestZoneSSID, execution_time, current_time

def CannotPingDUTLANIP():
    file_path = f"{a.Log_folder}\\CannotPingDUTLANIP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CannotPingDUTLANIP")
    time.sleep(10)
    def execute_ping(address, version):
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.info("Pass. Cannot Ping DUT LAN IP.")
                print("Pass.")
                return True
                
            else:
                logger.error("Fail. Still can ping DUT Lan IP.")
                print("Fail.")
                return False
        else:
            logger.error("Fail. Still can ping DUT Lan IP.")
            print("Fail.")
            return False
    try:
        start_time = time.time()
        result_CannotPingDUTLANIP = []
        addresses = [a.DUT_default_Lan_IP]
        versions = ["-4"]
        for address in addresses:
            for version in versions:
                if version == "-4":
                    result_CannotPingDUTLANIP.append(execute_ping(address, version))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_CannotPingDUTLANIP = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CannotPingDUTLANIP, execution_time, current_time
    

def CheckWebGUICannotAccess():
    file_path = f"{a.Log_folder}\\CheckWebGUICannotAccess.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWebGUICannotAccess")
    start_time = time.time()
    driver = webdriver.Chrome()
    result = []
    websites = [
        {"url": a.DUT_GUI_url, "text": [
            "無法連上這個網站",
            f"{a.DUT_GUI_url}的回應時間過長。",
            ]
        },
    ]
    try:
        driver.set_window_size(a.W, a.H)
        for website in websites:
            time.sleep(5)
            driver.get(website["url"])
            time.sleep(10)
            wait = WebDriverWait(driver, a.button_time)
            result_CheckWebGUICannotAccess = False
            for text in website["text"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        result.append(True)
                        result_CheckWebGUICannotAccess = True
                        time.sleep(5)
                        break
                except Exception as e:
                    if "net::ERR_CONNECTION_TIMED_OUT" in str(e):
                        logger.info("Pass. Cannot access Web GUI by Guest WiFi")
                        print("Pass.")
                        result.append(True)
                        result_CheckWebGUICannotAccess = True
                        time.sleep(5)
                        break
                    else:
                        logger.error(f"Fail. URL: {website['url']}, Text: {text} - Error: {str(e)}")
                        print("Fail.")
                        result.append(False)
                        result_CheckWebGUICannotAccess = False
                        time.sleep(5)
            if result_CheckWebGUICannotAccess:
                break
            time.sleep(5)
    except Exception as err:
        if "net::ERR_CONNECTION_TIMED_OUT" in str(err):
            logger.info("Pass. Cannot access Web GUI by Guest WiFi")
            print("Pass.")
            result.append(True)
            result_CheckWebGUICannotAccess = True
            time.sleep(5)
        else:
            result_CheckWebGUICannotAccess = False
            logger.error(f"An error occurred: {str(e)}")
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        result_CheckWebGUICannotAccess = any(result)
        logger.info(result_CheckWebGUICannotAccess)
        logging.shutdown()
        return result_CheckWebGUICannotAccess, execution_time, current_time

def ChangeMixed80211gn_24GHz():
    file_path = f"{a.Log_folder}\\ChangeMixed80211gn_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeMixed80211gn_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeMixed80211gn_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        SSID = a.DUT_Wifi_SSID+"_gn"
        d.element("input","wifiName_24",txt=SSID,sec=a.buffer_time)
        d.element("checkbox", "status_5",status="disable", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "Mixed 802.11g/n", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Mixed 802.11g/n')]"):
            time.sleep(5)
            logger.info("Pass.Using Mixed 802.11g/n now.")
            print("Pass")
            result_ChangeMixed80211gn_24GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Mixed 802.11gn 24GHz.")
            print("Fail")
            result_ChangeMixed80211gn_24GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeMixed80211gn_24GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeMixed80211gn_24GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesMixed80211gn_24GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesMixed80211gn_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesMixed80211gn_24GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesMixed80211gn_24GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "2.4 GHz" in file_contents and "802.11n" in file_contents or "802.11g" in file_contents:
                    result = True
                    logger.info(f"Pass.'2.4 GHz' and '802.11g/n' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 2.4GHz or 802.11g/n.")
                    print("Fail.")
                results_CheckNetshWlanShowInterfacesMixed80211gn_24GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesMixed80211gn_24GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesMixed80211gn_24GHz, execution_time, current_time

def ChangeOnly80211ac_5GHz():
    file_path = f"{a.Log_folder}\\ChangeOnly80211ac_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeOnly80211ac_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeOnly80211ac_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "802.11ac only", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), '802.11ac only')]"):
            time.sleep(5)
            logger.info("Pass.Using 802.11ac only now.")
            print("Pass")
            result_ChangeOnly80211ac_5GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change 802.11ac only 5GHz.")
            print("Fail")
            result_ChangeOnly80211ac_5GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeOnly80211ac_5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeOnly80211ac_5GHz, execution_time, current_time

def ChangeOnly80211n_5GHz():
    file_path = f"{a.Log_folder}\\ChangeOnly80211n_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeOnly80211n_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeOnly80211n_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "802.11n only", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), '802.11n only')]"):
            time.sleep(5)
            logger.info("Pass.Using 802.11n only now.")
            print("Pass")
            result_ChangeOnly80211n_5GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change 802.11n only 5GHz.")
            print("Fail")
            result_ChangeOnly80211n_5GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeOnly80211n_5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeOnly80211n_5GHz, execution_time, current_time
    
def CheckNetshWlanShowInterfacesMixed80211nac_5GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesMixed80211nac_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesMixed80211nac_5GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesMixed80211nac_5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "5 GHz" in file_contents and "802.11n" in file_contents or "802.11ac" in file_contents:
                    result = True
                    logger.info(f"'5 GHz' and '802.11n/ac ' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 5 GHz or 802.11n/ac .")
                    print("Fail.")
                results_CheckNetshWlanShowInterfacesMixed80211nac_5GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesMixed80211nac_5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesMixed80211nac_5GHz, execution_time, current_time

def ChangeMixed80211an_5GHz():
    file_path = f"{a.Log_folder}\\ChangeMixed80211an_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeMixed80211an_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeMixed80211an_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "Mixed 802.11a/n", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Mixed 802.11a/n')]"):
            time.sleep(5)
            print("Pass.Using Mixed 802.11a/n now.")
            result_ChangeMixed80211an_5GHz = True
        else:
            time.sleep(5)
            print("Fail")
            result_ChangeMixed80211an_5GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeMixed80211an_5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeMixed80211an_5GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesMixed80211an_5GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesMixed80211an_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesMixed80211an_5GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesMixed80211an_5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "5 GHz" in file_contents and "802.11a" in file_contents or "802.11n" in file_contents:
                    result = True
                    logger.info(f"'5 GHz' and '802.11a/n ' found in file: {txt_path}")
                    print("Pass")
                else:
                    result = False
                    logger.error("Fail to find 5 GHz or 802.11a/n .")
                    print("Fail")
                results_CheckNetshWlanShowInterfacesMixed80211an_5GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesMixed80211an_5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesMixed80211an_5GHz, execution_time, current_time
    
def ChangeWirelessChannelTo1_24GHz():
    file_path = f"{a.Log_folder}\\ChangeWirelessChannelTo1_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeWirelessChannelTo1_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWirelessChannelTo1_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5",status="disable", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu", "1", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), '1')]"):
            time.sleep(5)
            logger.info("Pass.Using channel 1 now.")
            print("Pass")
            result_ChangeWirelessChannelTo1_24GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Wireless Channel To 1,24GHz")
            print("Fail")
            result_ChangeWirelessChannelTo1_24GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeWirelessChannelTo1_24GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeWirelessChannelTo1_24GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesChannelTo1_24GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesChannelTo1_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesChannelTo1_24GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesChannelTo1_24GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "2.4 GHz" in file_contents and "1" in file_contents:
                    result = True
                    logger.info(f"'2.4 GHz' and '1' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 2.4GHz or 1.")
                    print("Fail")
                results_CheckNetshWlanShowInterfacesChannelTo1_24GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesChannelTo1_24GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesChannelTo1_24GHz, execution_time, current_time

def ChangeWirelessChannelTo6_24GHz():
    file_path = f"{a.Log_folder}\\ChangeWirelessChannelTo6_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeWirelessChannelTo6_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWirelessChannelTo6_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5",status="disable", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu", "6", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), '6')]"):
            time.sleep(5)
            logger.info("Pass.Using channel 6 now.")
            print("Pass")
            result_ChangeWirelessChannelTo6_24GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Wireless Channel To 6,24GHz.")
            print("Fail")
            result_ChangeWirelessChannelTo6_24GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeWirelessChannelTo6_24GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeWirelessChannelTo6_24GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesChannelTo6_24GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesChannelTo6_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesChannelTo6_24GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesChannelTo6_24GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "2.4 GHz" in file_contents and "6" in file_contents:
                    result = True
                    logger.info(f"Pass.'2.4 GHz' and '6' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 2.4GHz or 6.")
                    print("Fail")
                results_CheckNetshWlanShowInterfacesChannelTo6_24GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesChannelTo6_24GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesChannelTo6_24GHz, execution_time, current_time

def ChangeWirelessChannelTo36_5GHz():
    file_path = f"{a.Log_folder}\\ChangeWirelessChannelTo36_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeWirelessChannelTo36_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWirelessChannelTo36_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu", "36", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), '36')]"):
            time.sleep(5)
            logger.info("Pass.Using channel 36 now.")
            print("Pass")
            result_ChangeWirelessChannelTo36_5GHz = True
        else:
            time.sleep(5)
            logger.error("Fail.Change Wireless Channel To36,5GHz.")
            print("Fail")
            result_ChangeWirelessChannelTo36_5GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeWirelessChannelTo36_5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeWirelessChannelTo36_5GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesChannelTo36_5GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesChannelTo36_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesChannelTo36_5GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesChannelTo36_5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "5 GHz" in file_contents and "36" in file_contents:
                    result = True
                    logger.info(f"Pass.'5 GHz' and '36' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error("Fail to find 5 GHz or 36.")
                    print("Fail.")
                results_CheckNetshWlanShowInterfacesChannelTo36_5GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesChannelTo36_5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesChannelTo36_5GHz, execution_time, current_time
    
def ChangeWirelessChannelTo149_5GHz():
    file_path = f"{a.Log_folder}\\ChangeWirelessChannelTo149_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeWirelessChannelTo149_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWirelessChannelTo149_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu", "149", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), '149')]"):
            time.sleep(5)
            logger.info("Pass.Using channel 149 now.")
            print("Pass.")
            result_ChangeWirelessChannelTo149_5GHz = True
        else:
            time.sleep(5)
            logger.error("Fail to Change Wireless Channel To 149,5GHz.")
            print("Fail")
            result_ChangeWirelessChannelTo149_5GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeWirelessChannelTo149_5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeWirelessChannelTo149_5GHz, execution_time, current_time

def CheckNetshWlanShowInterfacesChannelTo149_5GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfacesChannelTo149_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfacesChannelTo149_5GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfacesChannelTo149_5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                if "5 GHz" in file_contents and "149" in file_contents:
                    result = True
                    logger.info(f"Pass.'5 GHz' and '149' found in file: {txt_path}")
                    print("Pass")
                else:
                    result = False
                    logger.error("Fail to find 5 GHz or 149.")
                    print("Fail")
                results_CheckNetshWlanShowInterfacesChannelTo149_5GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfacesChannelTo149_5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfacesChannelTo149_5GHz, execution_time, current_time

def ChangeChannelWidth20_24GHz():
    file_path = f"{a.Log_folder}\\ChangeChannelWidth20_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeChannelWidth20_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeChannelWidth20_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5",status="disable", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu", "20 MHz", sec=a.buffer_time)
        d.save_new()
        url = a.DUT_GUI_url
        d = Dlink(browser='chrome')
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), '20 MHz')]"):
            time.sleep(5)
            logger.info("Pass.Using Width 20 MHz now.")
            print("Pass.")
            result_ChangeChannelWidth20_24GHz = True
        else:
            time.sleep(5)
            logger.error("Fail Change Channel Width 20,24GHz.")
            print("Fail.")
            result_ChangeChannelWidth20_24GHz = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeChannelWidth20_24GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeChannelWidth20_24GHz, execution_time, current_time
    
def EnableGuestZoneAndSmartConnect():
    file_path = f"{a.Log_folder}\\EnableGuestZoneAndSmartConnect.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EnableGuestZoneAndSmartConnect")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableGuestZoneAndSmartConnect = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_gz_5",status="disable", sec=a.buffer_time)
        d.scrolldown(200)
        d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
        SSID = a.DUT_Wifi_SSID+"_GuestZone(none)"
        d.element("input", "wifiName_24g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_24g",txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("xpath", "//*[@id='radio24_advBtn']/span", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("downmenu_Multiple","None",sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        d.element("checkbox", "internetAccessOnly",status="enable", sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=200)
        result_EnableGuestZoneAndSmartConnect = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EnableGuestZoneAndSmartConnect = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EnableGuestZoneAndSmartConnect, execution_time, current_time

def CheckNetshWlanShowInterfaces_GuestZoneSSID():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfaces_GuestZoneSSID.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfaces_GuestZoneSSID")
    start_time = time.time()
    results_CheckNetshWlanShowInterfaces_GuestZoneSSID = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                search_string = a.DUT_Wifi_SSID + "_GuestZone"
                if search_string in file_contents  and "開啟" in file_contents:
                    result = True
                    logger.info(f"{search_string} and '開啟' found in file: {txt_path}")
                    print("Pass")
                else:
                    result = False
                    logger.error(f"Fail to find {search_string} and '開啟'.")
                    print("Fail")
                results_CheckNetshWlanShowInterfaces_GuestZoneSSID.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfaces_GuestZoneSSID.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfaces_GuestZoneSSID, execution_time, current_time

def EnableGuestZoneNone_24GHz():
    file_path = f"{a.Log_folder}\\EnableGuestZoneNone_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EnableGuestZoneNone_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableGuestZoneNone_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.scrolldown(200)
        d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
        d.element("checkbox", "status_gz_5",status="disable", sec=a.buffer_time)
        SSID = a.DUT_Wifi_SSID + "_GuestZone24GHz(none)"
        d.element("input", "wifiName_24g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_24g",txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("xpath", "//*[@id='radio24_advBtn']/span", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("downmenu_Multiple","None",sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=200)
        result_EnableGuestZoneNone_24GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_EnableGuestZoneNone_24GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EnableGuestZoneNone_24GHz, execution_time, current_time

def CheckNetshWlanShowInterfaces_24GHzNoneGuestZoneSSID():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfaces_24GHzNoneGuestZoneSSID.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfaces_24GHzNoneGuestZoneSSID")
    start_time = time.time()
    results_CheckNetshWlanShowInterfaces_24GHzNoneGuestZoneSSID = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                search_string = a.DUT_Wifi_SSID + "_GuestZone24GHz(none)"
                if search_string in file_contents  and "開啟" in file_contents:
                    result = True
                    print(f"{search_string} and '開啟' found in file: {txt_path}")
                    print("Pass")
                else:
                    result = False
                    print(f"Fail to find {search_string} and '開啟'.")
                    print("Fail")
                results_CheckNetshWlanShowInterfaces_24GHzNoneGuestZoneSSID.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfaces_24GHzNoneGuestZoneSSID.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfaces_24GHzNoneGuestZoneSSID, execution_time, current_time

def EnableGuestZoneNone_5GHz():
    file_path = f"{a.Log_folder}\\EnableGuestZoneNone_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EnableGuestZoneNone_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableGuestZoneNone_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.scrolldown(200)
        SSID = a.DUT_Wifi_SSID + "_GuestZone5GHz(none)"
        d.element("checkbox", "status_gz_24",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_gz_5",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_5g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_5g",txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("xpath", "//*[@id='radio5_advBtn']/span", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("downmenu_Multiple","None",sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=200)
        result_EnableGuestZoneNone_5GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_EnableGuestZoneNone_5GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EnableGuestZoneNone_5GHz, execution_time, current_time

def CheckNetshWlanShowInterfaces_5GHzNoneGuestZoneSSID():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfaces_5GHzNoneGuestZoneSSID.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfaces_5GHzNoneGuestZoneSSID")
    start_time = time.time()
    results_CheckNetshWlanShowInterfaces_5GHzNoneGuestZoneSSID = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]

    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                search_string = a.DUT_Wifi_SSID + "_GuestZone5GHz(none)"
                if search_string in file_contents and "開啟" in file_contents:
                    result = True
                    logger.info(f"Pass.{search_string} and '開啟' found in file: {txt_path}")
                    print("Pass")
                else:
                    result = False
                    logger.error(f"Fail to find {search_string} and '開啟'.")
                    print("Fail")
                results_CheckNetshWlanShowInterfaces_5GHzNoneGuestZoneSSID.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfaces_5GHzNoneGuestZoneSSID.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfaces_5GHzNoneGuestZoneSSID, execution_time, current_time

def DisableGuestZoneInternetAccessOnly():
    file_path = f"{a.Log_folder}\\DisableGuestZoneInternetAccessOnly.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisableGuestZoneInternetAccessOnly")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_DisableGuestZoneInternetAccessOnly = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("xpath", "//*[@id='radio24_advBtn']/span", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "internetAccessOnly",status="disable", sec=a.buffer_time)
        d.save_new()
        result_DisableGuestZoneInternetAccessOnly = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DisableGuestZoneInternetAccessOnly = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisableGuestZoneInternetAccessOnly, execution_time, current_time

def CanPingDUTLANIP():
    file_path = f"{a.Log_folder}\\CanPingDUTLANIP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CanPingDUTLANIP")
    time.sleep(10)
    def execute_ping(address, version):
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.error("Fail. More than 4 occurrences of connection issues.")
                print("Fail.")
                return False
            else:
                logger.info("Pass. Connection issues found but not exceeding 4 occurrences.")
                print("Pass.")
                return True
        else:
            logger.info("Pass. No connection issues found.")
            print("Pass.")
            return True
    try:
        start_time = time.time()
        result_CanPingDUTLANIP = []
        addresses = [a.DUT_default_Lan_IP]
        versions = ["-4"]
        for address in addresses:
            for version in versions:
                if version == "-4":
                    result_CanPingDUTLANIP.append(execute_ping(address, version))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_CanPingDUTLANIP = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logger.info(result_CanPingDUTLANIP)
        logging.shutdown()
        return result_CanPingDUTLANIP, execution_time, current_time

def DisableGuestZone():
    file_path = f"{a.Log_folder}\\DisableGuestZone.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisableGuestZone")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_DisableGuestZone = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_gz_24",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_gz_5",status="disable", sec=a.buffer_time)
        d.save_new()
        result_DisableGuestZone = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DisableGuestZone = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisableGuestZone, execution_time, current_time
    
def EnableGuestZone_5GHz():
    file_path = f"{a.Log_folder}\\EnableGuestZone_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EnableGuestZone_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableGuestZone_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.scrolldown(600)
        SSID = a.DUT_Wifi_SSID + "_GuestZone5GHz"
        d.element("checkbox", "status_gz_5",status="enable", sec=a.buffer_time)
        d.element("checkbox", "status_gz_24",status="disable", sec=a.buffer_time)
        d.element("input", "wifiName_5g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_5g",txt=a.WiFi_pwd, sec=a.buffer_time)
        d.save_new()
        result_EnableGuestZone_5GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_EnableGuestZone_5GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EnableGuestZone_5GHz, execution_time, current_time
    
def CheckNetshWlanShowInterfaces_5GHzGuestZoneSSID():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfaces_5GHzGuestZoneSSID.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfaces_5GHzGuestZoneSSID")
    start_time = time.time()
    results_CheckNetshWlanShowInterfaces_5GHzGuestZoneSSID = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                search_string = a.DUT_Wifi_SSID + "_GuestZone5GHz"
                if search_string in file_contents  and "WPA2-Personal" in file_contents:
                    result = True
                    logger.info(f"Pass.'{search_string}' and 'WPA2-Personal' found in file: {txt_path}")
                    print("Pass")
                else:
                    result = False
                    logger.error(f"Fail to find '{search_string}' and 'WPA2-Personal'.")
                    print("Fail")
                results_CheckNetshWlanShowInterfaces_5GHzGuestZoneSSID.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfaces_5GHzGuestZoneSSID.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfaces_5GHzGuestZoneSSID, execution_time, current_time

def EnableGuestZone_24GHz5GHzNone():
    file_path = f"{a.Log_folder}\\EnableGuestZone_24GHz5GHzNone.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EnableGuestZone_24GHz5GHzNone")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableGuestZone_24GHz5GHzNone = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.scrolldown(200)
        SSID = a.DUT_Wifi_SSID + "_GuestZone24GHz(none)"
        d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_24g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_24g",txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("xpath", "//*[@id='radio24_advBtn']/span", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("downmenu_Multiple","None",sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        d.scrolldown(600)
        SSID = a.DUT_Wifi_SSID + "_GuestZone5GHz(none)"
        d.element("checkbox", "status_gz_5",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_5g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_5g",txt=a.WiFi_pwd, sec=a.buffer_time)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='radio5_advBtn']/span", sec=a.buffer_time)
        d.element("downmenu_Multiple","None",sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=200)
        result_EnableGuestZone_24GHz5GHzNone = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_EnableGuestZone_24GHz5GHzNone = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EnableGuestZone_24GHz5GHzNone, execution_time, current_time

def CheckNetshWlanShowInterfaces_24GHz5GHzNoneGuestZone():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfaces_24GHz5GHzNoneGuestZone.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfaces_24GHz5GHzNoneGuestZone")
    start_time = time.time()
    results_CheckNetshWlanShowInterfaces_24GHz5GHzNoneGuestZone = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                search_string1 = a.DUT_Wifi_SSID + "_GuestZone5GHz(none)"
                search_string2 = a.DUT_Wifi_SSID + "_GuestZone24GHz(none)"
                if search_string1 in file_contents or search_string2 in file_contents and "開啟" in file_contents:
                    result = True
                    print(f"'{search_string1}' or '{search_string2}'and '開啟' found in file: {txt_path}")
                else:
                    result = False
                    print(f"Fail to find '{search_string1}' or '{search_string2}' or '開啟'.")
                results_CheckNetshWlanShowInterfaces_24GHz5GHzNoneGuestZone.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            logger.info("Finish")
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfaces_24GHz5GHzNoneGuestZone.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfaces_24GHz5GHzNoneGuestZone, execution_time, current_time

def DisableGuestZone_24GHz5GHzNone():
    file_path = f"{a.Log_folder}\\DisableGuestZone_24GHz5GHzNone.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisableGuestZone_24GHz5GHzNone")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_DisableGuestZone_24GHz5GHzNone = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.scrolldown(200)
        d.element("checkbox", "status_gz_24",status="disable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_gz_5",status="disable", sec=a.buffer_time)
        d.save_new()
        result_DisableGuestZone_24GHz5GHzNone = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_DisableGuestZone_24GHz5GHzNone = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisableGuestZone_24GHz5GHzNone, execution_time, current_time
    
def CheckNetshWlanShowInterfaces_24GHz5GHz():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfaces_24GHz5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfaces_24GHz5GHz")
    start_time = time.time()
    results_CheckNetshWlanShowInterfaces_24GHz5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                search_string1 = a.DUT_Wifi_SSID
                search_string2 = a.DUT_Wifi_SSID
                if search_string1 in file_contents or search_string2 in file_contents:
                    result = True
                    logger.info(f"Pass.'{search_string1}' or '{search_string2}' found in file: {txt_path}")
                    print("Pass.")
                else:
                    result = False
                    logger.error(f"Fail to find '{search_string1}' or '{search_string2}'.")
                    print("Fail.")
                results_CheckNetshWlanShowInterfaces_24GHz5GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfaces_24GHz5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfaces_24GHz5GHz, execution_time, current_time

def CheckWiFiChannelWidth_20MHz():
    file_path = f"{a.Log_folder}\\CheckWiFiChannelWidth_20MHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWiFiChannelWidth_20MHz")
    start_time = time.time()
    result_CheckWiFiChannelWidth_20MHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "20 MHz" in copied_text:
            logger.info(f"Pass. Found {a.DUT_Wifi_SSID} and '20 MHz' in {wifiInfo_txt_path}")
            print("Pass")
            result = True
        else:
            result = False
            logger.error(f"Fail to find {a.DUT_Wifi_SSID} or '20 MHz.")
            print("Fail")
        result_CheckWiFiChannelWidth_20MHz.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckWiFiChannelWidth_20MHz.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CheckWiFiChannelWidth_20MHz, execution_time, current_time

def CannotScan_24GHz():
    file_path = f"{a.Log_folder}\\CannotScan_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CannotScan_24GHz")
    start_time = time.time()
    result_CannotScan_24GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "24GHz" in copied_text:
            logger.error(f"Fail. Still can scan {a.DUT_Wifi_SSID} or '24GHz' in {wifiInfo_txt_path}")
            print("Fail")
            result = False
        else:
            result = True
            logger.info(f"Pass.Cannot scan {a.DUT_Wifi_SSID} or 24GHz.")
            print("Pass")
        result_CannotScan_24GHz.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CannotScan_24GHz.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CannotScan_24GHz, execution_time, current_time

def CannotScan_5GHz():
    file_path = f"{a.Log_folder}\\CannotScan_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CannotScan_5GHz")
    start_time = time.time()
    result_CannotScan_5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "5GHz" in copied_text:
            logger.error(f"Fail. Still can scan {a.DUT_Wifi_SSID} or '5GHz' in {wifiInfo_txt_path}")
            print("Fail")
            result = False
        else:
            result = True
            logger.info(f"Pass.Cannot scan {a.DUT_Wifi_SSID} or 5GHz.")
            print("Pass")
        result_CannotScan_5GHz.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CannotScan_5GHz.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CannotScan_5GHz, execution_time, current_time
    
def ChangeWireless_pwd():
    file_path = f"{a.Log_folder}\\ChangeWireless_pwd.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeWireless_pwd")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWireless_pwd = []
    try:
        d.open(url, a.DUT_admin_pwd)
        #2.4GHz
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("input","password_24",txt=" 12 34 56 Aa " ,sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        d.scrolldown(500)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Text field contains illegal characters.')]"):
            time.sleep(5)
            logger.info("Pass,password_24 Text field contains illegal characters.")
            print("Pass")
            result = True
        else:
            time.sleep(5)
            logger.error("Fail,The warning 'Text field contains illegal characters.'did not pop up in password_24.")
            print("Fail")
            result = False
        d.scrolldown(500)
        time.sleep(5)
        d.element("input","wifiName_24",txt="012 34 56 aA_24GHz" ,sec=a.buffer_time)
        d.element("input","password_24",txt="012 34 56 aA" ,sec=a.buffer_time)
        d.save_new()
        result_ChangeWireless_pwd.append(result)
        #5GHz
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(700)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.element("input","password_5",txt=" 12 34 56 Aa " ,sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        d.scrolldown(700)
        time.sleep(5)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Text field contains illegal characters.')]"):
            time.sleep(5)
            logger.info("Pass,password_5 Text field contains illegal characters.")
            print("Pass")
            result = True
        else:
            time.sleep(5)
            logger.error("Fail,The warning 'Text field contains illegal characters.'did not pop up in password_5.")
            print("Fail")
            result = False
        d.scrolldown(700)
        time.sleep(5)
        d.element("input","wifiName_5",txt="012 34 56 aA_5GHz" ,sec=a.buffer_time)
        d.element("input","password_5",txt="012 34 56 aA" ,sec=a.buffer_time)
        d.save_new()
        result_ChangeWireless_pwd.append(result)
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeWireless_pwd = False
        time.sleep(5)
    finally:
        print(result_ChangeWireless_pwd)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeWireless_pwd, execution_time, current_time

def ChangeGuestZoneSSIDPwd_24GHz5GHz():
    file_path = f"{a.Log_folder}\\ChangeGuestZoneSSIDPwd_24GHz5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeGuestZoneSSIDPwd_24GHz5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeGuestZoneSSIDPwd_24GHz5GHz = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.scrolldown(200)
        SSID1 = a.DUT_Wifi_SSID + " _GuestZone 34 56 _-Ab@ "
        d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_24g",txt=SSID1, sec=a.buffer_time)
        d.element("input", "password_24g",txt=" 012 34 56 aA ", sec=a.buffer_time)
        d.scrolldown(600)
        SSID2 = a.DUT_Wifi_SSID + " _GuestZone 34 56 _-Ab@ "
        d.element("checkbox", "status_gz_5",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_5g",txt=SSID2, sec=a.buffer_time)
        d.element("input", "password_5g",txt=" 012 34 56 aA ", sec=a.buffer_time)
        d.scrolldown(300)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'Text field contains illegal characters.')]"):
            time.sleep(5)
            logger.info("Pass.Text field contains illegal characters.")
            print("Pass.")
            result = True
        else:
            time.sleep(5)
            logger.error("Fail,The warning 'Text field contains illegal characters.'did not pop up.")
            print("Fail")
            result = False
        SSID3 = a.DUT_Wifi_SSID + "_GuestZone 34 56 _-Ab@"
        d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_24g",txt=SSID3, sec=a.buffer_time)
        d.element("input", "password_24g",txt="012 34 56 aA", sec=a.buffer_time)
        d.scrolldown(600)
        SSID4 = a.DUT_Wifi_SSID + "_GuestZone 34 56 _-Ab@"
        d.element("checkbox", "status_gz_5",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_5g",txt=SSID4, sec=a.buffer_time)
        d.element("input", "password_5g",txt="012 34 56 aA", sec=a.buffer_time)
        d.scrolldown(300)
        d.save_new()
        result_ChangeGuestZoneSSIDPwd_24GHz5GHz.append(result)
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_ChangeGuestZoneSSIDPwd_24GHz5GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeGuestZoneSSIDPwd_24GHz5GHz, execution_time, current_time
    
def CanScan_GuestZone():
    file_path = f"{a.Log_folder}\\CanScan_GuestZone.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CanScan_GuestZone")
    start_time = time.time()
    result_CannotScan_5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "_GuestZone" in copied_text:
            result = True
            logger.info(f"Pass.Can scan {a.DUT_Wifi_SSID} or _GuestZone.")
            print("Pass")
        else:
            logger.error(f"Fail.Cannot scan {a.DUT_Wifi_SSID} or '_GuestZone' in {wifiInfo_txt_path}")
            print("Fail")
            result = False
        result_CannotScan_5GHz.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CannotScan_5GHz.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CannotScan_5GHz, execution_time, current_time

def Change24GHz5GHzSSID_different():
    file_path = f"{a.Log_folder}\\Change24GHz5GHzSSID_different.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Change24GHz5GHzSSID_different")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_Change24GHz5GHzSSID_different = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_24",status="enable", sec=a.buffer_time)
        d.element("checkbox", "status_5",status="enable", sec=a.buffer_time)
        SSID1 = a.DUT_Wifi_SSID + "_24GHz"
        SSID2 = a.DUT_Wifi_SSID + "_5GHz"
        d.element("input", "wifiName_24",txt=SSID1, sec=a.buffer_time)
        d.element("input", "wifiName_5",txt=SSID2, sec=a.buffer_time)
        d.save_new()
        result_Change24GHz5GHzSSID_different = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Change24GHz5GHzSSID_different = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Change24GHz5GHzSSID_different, execution_time, current_time

def EnableGuestZone_24GHz5GHz():
    file_path = f"{a.Log_folder}\\EnableGuestZone_24GHz5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EnableGuestZone_24GHz5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableGuestZone_24GHz5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.scrolldown(200)
        SSID = a.DUT_Wifi_SSID + "_GuestZone24GHz"
        d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_24g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_24g",txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("xpath", "//*[@id='radio24_advBtn']/span", sec=a.buffer_time)
        d.scrolldown(600)
        SSID = a.DUT_Wifi_SSID + "_GuestZone5GHz"
        d.element("checkbox", "status_gz_5",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_5g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_5g",txt=a.WiFi_pwd, sec=a.buffer_time)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='radio5_advBtn']/span", sec=a.buffer_time)
        d.save_new()
        result_EnableGuestZone_24GHz5GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_EnableGuestZone_24GHz5GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EnableGuestZone_24GHz5GHz, execution_time, current_time

def ChangeWirelessChannelTo1And36_24GHz5GHz():
    file_path = f"{a.Log_folder}\\ChangeWirelessChannelTo1And36_24GHz5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeWirelessChannelTo1And36_24GHz5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWirelessChannelTo1And36_24GHz5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu", "1", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_5']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu", "36", sec=a.buffer_time)
        d.save_new()
        result_ChangeWirelessChannelTo1And36_24GHz5GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeWirelessChannelTo1And36_24GHz5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeWirelessChannelTo1And36_24GHz5GHz, execution_time, current_time

def CheckNetshWlanShowInterfaces_24GHz5GHz_1or36():
    file_path = f"{a.Log_folder}\\CheckNetshWlanShowInterfaces_24GHz5GHz_1or36.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckNetshWlanShowInterfaces_24GHz5GHz_1or36")
    start_time = time.time()
    results_CheckNetshWlanShowInterfaces_24GHz5GHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8') as file:
                file_contents = file.read()
                search_string1 = a.DUT_Wifi_SSID+"_24GHz"
                search_string2 = a.DUT_Wifi_SSID+"_5GHz"
                search_string3 = a.DUT_Wifi_SSID+"_GuestZone24GHz"
                search_string4 = a.DUT_Wifi_SSID+"_GuestZone5GHz"
                search_string5 = "1"
                search_string6 = "36"
                if search_string1 in file_contents or search_string2 in file_contents or search_string3 in file_contents or search_string4 in file_contents or search_string5 in file_contents or search_string6 in file_contents:
                    result = True
                    logger.info(f"Pass.'{search_string1}' or '{search_string2}'or '{search_string3}' or '{search_string4}' or '{search_string5}' or '{search_string6}' found in file: {txt_path}")
                    print("Pass")
                else:
                    result = False
                    logger.error(f"Fail to find '{search_string1}' or '{search_string2}'or '{search_string3}' or '{search_string4}' or '{search_string5}' or '{search_string6}'.")
                    print("Fail")
                results_CheckNetshWlanShowInterfaces_24GHz5GHz.append(result)
        
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            logger.info("Finish")
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckNetshWlanShowInterfaces_24GHz5GHz.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return results_CheckNetshWlanShowInterfaces_24GHz5GHz, execution_time, current_time

def ReleaseAndCheck():
    file_path = f"{a.Log_folder}\\ReleaseAndCheck.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ReleaseAndCheck")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ReleaseAndCheck = False
    try :
        d.open(url, a.DUT_admin_pwd)
        time.sleep(30)
        d.scrolldown(500)
        #RenewRelease_btn
        d.element("id", "RenewRelease_btn", sec=a.buffer_time)
        time.sleep(30)
        d.element("id", "menu_Home", sec=a.buffer_time)
        disconnected = WebDriverWait(d._driver, a.button_time).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, a.HomeDisconnected)))
        result_ReleaseAndCheck = True
        logger.info("Finish.Internet status show correctly on Home page")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ReleaseAndCheck = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ReleaseAndCheck, execution_time, current_time
    
def RenewAndCheck():
    file_path = f"{a.Log_folder}\\RenewAndCheck.log"
    logger = setup_logger(file_path)
    logger.info("Log message for RenewAndCheck")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_RenewAndCheck = False
    try :
        d.open(url, a.DUT_admin_pwd)
        time.sleep(30)
        d.scrolldown(500)
        #RenewRelease_btn
        d.element("id", "RenewRelease_btn", sec=a.buffer_time)
        time.sleep(30)
        d.element("id", "menu_Home", sec=a.buffer_time)
        connected = WebDriverWait(d._driver, a.button_time).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, a.HomeConnected)))
        result_RenewAndCheck = True
        logger.info("Finish.Internet status show correctly on Home page")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_RenewAndCheck = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_RenewAndCheck, execution_time, current_time

def CheckGoToSettingsButtonInternet_v4():
    file_path = f"{a.Log_folder}\\CheckGoToSettingsButtonInternet_v4.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckGoToSettingsButtonInternet_v4")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckGoToSettingsButtonInternet_v4 = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("id", "goto_internet_v4", sec=a.buffer_time)
        time.sleep(10)
        Internet = d._driver.find_elements("xpath",'//*[contains(text(),"Use this section to configure your Internet Connection type. There are several connection types to choose. If you are unsure of your connection method, please contact your Internet Service Provider. Note: If using the PPPoE option, you will need to remove or disable any PPPoE client software on your computers.")]')
        if len(Internet) > 0:
            result_CheckGoToSettingsButtonInternet_v4 = True
            logger.info("Pass.The Home page will switch to DHCP WAN setting  on Internet page.")
            print("Pass.")
        else:
            result_CheckGoToSettingsButtonInternet_v4 = False
            logger.error("Fail to Check Go To Settings Button Internet v4.")
            print("Fail.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CheckGoToSettingsButtonInternet_v4 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckGoToSettingsButtonInternet_v4, execution_time, current_time

def CheckDUTWiFiName():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckDUTWiFiName = False
    print("DUT Model Name:", a.DUT_modelName)
    print("DUT MAC:", a.DUTMAC)
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "routerInfo_circle", sec=a.buffer_time)
        router = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, a.HomeRouterWiFi)))
        d.scrolldown(300)
        time.sleep(5)
        search_elements = [a.DUT_modelName, a.DUTMAC]
        results = {}
        for element in search_elements:
            try:
                elements = WebDriverWait(d._driver, a.button_time).until(
                    EC.presence_of_all_elements_located((By.XPATH, f'//*[contains(translate(text(), "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz"), "{element.lower()}")]'))
                )
                if elements:
                    results[element] = True
                    print(f"Elements found with text: {element}")
                else:
                    results[element] = False
                    print(f"No elements found with text: {element}")
            except Exception as e:
                print(f"An error occurred while searching for {element}: {str(e)}")
        if results.get(a.DUT_modelName) and results.get(a.DUTMAC):
            print(f"{a.DUT_modelName} and {a.DUTMAC} were found.")
            result_CheckDUTWiFiName = True
        else:
            print(f"Either {a.DUT_modelName} or {a.DUTMAC} was not found.")
            result_CheckDUTWiFiName = False
    except Exception as e:
        print(e)
        result_CheckDUTWiFiName = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckDUTWiFiName, execution_time, current_time

def CheckGoToSettingsButtonNetwork():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckGoToSettingsButtonNetwork = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "routerInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//a[@href='Network.html']", sec=a.buffer_time)
        time.sleep(10)
        Network = d._driver.find_elements("xpath",'//*[contains(text(),"Use this section to configure the network settings for your device")]')
        if len(Network) > 0:
            result_CheckGoToSettingsButtonNetwork = True
            print("Pass.The Home page will switch to Network page.")
        else:
            result_CheckGoToSettingsButtonNetwork = False
            print("Fail.")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CheckGoToSettingsButtonNetwork = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckGoToSettingsButtonNetwork, execution_time, current_time

def CheckGoToSettingsButtonWireless():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckGoToSettingsButtonWireless = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "routerInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("xpath", "//a[@href='WiFi.html']", sec=a.buffer_time)
        time.sleep(10)
        Wireless = d._driver.find_elements("xpath",'//*[contains(text(),"Use this section to configure the wireless settings for your D-Link Router")]')
        if len(Wireless) > 0:
            result_CheckGoToSettingsButtonWireless = True
            print("Pass.The Home page will switch to Wireless page.")
        else:
            result_CheckGoToSettingsButtonWireless = False
            print("Fail.")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CheckGoToSettingsButtonWireless = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckGoToSettingsButtonWireless, execution_time, current_time
    
def CheckConnectionClients():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckConnectionClients = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        ConnectedClients = WebDriverWait(d._driver, a.button_time).until(
        EC.presence_of_element_located((By.ID, 'Total_ConnectedClients'))
        )
        if ConnectedClients:
            print(f"Connected Clients: {ConnectedClients.text}")
        else:
            print("Connected Clients number not found.")
        time.sleep(5)
        d.scrolldown(300)
        clientInfo = WebDriverWait(d._driver, a.button_time).until(
        EC.presence_of_all_elements_located((By.CLASS_NAME, 'link_IconE_Allow'))
        )
        if clientInfo:
            print(f"Pass. Total clientInfo found: {len(clientInfo)}")
        else:
            print("Fail. No clientInfo found.")
        if ConnectedClients.text == str(len(clientInfo)):
            result_CheckConnectionClients = True
            print("Pass. Show current connection clients amount and list.")
        else:
            result_CheckConnectionClients = False
            print("Fail. Connected Clients numbers do not match.")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CheckConnectionClients = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckConnectionClients, execution_time, current_time
    
def CheckClientsVendor():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckClientsVendor = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("edit",a.editData1, sec=a.buffer_time)
        clientVendor = WebDriverWait(d._driver, a.button_time).until(
        EC.presence_of_all_elements_located((By.ID, 'client_Vendor'))
        )
        if clientVendor:
            vendor_text = clientVendor[0].text
            print("Vendor:", vendor_text)
            result_CheckClientsVendor = True
        else:
            print("Client Vendor not found.")
            result_CheckClientsVendor = False
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CheckClientsVendor = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckClientsVendor, execution_time, current_time

def AddClientManuallyAndCheck():
    result_AddClientManuallyAndCheck = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        input_name = "test1"
        input_Mac = "1a:03:4f:db:da:55"
        input_IP = a.client1IP
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("class", "client_add_Tag", sec=a.buffer_time)
        d.element("input", "client_Name",txt=input_name, sec=a.buffer_time)
        d.element("input", "client_editMac",txt=input_Mac, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=input_IP, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        d.element("id", "menu_Home", sec=a.buffer_time)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        client_name_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//div[@class="client_Name client_Name_Offline"]'))
        )
        print(f"Name: {client_name_element.text}")
        clientReserveIPs = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, 'client_IPv4Address'))
        )
        if clientReserveIPs:
            for clientReserveIP in clientReserveIPs:
                print(f"Reserve IP: {clientReserveIP.text}")
        else:
            print("Client Reserve IP not found.")
        d.element("edit",a.editData2, sec=a.buffer_time)
        ClientMAC = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.ID, 'client_MACAddress'))
        )
        if ClientMAC:
            MAC = ClientMAC[0].text
            print("MAC:", MAC)
        else:
            print("Client MAC not found.")
        if (
            client_name_element.text == input_name
            and clientReserveIPs
            and any(clientReserveIP.text == input_IP for clientReserveIP in clientReserveIPs)
        ):
            result_AddClientManuallyAndCheck = True
            print("Pass.Device name、mac address、reserve IP match to your settings.")
        else:
            result_AddClientManuallyAndCheck = False
            print("Fail. Client information does not match.")

    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_AddClientManuallyAndCheck = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AddClientManuallyAndCheck, execution_time, current_time

def AddClient1ReserveIPx199():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_AddClient1ReserveIPx199 = False
    input_IP = a.DUT_clientRSIP+"199"
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("edit",a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=input_IP, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        d.element("edit",a.editData1, sec=a.buffer_time)
        remaining_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//p[@class="Remainingtext"]/span'))
        )
        print(f"Remaining: {remaining_element.text}")
        if remaining_element.text == "23":
            result_AddClient1ReserveIPx199 = True
            print("Pass. Success to set this PC reserved IP to 192.168.x.199")
        else:
            print("Fail.")
            result_AddClient1ReserveIPx199 = False
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_AddClient1ReserveIPx199 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AddClient1ReserveIPx199, execution_time, current_time

def CheckReserveIPx199():
    result_CheckReserveIPx199 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    input_IP = a.DUT_clientRSIP+"199"
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        clientReserveIPs = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, 'client_IPv4Address'))
        )
        if clientReserveIPs:
            for clientReserveIP in clientReserveIPs:
                print(f"Reserve IP: {clientReserveIP.text}")
        else:
            print("Client Reserve IP not found.")
        if any(clientReserveIP.text == input_IP for clientReserveIP in clientReserveIPs):
            result_CheckReserveIPx199 = True
            print("Pass.Device name、mac address、reserve IP match to your settings.")
        else:
            result_CheckReserveIPx199 = False
            print("Fail. Client information does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_CheckReserveIPx199 = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckReserveIPx199, execution_time, current_time

def cmd_ReleaseAndRenew():
    file_path = f"{a.Log_folder}\\cmd_ReleaseAndRenew.log"
    logger = setup_logger(file_path)
    logger.info("Log message for cmd_ReleaseAndRenew")
    start_time = time.time()
    result_cmd_ReleaseAndRenew = False
    try:
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(30)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result_cmd_ReleaseAndRenew = True
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_cmd_ReleaseAndRenew = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_cmd_ReleaseAndRenew, execution_time, current_time

def CheckInternetConnected_PPPoE():
    file_path = f"{a.Log_folder}\\CheckInternetConnected_PPPoE.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckInternetConnected_PPPoE")
    result_CheckInternetConnected_PPPoE = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    ConnectionType = "Dynamic IP (PPPoE)"
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowConnectionType"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        if connection_type_element.text == ConnectionType:
            result_CheckInternetConnected_PPPoE = True
            logger.info("Pass. Internet status display correctly on Home page.")
            print("Pass.")
        else:
            result_CheckInternetConnected_PPPoE = False
            logger.error("Fail. Connection Type does not match.")
            print("Fail.")
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_CheckInternetConnected_PPPoE = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckInternetConnected_PPPoE, execution_time, current_time
    
def ChangePPPoEReconnectModeManual():
    file_path = f"{a.Log_folder}\\ChangePPPoEReconnectModeManual.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangePPPoEReconnectModeManual")
    result_ChangePPPoEReconnectModeManual = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "PPPoE", sec=a.buffer_time)
        d.element("downmenu", "Manual", sec=a.buffer_time)
        d.save_new()
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        NetworkStatus = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'index_ShowNetworkStatus'))
        )
        print(f"Status: {NetworkStatus.text}")
        Status = "Disconnected"
        if NetworkStatus.text == Status:
            result_ChangePPPoEReconnectModeManual = True
            logger.info("Pass. Internet status display correctly on Home page.")
            print("Pass.")
            time.sleep(5)
        else:
            result_ChangePPPoEReconnectModeManual = False
            logger.error("Fail. Connection Type does not match.")
            print("Fail.")
            time.sleep(5)
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_ChangePPPoEReconnectModeManual = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangePPPoEReconnectModeManual, execution_time, current_time

def ChangeDHCPToStaticIP():
    file_path = f"{a.Log_folder}\\ChangeDHCPToStaticIP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeDHCPToStaticIP")
    result_ChangeDHCPToStaticIP = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internet_image", sec=a.buffer_time)
        d.scrolldown(300)
        #IPAddress
        IPAddress1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowIPAddress"]'))
        )
        if IPAddress1:
            print(f"IP Address: {IPAddress1.text}")
        else:
            print("IP Address not found.")
        #SubnetMask
        SubnetMask1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSubnetMask"]'))
        )
        if SubnetMask1:
            print(f"Subnet Mask: {SubnetMask1.text}")
        else:
            print("Subnet Mask not found.")
        #DefaultGateway
        DefaultGateway1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowDefaultGateway"]'))
        )
        if DefaultGateway1:
            print(f"Default Gateway: {DefaultGateway1.text}")
        else:
            print("Default Gateway not found.")
        #PrimaryDNS
        PrimaryDNS1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowPrimaryDNS"]'))
        )
        if PrimaryDNS1:
            print(f"Primary DNS:",{PrimaryDNS1.text})
        else:
            print("Primary DNS not found.")
        #ChangeInternetSettings
        input_IPAddress = IPAddress1.text
        input_SubnetMask = SubnetMask1.text
        input_DefaultGateway = DefaultGateway1.text
        input_PrimaryDNS = PrimaryDNS1.text
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "Static IP", sec=a.buffer_time)
        d.element("input", "iPAddress_StaticIP",txt=input_IPAddress, sec=a.buffer_time)
        d.element("input", "subnetMask_StaticIP",txt=input_SubnetMask, sec=a.buffer_time)
        d.element("input", "defaultGateway_StaticIP",txt=input_DefaultGateway, sec=a.buffer_time)
        d.element("input", "primaryDNSAddress_StaticIP",txt=input_PrimaryDNS, sec=a.buffer_time)
        d.save_new()
        #CheckSetting
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internet_image", sec=a.buffer_time)
        d.scrolldown(300)
        #IPAddress
        IPAddress2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowIPAddress"]'))
        )
        if IPAddress2:
            print(f"IP Address: {IPAddress2.text}")
        else:
            print("IP Address not found.")
        #SubnetMask
        SubnetMask2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSubnetMask"]'))
        )
        if SubnetMask2:
            print(f"Subnet Mask: {SubnetMask2.text}")
        else:
            print("Subnet Mask not found.")
        #DefaultGateway
        DefaultGateway2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowDefaultGateway"]'))
        )
        if DefaultGateway2:
            print(f"Default Gateway: {DefaultGateway2.text}")
        else:
            print("Default Gateway not found.")
        #PrimaryDNS
        PrimaryDNS2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowPrimaryDNS"]'))
        )
        if PrimaryDNS2:
            print(f"Primary DNS: {PrimaryDNS2.text}")
        else:
            print("Primary DNS not found.")
        
        if (
            IPAddress2.text == input_IPAddress
            and SubnetMask2.text == input_SubnetMask
            and DefaultGateway2.text == input_DefaultGateway
            and PrimaryDNS2.text == input_PrimaryDNS
        ):
            result_ChangeDHCPToStaticIP = True
            logger.info("Pass.IPAddress address,SubnetMask,DefaultGateway,PrimaryDNS match to your settings.")
            print("Pass.")
        else:
            result_ChangeDHCPToStaticIP = False
            logger.error("Fail. DUT information does not match.")
            print("Fail.")
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_ChangeDHCPToStaticIP = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeDHCPToStaticIP, execution_time, current_time

def CheckInternetConnected_StaticIP():
    file_path = f"{a.Log_folder}\\CheckInternetConnected_StaticIP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckInternetConnected_StaticIP")
    result_CheckInternetConnected_StaticIP = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    ConnectionType = "Static IP (Static)"
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowConnectionType"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        if connection_type_element.text == ConnectionType:
            result_CheckInternetConnected_StaticIP = True
            logger.info("Pass. Internet status display correctly on Home page.")
            print("Pass.")
        else:
            result_CheckInternetConnected_StaticIP = False
            logger.error("Fail. Connection Type does not match.")
            print("Fail.")
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_CheckInternetConnected_StaticIP = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckInternetConnected_StaticIP, execution_time, current_time
    
def Checkv6_AutoDetection():
    result_Checkv6_AutoDetection = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = ["PPPoE", "Auto Detection"]
        if connection_type_element.text in ConnectionType:
            result_Checkv6_AutoDetection = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_Checkv6_AutoDetection = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_Checkv6_AutoDetection = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_Checkv6_AutoDetection, execution_time, current_time
    
def ChangeAndCheckv6AutoDetection():
    result_ChangeAndCheckv6AutoDetection = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d.element("downmenu", "Auto Detection", sec=a.buffer_time)
        d.save_new()
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = ["PPPoE", "Auto Detection"]
        if connection_type_element.text in ConnectionType:
            result_ChangeAndCheckv6AutoDetection = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_ChangeAndCheckv6AutoDetection = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_ChangeAndCheckv6AutoDetection = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeAndCheckv6AutoDetection, execution_time, current_time

def ChangeAndCheckv6_SLAACDHCPv6():
    result_ChangeAndCheckv6_SLAACDHCPv6 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d.element("downmenu", "Auto Configuration (SLAAC/DHCPv6)", sec=a.buffer_time)
        d.save_new()
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = "Auto Configuration (SLAAC/DHCPv6)"
        if connection_type_element.text == ConnectionType:
            result_ChangeAndCheckv6_SLAACDHCPv6 = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_ChangeAndCheckv6_SLAACDHCPv6 = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_ChangeAndCheckv6_SLAACDHCPv6 = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeAndCheckv6_SLAACDHCPv6, execution_time, current_time

def ChangeAndCheckv6_PPPoE():
    file_path = f"{a.Log_folder}\\ChangeAndCheckv6_PPPoE.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeAndCheckv6_PPPoE")
    result_ChangeAndCheckv6_PPPoE = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d._driver.refresh()
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d._driver.refresh()
        d.element("downmenu", "PPPoE", sec=a.buffer_time)
        d.save_new()
        time.sleep(a.reboot_time)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = ["PPPoE", "Auto Detection"]
        if connection_type_element.text in ConnectionType:
            result_ChangeAndCheckv6_PPPoE = True
            logger.info("Pass. Internet status display correctly on Home page.")
            print("Pass.")
            time.sleep(10)
        else:
            result_ChangeAndCheckv6_PPPoE = False
            logger.error("Fail. Connection Type does not match.")
            print("Fail.")
            time.sleep(a.reboot_time)
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_ChangeAndCheckv6_PPPoE = False
            time.sleep(a.reboot_time)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeAndCheckv6_PPPoE, execution_time, current_time

def CheckGoToSettingsButtonInternet_v6():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckGoToSettingsButtonInternet_v6 = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.element("id", "goto_internet_v6", sec=a.buffer_time)
        time.sleep(10)
        Internet = d._driver.find_elements("xpath",'//*[contains(text(),"All of your IPv6 Internet and network connection details are displayed on this page.")]')
        if len(Internet) > 0:
            result_CheckGoToSettingsButtonInternet_v6 = True
            print("Pass.The Home page will switch to DHCP WAN setting  on Internet page.")
        else:
            result_CheckGoToSettingsButtonInternet_v6 = False
            print("Fail.")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CheckGoToSettingsButtonInternet_v6 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckGoToSettingsButtonInternet_v6, execution_time, current_time

def ChangeAndCheckv6_LocalConnectivityOnly():
    result_ChangeAndCheckv6_LocalConnectivityOnly = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d._driver.refresh()
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d._driver.refresh()
        d.element("downmenu", "Local Connectivity Only", sec=a.buffer_time)
        d.save_new()
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = "Local Connectivity Only"
        if connection_type_element.text == ConnectionType:
            result_ChangeAndCheckv6_LocalConnectivityOnly = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_ChangeAndCheckv6_LocalConnectivityOnly = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_ChangeAndCheckv6_LocalConnectivityOnly = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeAndCheckv6_LocalConnectivityOnly, execution_time, current_time

def ConnectAndCheckv6_AutoDetection():
    file_path = f"{a.Log_folder}\\ConnectAndCheckv6_AutoDetection.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ConnectAndCheckv6_AutoDetection")
    result_ConnectAndCheckv6_AutoDetection = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.scrolldown(300)
        connect_button = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'RenewRelease_btn'))
        )
        connect_button.click()
        try:
            disconnect_button = WebDriverWait(d._driver, a.button_time).until(
                EC.text_to_be_present_in_element((By.ID, 'RenewRelease_btn'), 'Disconnect')
            )
            print("Connect Successfully converted to Disconnect.")
        except TimeoutException:
            print("If Connect does not change to Disconnect within 30 seconds, click the Connect button again.")
            connect_button.click()
        time.sleep(150)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = "Auto Detection"
        if connection_type_element.text == ConnectionType:
            result_ConnectAndCheckv6_AutoDetection = True
            logger.info("Pass. Internet status display correctly on Home page.")
            print("Pass.")
        else:
            result_ConnectAndCheckv6_AutoDetection = False
            logger.error("Fail. Connection Type does not match.")
            print("Fail.")
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_ConnectAndCheckv6_AutoDetection = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ConnectAndCheckv6_AutoDetection, execution_time, current_time
##v4
def ConnectAndCheck_PPPoE_v4():
    file_path = f"{a.Log_folder}\\ConnectAndCheck_PPPoE_v4.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ConnectAndCheck_PPPoE_v4")
    result_ConnectAndCheck_PPPoE_v4 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.scrolldown(300)
        connect_button = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'RenewRelease_btn'))
        )
        connect_button.click()
        try:
            disconnect_button = WebDriverWait(d._driver, a.button_time).until(
                EC.text_to_be_present_in_element((By.ID, 'RenewRelease_btn'), 'Disconnect')
            )
            print("Connect Successfully converted to Disconnect.")
        except TimeoutException:
            print("If Connect does not change to Disconnect within 30 seconds, click the Connect button again.")
            connect_button.click()
        time.sleep(120)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        NetworkStatus = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowNetworkStatus"]'))
        )
        print(f"Network Status: {NetworkStatus.text}")
        Status = "Connected"
        if NetworkStatus.text == Status:
            result_ConnectAndCheck_PPPoE_v4 = True
            logger.info("Pass. Internet status display correctly on Home page.")
            print("Pass.")
        else:
            result_ConnectAndCheck_PPPoE_v4 = False
            logger.error("Fail. Connection Type does not match.")
            print("Fail.")
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_ConnectAndCheck_PPPoE_v4 = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ConnectAndCheck_PPPoE_v4, execution_time, current_time

def DisconnectAndCheck_PPPoE_v4():
    file_path = f"{a.Log_folder}\\DisconnectAndCheck_PPPoE_v4.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisconnectAndCheck_PPPoE_v4")
    result_DisconnectAndCheck_PPPoE_v4 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.scrolldown(300)
        Disconnect = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'RenewRelease_btn'))
        )
        Disconnect.click()
        try:
            Disconnect = WebDriverWait(d._driver, a.button_time).until(
                EC.text_to_be_present_in_element((By.ID, 'RenewRelease_btn'), 'Connect')
            )
            print("Disconnect Successfully converted to Connect.")
        except TimeoutException:
            print("If Disconnect does not change to Connect within 30 seconds, click the Disconnect button again.")
            Disconnect.click()
        time.sleep(120)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        NetworkStatus = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowNetworkStatus"]'))
        )
        print(f"Network Status: {NetworkStatus.text}")
        Status = "Disconnected"
        if NetworkStatus.text == Status:
            result_DisconnectAndCheck_PPPoE_v4 = True
            logger.info("Pass. Internet status display correctly on Home page.")
            print("Pass.")
        else:
            result_DisconnectAndCheck_PPPoE_v4 = False
            logger.error("Fail. Connection Type does not match.")
            print("Fail.")
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_DisconnectAndCheck_PPPoE_v4 = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisconnectAndCheck_PPPoE_v4, execution_time, current_time

def Connect_v4_AndCheck_PPPoE_v6():
    file_path = f"{a.Log_folder}\\Connect_v4_AndCheck_PPPoE_v6.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Connect_v4_AndCheck_PPPoE_v6")
    result_Connect_v4_AndCheck_PPPoE_v6 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.scrolldown(300)
        connect_button = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'RenewRelease_btn'))
        )
        connect_button.click()
        try:
            disconnect_button = WebDriverWait(d._driver, a.button_time).until(
                EC.text_to_be_present_in_element((By.ID, 'RenewRelease_btn'), 'Disconnect')
            )
            print("Connect Successfully converted to Disconnect.")
        except TimeoutException:
            print("If Connect does not change to Disconnect within 30 seconds, click the Connect button again.")
            connect_button.click()
        time.sleep(120)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        NetworkStatus = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="IPv6_NetworkStatus"]'))
        )
        print(f"Network Status: {NetworkStatus.text}")
        Status = "Connected"
        if NetworkStatus.text == Status:
            result_Connect_v4_AndCheck_PPPoE_v6 = True
            logger.info("Pass. Internet status display correctly on Home page.")
            print("Pass.")
        else:
            result_Connect_v4_AndCheck_PPPoE_v6 = False
            logger.error("Fail. Connection Type does not match.")
            print("Fail.")
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_Connect_v4_AndCheck_PPPoE_v6 = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Connect_v4_AndCheck_PPPoE_v6, execution_time, current_time

def Disconnect_v4_AndCheck_PPPoE_v6():
    result_Disconnect_v4_AndCheck_PPPoE_v6 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.scrolldown(300)
        Disconnect = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'RenewRelease_btn'))
        )
        Disconnect.click()
        disconnect_success = False
        max_attempts = 2
        for attempt in range(max_attempts):
            try:
                WebDriverWait(d._driver, a.button_time).until(
                    EC.text_to_be_present_in_element((By.ID, 'RenewRelease_btn'), 'Connect')
                )
                disconnect_success = True
                print("Disconnect Successfully converted to Connect.")
                break
            except TimeoutException:
                print(f"在30秒內 Disconnect 沒有轉為 Connect，第 {attempt + 1} 次重試。")
                Disconnect.click()
        if not disconnect_success:
            print("在所有嘗試中，Disconnect 仍未轉為 Connect。")
        time.sleep(60)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        NetworkStatus = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="IPv6_NetworkStatus"]'))
        )
        print(f"Network Status: {NetworkStatus.text}")
        Status = "Disconnected"
        if NetworkStatus.text == Status:
            result_Disconnect_v4_AndCheck_PPPoE_v6 = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_Disconnect_v4_AndCheck_PPPoE_v6 = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_Disconnect_v4_AndCheck_PPPoE_v6 = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_Disconnect_v4_AndCheck_PPPoE_v6, execution_time, current_time

def EditClientNameAndDelete():
    file_path = f"{a.Log_folder}\\EditClientNameAndDelete.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditClientNameAndDelete")
    result_EditClientNameAndDelete = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        # default
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        client_name_elements = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, "client_Name"))
        )
        defaultClientNames = [element.text for element in client_name_elements]
        print(f"The client names are: {defaultClientNames}")
        # change
        input_ClientName = "1111111111哈囉你好嗎1111111111111111"
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("edit", "editData(1)", sec=a.buffer_time)
        d.element("input", "client_Name", txt=input_ClientName, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(60)
        client_name_elements_after_change = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, "client_Name"))
        )
        changedClientNames = [element.text for element in client_name_elements_after_change]
        print(f"The client names after change are: {changedClientNames}")

        if input_ClientName in changedClientNames:
            logger.info(f"Pass. The client name is correct.")
            print(f"Pass. The client name is correct")
            result_EditClientNameAndDelete.append(True)
        else:
            logger.error("Fail.The client name after change is error.")
            print("Fail.")
            result_EditClientNameAndDelete.append(False)
        # delete
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("edit", "editData(1)", sec=a.buffer_time)
        client_name_input = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.XPATH, '//input[@name="client_Name"]'))
        )
        client_name_input.clear()
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="disable", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        client_name_elements_after_delete = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, "client_Name"))
        )
        client_names_after_delete = [element.text for element in client_name_elements_after_delete]
        print(f"The client names after delete are: {client_names_after_delete}")

        if client_names_after_delete == defaultClientNames:
            logger.info(f"Pass. The client names are: {client_names_after_delete}")
            print("Pass")
            result_EditClientNameAndDelete.append(True)
        else:
            logger.error("Fail. Client name settings after delete are error.")
            print("Fail.")
            result_EditClientNameAndDelete.append(False)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_EditClientNameAndDelete = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print(result_EditClientNameAndDelete)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditClientNameAndDelete, execution_time, current_time
    
def ping1472():
    file_path = f"{a.Log_folder}\\ping1472.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ping1472")
    def execute_ping(address, options, count):
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", address, *options, "-n", str(count)], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(options, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("需要切割封包，但已設定 DF 旗標。" in result.stdout or
            "目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("需要切割封包，但已設定 DF 旗標。")+ result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.error("Fail. More than 4 occurrences of connection issues.")
                print("Fail.")
                return False
            else:
                logger.info("Pass. Connection issues found but not exceeding 4 occurrences.")
                print("Pass.")
                return True
        else:
            logger.info("Pass. No connection issues found.")
            print("Pass.")
            return True           
    try:
        start_time = time.time()
        result_ping1472 = []
        addresses = ["168.95.1.1"]
        options = ["-f", "-l", "1472"]
        count = 10
        for address in addresses:
            result_ping1472.append(execute_ping(address, options, count))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_ping1472 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ping1472, execution_time, current_time

def ping1473():
    file_path = f"{a.Log_folder}\\ping1473.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ping1473")
    def execute_ping(address, options, count, success_string):
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", address, *options, "-n", str(count)], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(options, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if success_string in result.stdout:
            logger.info("Pass.Packet needs to be cut, but DF flag is set.")
            print("Pass.")
            return True
        else:
            logger.error("Fail.Result is wrong.")
            print("Fail.")
            return False
    try:
        start_time = time.time()
        result_ping1473 = []
        addresses = ["168.95.1.1"]
        options = ["-f", "-l", "1473"]
        count = 10
        success_string = "需要切割封包，但已設定 DF 旗標。"
        for address in addresses:
            result_ping1473.append(execute_ping(address, options, count, success_string))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_ping1473 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ping1473, execution_time, current_time

def ChangeDHCPInternet():
    file_path = f"{a.Log_folder}\\ChangeDHCPInternet.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeDHCPInternet")
    result_ChangeDHCPInternet = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        MACAddressClone = a.MACAddress
        d.element("input","macAddress_DynamicIP", txt = MACAddressClone, sec=a.buffer_time)
        d.save_new()
        #check
        d.open(url, a.DUT_admin_pwd)
        NewMACAddress = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowWanMacAddress"]'))
        )
        MAC = NewMACAddress.text
        print(f"The New MAC Address after change is: {MAC}")
        if MAC == MACAddressClone:
            logger.info(f"Pass. The New MAC Address is: {MAC}")
            print("Pass")
            result_ChangeDHCPInternet = True
        else:
            logger.error("Fail.The New MAC Address after change is error.")
            print("Fail")
            result_ChangeDHCPInternet = False
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangeDHCPInternet = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeDHCPInternet, execution_time, current_time    

def ChangeDHCPDNS3333():
    file_path = f"{a.Log_folder}\\ChangeDHCPDNS3333.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeDHCPDNS3333")
    result_ChangeDHCPDNS3333 = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        input_hostName = "DUTmodel"
        d.element("input","hostName_DynamicIP", txt = input_hostName, sec=a.buffer_time)
        input_PrimaryDNSServer = "2.2.2.2"
        d.element("input","primaryDNSAddress_DynamicIP", txt = input_PrimaryDNSServer, sec=a.buffer_time)
        input_SecondaryDNSServer = "3.3.3.3"
        d.element("input","secondaryDNSAddress_DynamicIP", txt = input_SecondaryDNSServer, sec=a.buffer_time)
        d.element("input","mtu_DynamicIP_Input", txt = "1400", sec=a.buffer_time)
        MACAddressClone = a.MACAddress
        d.element("input","macAddress_DynamicIP", txt = MACAddressClone, sec=a.buffer_time)
        d.save_new()
        #check2.2.2.2
        d.open(url, a.DUT_admin_pwd)
        NewPrimaryDNSServer = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowPrimaryDNS"]'))
        )
        PrimaryDNS = NewPrimaryDNSServer.text
        print(f"The New Primary DNS Server after change is: {PrimaryDNS}")
        if PrimaryDNS == input_PrimaryDNSServer:
            logger.info(f"Pass. The New Primary DNS Server is: {PrimaryDNS}")
            print("Pass")
            result_ChangeDHCPDNS3333.append(True)
        else:
            logger.error("Fail.The New Primary DNS Server after change is error.")
            print("Fail")
            result_ChangeDHCPDNS3333.append(False)
        #check3.3.3.3
        d.open(url, a.DUT_admin_pwd)
        NewsecondaryDNS = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSecondaryDNS"]'))
        )
        secondaryDNS = NewsecondaryDNS.text
        print(f"The New secondary DNS Server after change is: {secondaryDNS}")
        if secondaryDNS == input_SecondaryDNSServer:
            logger.info(f"Pass. The New secondary DNS Server is: {secondaryDNS}")
            print("Pass")
            result_ChangeDHCPDNS3333.append(True)
        else:
            logger.error("Fail.The New secondary DNS Server after change is error.")
            print("Fail.")
            result_ChangeDHCPDNS3333.append(False)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangeDHCPDNS3333 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeDHCPDNS3333, execution_time, current_time

def ping1372():
    file_path = f"{a.Log_folder}\\ping1372.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ping1372")
    def execute_ping(address, options, count):
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", address, *options, "-n", str(count)], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(options, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("需要切割封包，但已設定 DF 旗標。" in result.stdout or
            "目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("需要切割封包，但已設定 DF 旗標。")+ result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.error("Fail. More than 4 occurrences of connection issues.")
                print("Fail.")
                return False
            else:
                logger.info("Pass. Connection issues found but not exceeding 4 occurrences.")
                print("Pass.")
                return True
        else:
            logger.info("Pass. No connection issues found.")
            print("Pass.")
            return True           
    try:
        start_time = time.time()
        result_ping1372 = []
        addresses = ["168.95.1.1"]
        options = ["-f", "-l", "1372"]
        count = 10
        for address in addresses:
            result_ping1372.append(execute_ping(address, options, count))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_ping1372 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ping1372, execution_time, current_time

def ping1373():
    file_path = f"{a.Log_folder}\\ping1373.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ping1373")
    def execute_ping(address, options, count, success_string):
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", address, *options, "-n", str(count)], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(options, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if success_string in result.stdout:
            logger.info("Pass.Packet needs to be cut, but DF flag is set.")
            print("Pass.")
            return True
        else:
            logger.error("Fail.Result is wrong.")
            print("Fail.")
            return False
    try:
        start_time = time.time()
        result_ping1373 = []
        addresses = ["168.95.1.1"]
        options = ["-f", "-l", "1373"]
        count = 10
        success_string = "需要切割封包，但已設定 DF 旗標。"
        for address in addresses:
            result_ping1373.append(execute_ping(address, options, count, success_string))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_ping1373 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ping1373, execution_time, current_time

def ChangeDHCPDNS8888():
    file_path = f"{a.Log_folder}\\ChangeDHCPDNS8888.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeDHCPDNS8888")
    result_ChangeDHCPDNS8888 = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        input_SecondaryDNSServer = "8.8.8.8"
        d.element("input","secondaryDNSAddress_DynamicIP", txt = input_SecondaryDNSServer, sec=a.buffer_time)
        d.save_new()
        #check3.3.3.3
        d.open(url, a.DUT_admin_pwd)
        NewsecondaryDNS = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSecondaryDNS"]'))
        )
        secondaryDNS = NewsecondaryDNS.text
        print(f"The New Primary DNS Server after change is: {secondaryDNS}")
        if secondaryDNS == input_SecondaryDNSServer:
            logger.info(f"Pass. The New secondary DNS Server is: {secondaryDNS}")
            print("Pass")
            result_ChangeDHCPDNS8888.append(True)
        else:
            logger.error("Fail.The New secondary DNS Server after change is error.")
            print("Fail.")
            result_ChangeDHCPDNS8888.append(False)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangeDHCPDNS8888 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeDHCPDNS8888, execution_time, current_time 

def ChangeStaticInternet():
    file_path = f"{a.Log_folder}\\ChangeStaticInternet.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeStaticInternet")
    result_ChangeStaticInternet = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        MACAddressClone = a.MACAddress
        d.element("input","macAddress_StaticIP", txt = MACAddressClone, sec=a.buffer_time)
        d.save_new()
        #check
        d.open(url, a.DUT_admin_pwd)
        NewMACAddress = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowWanMacAddress"]'))
        )
        MAC = NewMACAddress.text  # Use .text instead of .txt
        print(f"The New MAC Address after change is: {MAC}")
        if MAC == MACAddressClone:
            logger.info(f"Pass. The New MAC Address is: {MAC}")
            print("Pass")
            result_ChangeStaticInternet = True
        else:
            logger.error("Fail.The New MAC Address after change is error.")
            print("Fail.")
            result_ChangeStaticInternet = False
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangeStaticInternet = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeStaticInternet, execution_time, current_time
    
def ChangeStaticDNS3333():
    file_path = f"{a.Log_folder}\\ChangeStaticDNS3333.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeStaticDNS3333")
    result_ChangeStaticDNS3333 = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        input_PrimaryDNSServer = "2.2.2.2"
        d.element("input","primaryDNSAddress_StaticIP", txt = input_PrimaryDNSServer, sec=a.buffer_time)
        input_SecondaryDNSServer = "3.3.3.3"
        d.element("input","secondaryDNSAddress_StaticIP", txt = input_SecondaryDNSServer, sec=a.buffer_time)
        d.element("input","mtu_StaticIP_Input", txt = "1400", sec=a.buffer_time)
        MACAddressClone = a.MACAddress
        d.element("input","macAddress_StaticIP", txt = MACAddressClone, sec=a.buffer_time)
        d.save_new()
        #check2.2.2.2
        d.open(url, a.DUT_admin_pwd)
        NewPrimaryDNSServer = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowPrimaryDNS"]'))
        )
        PrimaryDNS = NewPrimaryDNSServer.text
        print(f"The New Primary DNS Server after change is: {PrimaryDNS}")
        if PrimaryDNS == input_PrimaryDNSServer:
            logger.info(f"Pass. The New Primary DNS Server is: {PrimaryDNS}")
            print("Pass")
            result_ChangeStaticDNS3333.append(True)
        else:
            logger.error("Fail.The New Primary DNS Server after change is error.")
            print("Fail.")
            result_ChangeStaticDNS3333.append(False)
        #check3.3.3.3
        d.open(url, a.DUT_admin_pwd)
        NewsecondaryDNS = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSecondaryDNS"]'))
        )
        secondaryDNS = NewsecondaryDNS.text
        print(f"The New secondary DNS Server after change is: {secondaryDNS}")
        if secondaryDNS == input_SecondaryDNSServer:
            logger.info(f"Pass. The New secondary DNS Server is: {secondaryDNS}")
            print("Pass")
            result_ChangeStaticDNS3333.append(True)
        else:
            logger.error("Fail.The New secondary DNS Server after change is error.")
            print("Fail.")
            result_ChangeStaticDNS3333.append(False)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangeStaticDNS3333 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeStaticDNS3333, execution_time, current_time

def ChangeStaticDNS8888():
    file_path = f"{a.Log_folder}\\ChangeStaticDNS8888.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeStaticDNS8888")
    result_ChangeStaticDNS8888 = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        input_SecondaryDNSServer = "8.8.8.8"
        d.element("input","secondaryDNSAddress_StaticIP", txt = input_SecondaryDNSServer, sec=a.buffer_time)
        d.save_new()
        #check8.8.8.8
        d.open(url, a.DUT_admin_pwd)
        NewsecondaryDNS = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSecondaryDNS"]'))
        )
        secondaryDNS = NewsecondaryDNS.text
        print(f"The New secondary DNS Server after change is: {secondaryDNS}")
        if secondaryDNS == input_SecondaryDNSServer:
            logger.info(f"Pass. The New secondary DNS Server is: {secondaryDNS}")
            print("Pass")
            result_ChangeStaticDNS8888.append(True)
        else:
            logger.error("Fail.The New secondary DNS Server after change is error.")
            print("Fail.")
            result_ChangeStaticDNS8888.append(False)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangeStaticDNS8888 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeStaticDNS8888, execution_time, current_time
    
def CheckCanGoToDlink():
    file_path = f"{a.Log_folder}\\CheckCanGoToDlink.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCanGoToDlink")
    start_time = time.time()
    driver = webdriver.Chrome()
    result_CheckCanGoToDlink = []
    websites = [
        {"url": "http://www.dlink.com", "text": "D-Link"}
    ]
    try:
        driver.set_window_size(a.W, a.H)
        for website in websites:
            time.sleep(10)
            driver.get(website["url"])
            time.sleep(5)
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["text"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        result_CheckCanGoToDlink.append(True)
                        found = True
                        break
                except Exception:
                    pass
            if not found:
                logger.error("Fail to Check Can Go To Dlink.")
                print("Fail.")
                result_CheckCanGoToDlink.append(False)
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_CheckCanGoToDlink.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCanGoToDlink, execution_time, current_time

def CheckCanNotGoToDlink():
    file_path = f"{a.Log_folder}\\CheckCanNotGoToDlink.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCanNotGoToDlink")
    start_time = time.time()
    result = []
    websites = [
        {"url": "http://www.dlink.com", "text": "無法連上這個網站"},
    ]
    try:
        driver = webdriver.Chrome()
        driver.set_window_size(a.W, a.H)
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{website["text"]}")]')))
            logger.info(f"Pass. URL: {website['url']}, Text: {website['text']}")
            print("Pass")
            result.append(True)
    except Exception as e:
        if "net::ERR_NAME_NOT_RESOLVED" in str(e):
            logger.info(f"Pass. URL: {website['url']} encountered ERR_NAME_NOT_RESOLVED")
            print("Pass")
            result.append(True)
            return any(result), time.time() - start_time, datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        else:
            result.append(False)
            logger.error(f"An error occurred: {str(e)}")
            print("Fail")
    finally:
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result)
        logging.shutdown()
        return any(result), execution_time, current_time

def ChangePPPoEDNS3333():
    file_path = f"{a.Log_folder}\\ChangePPPoEDNS3333.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangePPPoEDNS3333")
    result_ChangePPPoEDNS3333 = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        input_PrimaryDNSServer = "2.2.2.2"
        d.element("input","primaryDNSAddress_PPPoE", txt = input_PrimaryDNSServer, sec=a.buffer_time)
        input_SecondaryDNSServer = "3.3.3.3"
        d.element("input","secondaryDNSAddress_PPPoE", txt = input_SecondaryDNSServer, sec=a.buffer_time)
        d.save_new()
        #check2.2.2.2
        d.open(url, a.DUT_admin_pwd)
        NewPrimaryDNSServer = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowPrimaryDNS"]'))
        )
        PrimaryDNS = NewPrimaryDNSServer.text
        print(f"The New Primary DNS Server after change is: {PrimaryDNS}")
        if PrimaryDNS == input_PrimaryDNSServer:
            logger.info(f"Pass. The New Primary DNS Server is: {PrimaryDNS}")
            print("Pass")
            result_ChangePPPoEDNS3333.append(True)
        else:
            logger.error("Fail.The New Primary DNS Server after change is error.")
            print("Fail.")
            result_ChangePPPoEDNS3333.append(False)
        #check3.3.3.3
        d.open(url, a.DUT_admin_pwd)
        NewsecondaryDNS = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSecondaryDNS"]'))
        )
        secondaryDNS = NewsecondaryDNS.text
        print(f"The New secondary DNS Server after change is: {secondaryDNS}")
        if secondaryDNS == input_SecondaryDNSServer:
            logger.info(f"Pass. The New secondary DNS Server is: {secondaryDNS}")
            print("Pass")
            result_ChangePPPoEDNS3333.append(True)
        else:
            logger.error("Fail.The New secondary DNS Server after change is error.")
            print("Fail.")
            result_ChangePPPoEDNS3333.append(False)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangePPPoEDNS3333 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangePPPoEDNS3333, execution_time, current_time

def ChangePPPoEDNS8888():
    file_path = f"{a.Log_folder}\\ChangePPPoEDNS8888.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangePPPoEDNS8888")
    result_ChangePPPoEDNS8888 = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        input_SecondaryDNSServer = "8.8.8.8"
        d.element("input","secondaryDNSAddress_PPPoE", txt = input_SecondaryDNSServer, sec=a.buffer_time)
        d.save_new()
        #check8.8.8.8
        d.open(url, a.DUT_admin_pwd)
        NewsecondaryDNS = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSecondaryDNS"]'))
        )
        secondaryDNS = NewsecondaryDNS.text
        print(f"The New secondary DNS Server after change is: {secondaryDNS}")
        if secondaryDNS == input_SecondaryDNSServer:
            logger.info(f"Pass. The New secondary DNS Server is: {secondaryDNS}")
            print("Pass")
            result_ChangePPPoEDNS8888.append(True)
        else:
            logger.error("Fail.The New secondary DNS Server after change is error.")
            print("Fail.")
            result_ChangePPPoEDNS8888.append(False)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangePPPoEDNS8888 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangePPPoEDNS8888, execution_time, current_time

def CheckCanGoToYahoo():
    file_path = f"{a.Log_folder}\\CheckCanGoToYahoo.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCanGoToYahoo")
    start_time = time.time()
    driver = webdriver.Chrome()
    result_CheckCanGoToYahoo = []
    websites = [
        {"url": "http://yahoo.com", "text": "yahoo"}
    ]
    try:
        driver.set_window_size(a.W, a.H)
        for website in websites:
            time.sleep(10)
            driver.get(website["url"])
            time.sleep(5)
            wait = WebDriverWait(driver, a.button_time)
            found = False
            for text in website["text"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass")
                        result_CheckCanGoToYahoo.append(True)
                        found = True
                        break
                except Exception:
                    pass
            if not found:
                logger.error("Fail to Check Can Go To Yahoo.")
                print("Fail.")
                result_CheckCanGoToYahoo.append(False)
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_CheckCanGoToYahoo.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCanGoToYahoo, execution_time, current_time

def ping1322():
    file_path = f"{a.Log_folder}\\ping1322.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ping1322")
    def execute_ping(address, options, count):
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", address, *options, "-n", str(count)], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(options, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("需要切割封包，但已設定 DF 旗標。" in result.stdout or
            "目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("需要切割封包，但已設定 DF 旗標。")+ result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.error("Fail. More than 4 occurrences of connection issues.")
                print("Fail.")
                return False
            else:
                logger.info("Pass. Connection issues found but not exceeding 4 occurrences.")
                print("Pass.")
                return True
        else:
            logger.info("Pass. No connection issues found.")
            print("Pass.")
            return True
    try:
        start_time = time.time()
        result_ping1322 = []
        addresses = ["168.95.1.1"]
        options = ["-f", "-l", "1322"]
        count = 10
        for address in addresses:
            result_ping1322.append(execute_ping(address, options, count))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ping1322 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ping1322, execution_time, current_time

def ping1323():
    file_path = f"{a.Log_folder}\\ping1323.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ping1323")
    def execute_ping(address, options, count, success_string):
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", address, *options, "-n", str(count)], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(options, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if success_string in result.stdout:
            logger.info("Pass.Packet needs to be cut, but DF flag is set.")
            print("Pass.")
            return True
        else:
            logger.error("Fail.Result is wrong.")
            print("Fail.")
            return False
    try:
        start_time = time.time()
        result_ping1323 = []
        addresses = ["168.95.1.1"]
        options = ["-f", "-l", "1323"]
        count = 10
        success_string = "需要切割封包，但已設定 DF 旗標。"
        for address in addresses:
            result_ping1323.append(execute_ping(address, options, count, success_string))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_ping1323 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ping1323, execution_time, current_time

def ping1300():
    def execute_ping(address, options, count):
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", address, *options, "-n", str(count)], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(options, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("需要切割封包，但已設定 DF 旗標。" in result.stdout or
            "目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("需要切割封包，但已設定 DF 旗標。")+ result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                print("Fail. More than 4 occurrences of connection issues.")
                return False
            else:
                print("Pass. Connection issues found but not exceeding 4 occurrences.")
                return True
        else:
            print("Pass. No connection issues found.")
            return True
    try:
        start_time = time.time()
        result_ping1300 = []
        addresses = ["168.95.1.1"]
        options = ["-f", "-l", "1300"]
        count = 10
        for address in addresses:
            result_ping1300.append(execute_ping(address, options, count))
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ping1300 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ping1300, execution_time, current_time

def ping1550():
    file_path = f"{a.Log_folder}\\ping1550.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ping1550")
    def execute_ping(address, options, count, success_string):
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", address, *options, "-n", str(count)], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(options, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if success_string in result.stdout:
            logger.info("Pass.Packet needs to be cut, but DF flag is set.")
            print("Pass.")
            return True
        else:
            logger.error("Fail.Result is wrong.")
            print("Fail.")
            return False
    try:
        start_time = time.time()
        result_ping1550 = []
        addresses = ["168.95.1.1"]
        options = ["-f", "-l", "1550"]
        count = 10
        success_string = "需要切割封包，但已設定 DF 旗標。"
        for address in addresses:
            result_ping1550.append(execute_ping(address, options, count, success_string))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_ping1550 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ping1550, execution_time, current_time

def Test_v6_Web():
    start_time = time.time()
    driver = webdriver.Chrome()
    result_Test_v6_Web = []
    driver.set_window_size(a.W, a.H)
    time.sleep(5)
    driver.get("https://www.test-ipv6.com/")
    try:
        time.sleep(5)
        wait = WebDriverWait(driver, a.button_time)
        page_content = driver.page_source
        if "10/10" in page_content:
            print("Pass. The v6 Test result is: 10/10")
            result_Test_v6_Web.append(True)
        else:
            print("Fail. The v6 Test result is not 10/10.")
            result_Test_v6_Web.append(False)
    except Exception as e:
        print(f"Fail. Exception: {e}")
        result_Test_v6_Web = False
    finally:
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_Test_v6_Web, execution_time, current_time

def v6_SLAAC_RDNSS():
    result_v6_SLAAC_RDNSS = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d.scrolldown(600)
        d.element("xpath", "//*[@id='advButtonv6_span']", sec=a.buffer_time)
        d.element("downmenu", "SLAAC+RDNSS", sec=a.buffer_time)
        d.save_new()
        time.sleep(60)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = ["PPPoE", "Auto Detection"]
        if connection_type_element.text in ConnectionType:
            result_v6_SLAAC_RDNSS = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_v6_SLAAC_RDNSS = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_v6_SLAAC_RDNSS = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_v6_SLAAC_RDNSS, execution_time, current_time

def v6_StatefulDHCPv6():
    result_v6_StatefulDHCPv6 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d.scrolldown(600)
        d.element("xpath", "//*[@id='advButtonv6_span']", sec=a.buffer_time)
        d.element("downmenu", "Stateful DHCPv6", sec=a.buffer_time)
        d.element("input", "dhcp_start",txt = "01", sec=a.buffer_time)
        d.element("input", "dhcp_end",txt = "FF", sec=a.buffer_time)
        d.save_new()
        time.sleep(60)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = ["PPPoE", "Auto Detection"]
        if connection_type_element.text in ConnectionType:
            result_v6_StatefulDHCPv6 = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_v6_StatefulDHCPv6 = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_v6_StatefulDHCPv6 = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_v6_StatefulDHCPv6, execution_time, current_time
    
def v6_CreateNewSession_Always_on():
    result_v6_CreateNewSession = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d.element("downmenu", "Create a new session", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = ["PPPoE", "Auto Detection"]
        if connection_type_element.text in ConnectionType:
            result_v6_CreateNewSession = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_v6_CreateNewSession = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_v6_CreateNewSession = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_v6_CreateNewSession, execution_time, current_time

def v6_CreateNewSession_Manual():
    result_v6_CreateNewSession = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d.element("downmenu", "Create a new session", sec=a.buffer_time)
        d.element("downmenu", "Manual", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = ["PPPoE", "Auto Detection"]
        if connection_type_element.text in ConnectionType:
            result_v6_CreateNewSession = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_v6_CreateNewSession = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_v6_CreateNewSession = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_v6_CreateNewSession, execution_time, current_time

def Connect_v6_AndCheckv6_PPPoE():
    result_Connect_v6_AndCheckv6_PPPoE = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connect_button = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'RenewReleaseIPv6_btn'))
        )
        connect_button.click()
        try:
            disconnect_button = WebDriverWait(d._driver, a.button_time).until(
                EC.text_to_be_present_in_element((By.ID, 'RenewReleaseIPv6_btn'), 'Disconnect')
            )
            print("Connect Successfully converted to Disconnect.")
        except TimeoutException:
            print("If Connect does not change to Disconnect within 30 seconds, click the Connect button again.")
            connect_button.click()
        time.sleep(60)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        NetworkStatus = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="IPv6_NetworkStatus"]'))
        )
        print(f"Network Status: {NetworkStatus.text}")
        Status = "Connected"
        if NetworkStatus.text == Status:
            result_Connect_v6_AndCheckv6_PPPoE = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_Connect_v6_AndCheckv6_PPPoE = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_Connect_v6_AndCheckv6_PPPoE = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_Connect_v6_AndCheckv6_PPPoE, execution_time, current_time

def check_url_contains(d, page_name, url_substring, result_FirefoxCompatibility = []):
    d.element("id", f"{page_name}", sec=a.buffer_time)
    current_url = d._driver.current_url
    print(f"The URL of the current page is： {current_url}")
    result = url_substring in current_url
    print(f"{'Pass. URL contains' if result else 'Fail. URL URL does not contain'} '{url_substring}'")
    result_FirefoxCompatibility.append(result)
def FirefoxCompatibility():
    url = a.DUT_GUI_url
    d = Dlink(browser='firefox')
    d.open(url, a.DUT_admin_pwd)
    start_time = time.time()
    result_FirefoxCompatibility = []
    pages_to_check = [
        ("menu_Home", "Home"),
        ("submenu_Internet", "Internet"),
        ("submenu_WiFi", "WiFi"),
        ("submenu_Network", "Network"),
        ("submenu_Mydlink", "Mydlink"),
        ("submenu_OperationMode", "OperationMode"),
        ("submenu_ParentalControl", "ParentalControl"),
        ("submenu_QoS", "QoS_Adv"),
        ("submenu_Firewall", "Firewall"),
        ("submenu_PortForwarding", "PortForwarding"),
        ("submenu_StaticRoute", "StaticRoute"),
        ("submenu_DynamicDNS", "DynamicDNS"),
        ("submenu_QuickVPN", "QuickVPN"),
        ("submenu_Time", "Time2"),
        ("submenu_SystemLog", "SystemLog"),
        ("submenu_Admin", "Admin"),
        ("submenu_UserAndDevice", "UserAndDevice"),
        ("submenu_UpdateFirmware", "UpdateFirmware_Multi"),
        ("submenu_Statistics", "Statistics")
    ]

    try:
        #menuPage
        for page_name, url_substring in pages_to_check:
            check_url_contains(d, page_name, url_substring, result_FirefoxCompatibility)
        #Wizard_Manual
        d.element("id", "submenu_Wizard_Manual", sec=a.buffer_time)
        current_url = d._driver.current_url
        print("The URL of the current page is：", current_url)
        if "Wizard_Manual" in current_url:
            print("Pass.URL contains 'Wizard_Manual'")
            result_FirefoxCompatibility.append(True)
        else:
            print("Fail.URL does not contain 'Wizard_Manual'")
            result_FirefoxCompatibility.append(False)
        d.element("id", "closeCreatePopBtn", sec=a.buffer_time)
    except Exception as e:
        print(e)
        result_FirefoxCompatibility = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print(result_FirefoxCompatibility)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_FirefoxCompatibility, execution_time, current_time

def check_url_contains(d, page_name, url_substring, result_ChromeCompatibility = []):
    d.element("id", f"{page_name}", sec=a.buffer_time)
    current_url = d._driver.current_url
    print(f"The URL of the current page is： {current_url}")
    result = url_substring in current_url
    print(f"{'Pass. URL contains' if result else 'Fail. URL does not contain'} '{url_substring}'")
    result_ChromeCompatibility.append(result)

def ChromeCompatibility():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.open(url, a.DUT_admin_pwd)
    start_time = time.time()
    result_ChromeCompatibility = []
    pages_to_check = [
        ("menu_Home", "Home"),
        ("submenu_Internet", "Internet"),
        ("submenu_WiFi", "WiFi"),
        ("submenu_Network", "Network"),
        ("submenu_Mydlink", "Mydlink"),
        ("submenu_OperationMode", "OperationMode"),
        ("submenu_ParentalControl", "ParentalControl"),
        ("submenu_QoS", "QoS_Adv"),
        ("submenu_Firewall", "Firewall"),
        ("submenu_PortForwarding", "PortForwarding"),
        ("submenu_StaticRoute", "StaticRoute"),
        ("submenu_DynamicDNS", "DynamicDNS"),
        ("submenu_QuickVPN", "QuickVPN"),
        ("submenu_Time", "Time2"),
        ("submenu_SystemLog", "SystemLog"),
        ("submenu_Admin", "Admin"),
        ("submenu_UserAndDevice", "UserAndDevice"),
        ("submenu_UpdateFirmware", "UpdateFirmware_Multi"),
        ("submenu_Statistics", "Statistics")
    ]

    try:
        #menuPage
        for page_name, url_substring in pages_to_check:
            check_url_contains(d, page_name, url_substring, result_ChromeCompatibility)
        #Wizard_Manual
        d.element("id", "submenu_Wizard_Manual", sec=a.buffer_time)
        current_url = d._driver.current_url
        print("The URL of the current page is：", current_url)
        if "Wizard_Manual" in current_url:
            print("Pass.URL contains 'Wizard_Manual'")
            result_ChromeCompatibility.append(True)
        else:
            print("Fail.URL does not contain 'Wizard_Manual'")
            result_ChromeCompatibility.append(False)
        d.element("id", "closeCreatePopBtn", sec=a.buffer_time)
    except Exception as e:
        print(e)
        result_ChromeCompatibility = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print(result_ChromeCompatibility)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCompatibility, execution_time, current_time
    
def Login_logout():
    result_Login_logout = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        print("Sleep for 180 seconds......")
        time.sleep(a.reboot_time)
        current_url = d._driver.current_url
        print(f"The URL of the current page is： {current_url}")
        url_substring = "Login"
        result = url_substring in current_url
        print(f"{'Pass. URL contains' if result else 'Fail. URL URL does not contain'} '{url_substring}'")
        result_Login_logout = True
        time.sleep(2)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_Login_logout = False
        time.sleep(2)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_Login_logout, execution_time, current_time

def AutoLogout():
    result_AutoLogout = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "Dynamic IP (DHCP)", sec=a.buffer_time)
        d.save_new()
        print("Sleep for 180 seconds......")
        time.sleep(a.reboot_time)
        current_url = d._driver.current_url
        print(f"The URL of the current page is： {current_url}")
        url_substring = "Login"
        result = url_substring in current_url
        print(f"{'Pass. URL contains' if result else 'Fail. URL does not contain'} '{url_substring}'")
        result_AutoLogout = True
        time.sleep(2)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_AutoLogout = False
        time.sleep(2)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AutoLogout, execution_time, current_time

def BrowserLanguageCheck(browser_name):
    result_BrowserLanguageCheck = []
    start_time = time.time()
    try:
        if browser_name == 'chrome':
            chrome_options = webdriver.ChromeOptions()
            chrome_options.add_argument('--ignore-certificate-errors')
            chrome_options.add_argument('--incognito')
            driver = webdriver.Chrome(options=chrome_options)
        elif browser_name == 'edge':
            edge_options = webdriver.EdgeOptions()
            edge_options.add_argument('--ignore-certificate-errors')
            edge_options.add_argument('--incognito')
            driver = webdriver.Edge(options=edge_options)
        elif browser_name == 'firefox':
            firefox_options = webdriver.FirefoxOptions()
            firefox_options.add_argument('--ignore-certificate-errors')
            firefox_options.add_argument('--incognito')
            driver = webdriver.Firefox(options=firefox_options)
        else:
            raise ValueError("Invalid browser name")
        url = a.DUT_GUI_url
        driver.set_window_size(a.W, a.H)
        driver.get(url)
        print(f"Open Home page with {browser_name}")
        time.sleep(5)
        Language = [
            "en-us",
            "zh-tw",
            "zh-cn",
            "ko-kr",
            "fr-fr",
            "pt-br",
            "es-es",
            "it-it",
            "de-de",
            "ru-ru",
        ]
        for desired_language in Language:
            try:
                # Change Language to desired_language
                language_select = Select(driver.find_element(By.ID, "Language"))
                language_select.select_by_value(desired_language)
                time.sleep(5)
            except Exception as e:
                print(f"Fail to change language to {desired_language}. Exception: {e}")
                result_BrowserLanguageCheck.append(False)
            else:
                print(f"Successfully changed language to {desired_language}")
                result_BrowserLanguageCheck.append(True)
    except Exception as e:
        print(f"Fail. Exception: {e}")
        result_BrowserLanguageCheck.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        if driver:
            driver.quit()
        return result_BrowserLanguageCheck, execution_time, current_time

def run_BrowserLanguageCheck_all_browsers():
    browsers = ['chrome', 'edge', 'firefox']
    all_results = {}
    for browser in browsers:
        result, execution_time, current_time = BrowserLanguageCheck(browser)
        all_results[browser] = result
    return all_results, execution_time, current_time

def ChangeWireless_ssid():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWireless_ssid = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_ssid1 = "123456789012345678901234567890120"
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("input","wifiName_24",txt=input_ssid1 ,sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        d.scrolldown(500)
        if d._driver.find_elements('xpath', "//*[contains(text(), 'The Wi-Fi Network Name can be up to 32 characters long.')]"):
            time.sleep(5)
            print("Pass.The Wi-Fi Network Name can be up to 32 characters long.")
            result_ChangeWireless_ssid.append(True)
        else:
            time.sleep(5)
            print("Fail")
            result_ChangeWireless_ssid.append(False)
        time.sleep(5)
        input_ssid2 = "12345678901234567890123456789012"
        d.element("input","wifiName_24",txt=input_ssid2 ,sec=a.buffer_time)
        d.save_new()
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "routerInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        NewSSID = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_24G"]'))
        )
        SSID = NewSSID.text
        print(f"The New Wi-Fi Name (SSID) after change is: {SSID}")
        if SSID == input_ssid2:
            print(f"Pass. The New Wi-Fi Name (SSID) is: {SSID}")
            result_ChangeWireless_ssid.append(True)
        else:
            print("Fail.The New Wi-Fi Name (SSID) after change is error.")
            result_ChangeWireless_ssid.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeWireless_ssid = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeWireless_ssid, execution_time, current_time

def ChangeWireless_PositiveSSID():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWireless_PositiveSSID = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_ssid = [
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "abcdefghijklmnopqrstuvwxyz",
            "0123456789",
            "- _11111",
            '! "#$%&()*+,./:;<=>?@[\]^`{|}~',
        ]
        for SSID in input_ssid:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("input", "wifiName_24", txt=SSID, sec=a.buffer_time)
            d.save_new()
            d.element("id", "menu_Home", sec=a.buffer_time)
            d.element("id", "routerInfo_circle", sec=a.buffer_time)
            d.scrolldown(500)
            NewSSID = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_24G"]'))
            )
            SSID_after_change = NewSSID.text
            print(f"The New Wi-Fi Name (SSID) after change is: {SSID_after_change}")
            if SSID_after_change == SSID:
                print(f"Pass. The New Wi-Fi Name (SSID) is: {SSID_after_change}")
                result_ChangeWireless_PositiveSSID.append(True)
            else:
                print("Fail. The New Wi-Fi Name (SSID) after change is error.")
                result_ChangeWireless_PositiveSSID.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeWireless_PositiveSSID = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeWireless_PositiveSSID, execution_time, current_time
    
def ChangeWireless_NegativeSSID():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWireless_NegativeSSID = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_ssid = [
            " 123456789",
            "012345678 ",
        ]
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        for SSID in input_ssid:
            d.element("input", "wifiName_24", txt=SSID, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            try:
                error_element = d._driver.find_element(By.XPATH, '//label[@for="wifiName_24" and contains(@class, "error")]')
                error_text = error_element.text
                print(f"Pass.Error text: {error_text}")
                result_ChangeWireless_NegativeSSID.append(True)
            except NoSuchElementException:
                print("Error element not found.")
                result_ChangeWireless_NegativeSSID.append(False)
        time.sleep(5)
        input_ssid2 = '! "#$%&"()*+,-./0123456789:;<=>?'
        d.element("input","wifiName_24",txt=input_ssid2 ,sec=a.buffer_time)
        d.save_new()
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "routerInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        NewSSID = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_24G"]'))
        )
        SSID_after_change = NewSSID.text
        print(f"The New Wi-Fi Name (SSID) after change is: {SSID_after_change}")
        if SSID_after_change == input_ssid2:
            print(f"Pass. The New Wi-Fi Name (SSID) is: {SSID_after_change}")
            result_ChangeWireless_NegativeSSID.append(True)
        else:
            print("Fail. The New Wi-Fi Name (SSID) after change is error.")
            result_ChangeWireless_NegativeSSID.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeWireless_NegativeSSID = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print(result_ChangeWireless_NegativeSSID)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeWireless_NegativeSSID, execution_time, current_time
    
def ChangeWireless_PasswordLengthLimitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWireless_PasswordLengthLimitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_pwd = [
            "1a2b3c4d5e",
            "1a2b3c4d5e6f7g8h9i8j7j6k5l4m3n2o1p2q3r4s5t6u7u8v9w8x7y6z5a4b3c2",
        ]
        for Pwd in input_pwd:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("input", "password_24", txt=Pwd, sec=a.buffer_time)
            d.save_new()
            d.element("id", "menu_Home", sec=a.buffer_time)
            d.element("id", "routerInfo_circle", sec=a.buffer_time)
            d.scrolldown(500)
            NewPwd = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.ID, "index_ShowPassword_24G"))
            )
            Pwd_after_change = NewPwd.text
            print(f"The New Wi-Fi Password after change is: {Pwd_after_change}")
            if Pwd_after_change == Pwd:
                print(f"Pass. The New Wi-Fi Password is: {Pwd_after_change}")
                result_ChangeWireless_PasswordLengthLimitation.append(True)
            else:
                print("Fail. The New Wi-Fi Password after change is error.")
                result_ChangeWireless_PasswordLengthLimitation.append(False)
        SSID_list = [
            "1a2b3c4d5",
            "1a2b3c4d5e6f7g8h9i8j7j6k5l4m3n2o1p2q3r4s5t6u7u8v9w8x7y6z5a4b3c21",
        ]
        for SSID64 in SSID_list:
            d.open(url, a.DUT_admin_pwd)
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("input", "password_24", txt=SSID64, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            error_element = d._driver.find_element(By.XPATH, '//label[@for="password_24" and contains(@class, "error")]')
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ChangeWireless_PasswordLengthLimitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeWireless_PasswordLengthLimitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeWireless_PasswordLengthLimitation, execution_time, current_time

def ChangeWireless_PositivePwd():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWireless_PositivePwd = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_pwd = [
            '! "#$%&"()*+,-./0123456789a:;<=>?',
            "@1ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "_`1abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for Pwd in input_pwd:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("input", "password_24", txt=Pwd, sec=a.buffer_time)
            d.save_new()
            d.element("id", "menu_Home", sec=a.buffer_time)
            d.element("id", "routerInfo_circle", sec=a.buffer_time)
            d.scrolldown(500)
            NewPwd = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.ID, "index_ShowPassword_24G"))
            )
            Pwd_after_change = NewPwd.text
            print(f"The New Wi-Fi Password after change is: {Pwd_after_change}")
            if Pwd_after_change == Pwd:
                print(f"Pass. The New Wi-Fi Password is: {Pwd_after_change}")
                result_ChangeWireless_PositivePwd.append(True)
            else:
                print("Fail. The New Wi-Fi Password after change is error.")
                result_ChangeWireless_PositivePwd.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeWireless_PositivePwd = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeWireless_PositivePwd, execution_time, current_time

def ChangeDynamicDNS_UsernameLengthLimitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDynamicDNS_UsernameLengthLimitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Username1 = [
            "11111111111111111111111111111111",
            "11",
        ]
        for Username1 in input_Username1:
            d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt="dlink.dlinkddns.com", sec=a.buffer_time)
            d.element("input", "userName", txt=Username1, sec=a.buffer_time)
            d.element("input", "password", txt="1", sec=a.buffer_time)
            d.save_new()
            result_ChangeDynamicDNS_UsernameLengthLimitation.append(True)
        input_Username2 = [
            "1",
        ]
        for Username2 in input_Username2:
            d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt="dlink.dlinkddns.com", sec=a.buffer_time)
            d.element("input", "userName", txt=Username2, sec=a.buffer_time)
            d.element("input", "password", txt="1", sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="userName" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ChangeDynamicDNS_UsernameLengthLimitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeDynamicDNS_UsernameLengthLimitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeDynamicDNS_UsernameLengthLimitation, execution_time, current_time

def ChangeDynamicDNS_UsernamePositive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDynamicDNS_UsernamePositive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Username = [
            "! '#$%&'()*+,-./0123456789:;<=>?",
            '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_',
            "_`abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for Username in input_Username:
            d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt="dlink.dlinkddns.com", sec=a.buffer_time)
            d.element("input", "userName", txt=Username, sec=a.buffer_time)
            d.element("input", "password", txt="1", sec=a.buffer_time)
            d.save_new()
            result_ChangeDynamicDNS_UsernamePositive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeDynamicDNS_UsernamePositive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeDynamicDNS_UsernamePositive, execution_time, current_time

def SyslogFromToEmail_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SyslogFromToEmail_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_SystemLog", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "systemLogEnable",status="enable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "enableEmailNotification",status="enable", sec=a.buffer_time)
        FromEmail1 = [
            "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111@gmail.com",
            "1@gmail.com",
        ]
        for Address1 in FromEmail1:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt=Address1, sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt=Address1, sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt="email.amit.com.tw", sec=a.buffer_time)
            d.save_new()
            result_SyslogFromToEmail_Limitation.append(True)
        FromEmail2 = [
            "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111@gmail.com",
            ""
        ]
        for Address2 in FromEmail2:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt=Address2, sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt=Address2, sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt="email.amit.com.tw", sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="fromEmailAddress" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_SyslogFromToEmail_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SyslogFromToEmail_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SyslogFromToEmail_Limitation, execution_time, current_time

def SyslogFromToEmail_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SyslogFromToEmail_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_SystemLog", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "systemLogEnable",status="enable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "enableEmailNotification",status="enable", sec=a.buffer_time)
        FromEmail1 = [
            "_`abcdefghijklmnopqrstuvwxyz{|}~@gmail.com",
        ]
        for Address1 in FromEmail1:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt=Address1, sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt=Address1, sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt="email.amit.com.tw", sec=a.buffer_time)
            d.element("id", "Save_btn", sec=a.buffer_time)
            d.open(url, a.DUT_admin_pwd)
            d.element("id", "submenu_SystemLog", sec=a.buffer_time)
            current_input_text1 = d.element("id", "fromEmailAddress").get_attribute("value")
            if current_input_text1 != Address1:
                print(f"Expected: {Address1}, but got: {current_input_text1}")
                result_SyslogFromToEmail_Positive.append(False)
            else:
                print(f"Same as Expected: {Address1}.")
                result_SyslogFromToEmail_Positive.append(True)
            current_input_text2 = d.element("id", "toEmailAddress").get_attribute("value")
            if current_input_text2 != Address1:
                print(f"Expected: {Address1}, but got: {current_input_text2}")
                result_SyslogFromToEmail_Positive.append(False)
            else:
                print(f"Same as Expected: {Address1}.")
                result_SyslogFromToEmail_Positive.append(True)
        FromEmail2 = [
            "'ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_@gmail.com",
            '! "#$%&()*+,-./0123456789:;<=>?@gmail.com'
        ]
        for Address2 in FromEmail2:
            d.open(url, a.DUT_admin_pwd)
            d.element("id", "submenu_SystemLog", sec=a.buffer_time)
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt=Address2, sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt=Address2, sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt="email.amit.com.tw", sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="fromEmailAddress" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_SyslogFromToEmail_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SyslogFromToEmail_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SyslogFromToEmail_Positive, execution_time, current_time

def SyslogSMTP_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SyslogSMTP_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_SystemLog", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "systemLogEnable",status="enable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "enableEmailNotification",status="enable", sec=a.buffer_time)
        smtpServer1 = [
            "012345678911234567892223456789333345678944444567895555556789666.012345678911234567892223456789333345678944444567895555556789.com",
            "smtp.1.com",
        ]
        for smtp1 in smtpServer1:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt=smtp1, sec=a.buffer_time)
            d.save_new()
            result_SyslogSMTP_Limitation.append(True)
        smtpServer2 = [
            "012345678911234567892223456789333345678944444567895555556789666.0123456789112345678922234567893333456789444445678955555567891.com",
            ""
        ]
        for smtp2 in smtpServer2:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt=smtp2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="smtpServerAddress" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_SyslogSMTP_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SyslogSMTP_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SyslogSMTP_Limitation, execution_time, current_time

def SyslogSMTP_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SyslogSMTP_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_SystemLog", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "systemLogEnable",status="enable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "enableEmailNotification",status="enable", sec=a.buffer_time)
        smtpServer = [
            "smtp.ABCDEFGHIJKLMNOPQRSTUVWXYZ.com",
            "smtp.abcdefghijklmnopqrstuvwxyz.com",
            "smtp.0123456789.com",
            "smtp.012345-6789.com",
            "8.8.8.8",
            "2001:4860:4860::8888",
        ]
        for smtp in smtpServer:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt=smtp, sec=a.buffer_time)
            d.save_new()
            result_SyslogSMTP_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SyslogSMTP_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SyslogSMTP_Positive, execution_time, current_time

def SyslogSTMPAccountNamePWD_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SyslogSTMPAccountNamePWD_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_SystemLog", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "systemLogEnable",status="enable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "enableEmailNotification",status="enable", sec=a.buffer_time)
        d.element("checkbox", "enableAuthentication",status="enable", sec=a.buffer_time)
        SMTPAccountName1 = [
            "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "1",
        ]
        SMTPpwd1 = [
            "1111111111111111111111111111111111111111111111111111111111111111",
            "1"
        ]
        for AccountName1, pwd1 in SMTPAccountName1 ,SMTPpwd1:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt="email.amit.com.tw", sec=a.buffer_time)
            d.element("input", "accountName", txt=AccountName1, sec=a.buffer_time)
            d.element("input", "password", txt=pwd1, sec=a.buffer_time)
            d.save_new()
            result_SyslogSTMPAccountNamePWD_Limitation.append(True)
        SMTPAccountName2 = [
            "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            ""
        ]
        SMTPpwd2 = [
            "11111111111111111111111111111111111111111111111111111111111111111",
            ""
        ]
        for AccountName2, pwd2 in SMTPAccountName2 ,SMTPpwd2:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt="email.amit.com.tw", sec=a.buffer_time)
            d.element("input", "accountName", txt=AccountName2, sec=a.buffer_time)
            d.element("input", "password", txt=pwd2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element1 = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="accountName" and contains(@class, "error")]'))
            )
            error_text1 = error_element1.text
            print(f"Pass.Error text: {error_text1}")
            result_SyslogSTMPAccountNamePWD_Limitation.append(True)
            error_element2 = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="password" and contains(@class, "error")]'))
            )
            error_text2 = error_element2.text
            print(f"Pass.Error text: {error_text2}")
            result_SyslogSTMPAccountNamePWD_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SyslogSTMPAccountNamePWD_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SyslogSTMPAccountNamePWD_Limitation, execution_time, current_time

def SyslogSTMPAccountNamePWD_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SyslogSTMPAccountNamePWD_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_SystemLog", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "systemLogEnable",status="enable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "enableEmailNotification",status="enable", sec=a.buffer_time)
        d.element("checkbox", "enableAuthentication",status="enable", sec=a.buffer_time)
        SMTP = [
            "! '#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'",
            "_`abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for AccountNameAndPwd in SMTP:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt="email.amit.com.tw", sec=a.buffer_time)
            d.element("input", "accountName", txt=AccountNameAndPwd, sec=a.buffer_time)
            d.element("input", "password", txt=AccountNameAndPwd, sec=a.buffer_time)
            d.save_new()
            result_SyslogSTMPAccountNamePWD_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SyslogSTMPAccountNamePWD_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SyslogSTMPAccountNamePWD_Positive, execution_time, current_time

def GUIAdminPwd_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_GUIAdminPwd_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        AdminPassword1 = [
            "1a2b3c4d5e6f7g8",
            "1a2b3c4d5e",
        ]
        for pwd1 in AdminPassword1:
            d.element("id", "submenu_Admin", sec=a.buffer_time)
            d.element("input", "password_Admin", txt=pwd1, sec=a.buffer_time)
            d.save_new()
            d.open(url, pwd1 )
            result_GUIAdminPwd_Limitation.append(True)
        AdminPassword2 = [
            "1a2b3c4d5e6f7g8h",
            "1a2b3c4d5",
            "",
        ]
        d.element("id", "submenu_Admin", sec=a.buffer_time)
        for pwd2 in AdminPassword2:
            d.element("input", "password_Admin", txt=pwd2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="password_Admin" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_GUIAdminPwd_Limitation.append(True)
        d.element("input", "password_Admin", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.save_new()
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_GUIAdminPwd_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_GUIAdminPwd_Limitation, execution_time, current_time

def WizardAdminPwd_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_WizardAdminPwd_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        AdminPassword1 = [
            "1a2b3c4d5e6f7g8",
            "1a2b3c4d5e",
        ]
        for pwd1 in AdminPassword1:
            d.element("id", "submenu_Wizard_Manual", sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            d.element("input", "device_password", txt=pwd1, sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            print("sleep 160 sec")
            time.sleep(160)
            d.open(url, pwd1)
            result_WizardAdminPwd_Limitation.append(True)
        
        AdminPassword2 = [
            "1a2b3c4d5e6f7g8h",
            "1a2b3c4d5",
            "",
        ]
        for pwd2 in AdminPassword2:
            d.open(url, "1a2b3c4d5e")
            d.element("id", "submenu_Wizard_Manual", sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            d.element("input", "device_password", txt=pwd2, sec=a.buffer_time)
            d.element("id", "btn_next", sec=a.buffer_time)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="device_password" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_WizardAdminPwd_Limitation.append(True)
        d.open(url, "1a2b3c4d5e")
        d.element("id", "submenu_Wizard_Manual", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        time.sleep(160)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WizardAdminPwd_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WizardAdminPwd_Limitation, execution_time, current_time

def ChangeDynamicDNS_HostNameLengthLimitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDynamicDNS_HostNameLengthLimitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_HostName1 = [
            "111111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111.com",
            "dlink.dlinkddns.com",
            "Dlinktest",
        ]
        for HostName1 in input_HostName1:
            d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt=HostName1, sec=a.buffer_time)
            d.element("input", "userName", txt="11", sec=a.buffer_time)
            d.element("input", "password", txt="1", sec=a.buffer_time)
            d.save_new()
            result_ChangeDynamicDNS_HostNameLengthLimitation.append(True)
        input_HostName2 = [
            "1111111111111111111111111111111111111111111111111111111111111111.com",
            "11111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111111111.1111111111111111111111111111111111111111111111111111111111111.1",
            "",
        ]
        for HostName2 in input_HostName2:
            d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt=HostName2, sec=a.buffer_time)
            d.element("input", "userName", txt="11", sec=a.buffer_time)
            d.element("input", "password", txt="1", sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="hostName" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ChangeDynamicDNS_HostNameLengthLimitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeDynamicDNS_HostNameLengthLimitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeDynamicDNS_HostNameLengthLimitation, execution_time, current_time

def ChangeDynamicDNS_HostNamePositive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDynamicDNS_HostNamePositive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_HostName = [
            "dlink.dlinkddns.com",
            'test.ABCDEFGHIJKLMNOPQRSTUVWXYZ.com',
            "test.abcdefghijklmnopqrstuvwxyz.com",
            "test.0123456789.com",
            "test.012345-6789.com",
        ]
        for HostName in input_HostName:
            d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt=HostName, sec=a.buffer_time)
            d.element("input", "userName", txt="11", sec=a.buffer_time)
            d.element("input", "password", txt="1", sec=a.buffer_time)
            d.save_new()
            result_ChangeDynamicDNS_HostNamePositive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeDynamicDNS_HostNamePositive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeDynamicDNS_HostNamePositive, execution_time, current_time

def ChangeDynamicDNS_HostNameNegative():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDynamicDNS_HostNameNegative = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_HostName = [
            "-dlinktest.dns.com",
            'dlinktest.dns.com-',
            "dns.-dlinktest.com",
            "dns.dlinktest-.com",
        ]
        d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
        for HostName in input_HostName:
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt=HostName, sec=a.buffer_time)
            d.element("input", "userName", txt="11", sec=a.buffer_time)
            d.element("input", "password", txt="1", sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="hostName" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ChangeDynamicDNS_HostNameNegative.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeDynamicDNS_HostNameNegative = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeDynamicDNS_HostNameNegative, execution_time, current_time

def ChangeDynamicDNS_PasswordLengthLimitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDynamicDNS_PasswordLengthLimitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Password1 = [
            #"1111111111111111111111111111111111111111111111111111111111111111",
            "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "1",
            "",
        ]
        for Password1 in input_Password1:
            d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt="dlink.dlinkddns.com", sec=a.buffer_time)
            d.element("input", "userName", txt="11", sec=a.buffer_time)
            d.element("input", "password", txt=Password1, sec=a.buffer_time)
            d.save_new()
            result_ChangeDynamicDNS_PasswordLengthLimitation.append(True)
        input_Password2 = [
            #"11111111111111111111111111111111111111111111111111111111111111111",
            "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        ]
        for Password2 in input_Password2:
            d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt="dlink.dlinkddns.com", sec=a.buffer_time)
            d.element("input", "userName", txt="11", sec=a.buffer_time)
            d.element("input", "password", txt=Password2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="password" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ChangeDynamicDNS_PasswordLengthLimitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeDynamicDNS_PasswordLengthLimitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeDynamicDNS_PasswordLengthLimitation, execution_time, current_time

def ChangeDynamicDNS_PasswordSpecialCharacter():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDynamicDNS_PasswordSpecialCharacter = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Password = [
            "! '#$%&'()*+,-./0123456789:;<=>?",
            '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_',
            "_`abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
        for Password in input_Password:
            d.element("id", "submenu_DynamicDNS", sec=a.buffer_time)
            d.element("checkbox", "enableDynamicDNS",status="enable", sec=a.buffer_time)
            d.scrolldown(200)
            d.element("input", "hostName", txt="dlink.dlinkddns.com", sec=a.buffer_time)
            d.element("input", "userName", txt="11", sec=a.buffer_time)
            d.element("input", "password", txt=Password, sec=a.buffer_time)
            d.save_new()
            result_ChangeDynamicDNS_PasswordSpecialCharacter.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeDynamicDNS_PasswordSpecialCharacter = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeDynamicDNS_PasswordSpecialCharacter, execution_time, current_time

def InternetDHCP_HostNameLimitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_InternetDHCP_HostNameLimitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_HostName1 = [
            "11111111111111",
            "111111111111111",
            "",
        ]
        for HostName1 in input_HostName1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("id", "advBtn_internet", sec=a.buffer_time)
            d.element("input", "hostName_DynamicIP", txt=HostName1, sec=a.buffer_time)
            d.save_new()
            result_InternetDHCP_HostNameLimitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_InternetDHCP_HostNameLimitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_InternetDHCP_HostNameLimitation, execution_time, current_time

def InternetDHCP_HostNamePositive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_InternetDHCP_HostNamePositive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_HostName = [
            "ABCDEFGHIJKLMNO",
            'PQRSTUVWXYZ',
            "abcdefghijklmno",
            "pqrstuvwxyz",
            "0123456789",
            "test-test",
        ]
        for HostName in input_HostName:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("id", "advBtn_internet", sec=a.buffer_time)
            d.element("input", "hostName_DynamicIP", txt=HostName, sec=a.buffer_time)
            d.save_new()
            result_InternetDHCP_HostNamePositive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_InternetDHCP_HostNamePositive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_InternetDHCP_HostNamePositive, execution_time, current_time

def InternetDHCP_HostNameNegative():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_InternetDHCP_HostNameNegative = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_HostName = [
            "-test",
            'test-',
            '! "#$%&"()*+,-.',
            "/0123456789:;<=>?",
            "@ABC",
            "XYZ[\]^_",
            "xyz{|}~_`",
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for HostName in input_HostName:
            d.element("id", "advBtn_internet", sec=a.buffer_time)
            d.element("input", "hostName_DynamicIP", txt=HostName, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="hostName_DynamicIP" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_InternetDHCP_HostNameNegative.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_InternetDHCP_HostNameNegative = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_InternetDHCP_HostNameNegative, execution_time, current_time

def SyslogSMTP_Negative():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SyslogSMTP_Negative = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_SystemLog", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("checkbox", "systemLogEnable",status="enable", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "enableEmailNotification",status="enable", sec=a.buffer_time)
        smtpServer = [
            "smtp.! '#$%&'()*+,-./0123456.com",
            "smtp.789:;<=>?@ABCDEFGHIJKLM.com",
            "smtp.NOPQRSTUVWXYZ[\]^__`ab.com",
            "smtp.z{|}~.com",
            "smtp.-cdefghijklmnopqrstuvwxy.com",
            "smtp.cdefghijklmnopqrstuvwxy-.com",
            "256.256.256.256",
            "8. 0::1234::",
        ]
        for smtp in smtpServer:
            d.element("input", "sysLogServer_Description", txt=a.client_PC, sec=a.buffer_time)
            d.element("input", "fromEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "toEmailAddress", txt="1@gmail.com", sec=a.buffer_time)
            d.element("input", "smtpServerAddress", txt=smtp, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="smtpServerAddress" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_SyslogSMTP_Negative.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SyslogSMTP_Negative = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SyslogSMTP_Negative, execution_time, current_time

def VersionTxt():
    result_VersionTxt = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.open(url, a.DUT_admin_pwd)
    try:
        d._driver.get(a.versionTXT)
        time.sleep(2)
        web_page_content1 = d._driver.page_source

        # 定義正則表達式以提取 SSID 和 LAN MAC
        ssid_pattern = re.compile(r'(2\.4GHz SSID:\s*(.+?))(<br>)|(5GHz SSID:\s*(.+?))(<br>)', re.IGNORECASE)
        mac_pattern = re.compile(r'LAN MAC:\s*<font[^>]*>([0-9A-F]{2}(:[0-9A-F]{2}){5})</font>', re.IGNORECASE)

        # 提取 SSID 信息
        matches = ssid_pattern.findall(web_page_content1)
        ssid_2_4 = ""
        ssid_5 = ""
        if matches:
            for match in matches:
                if match[1]:  # 2.4GHz SSID
                    ssid_2_4 = match[1].strip()
                if match[4]:  # 5GHz SSID
                    ssid_5 = match[4].strip()
            print(f"2.4GHz SSID: {ssid_2_4 if ssid_2_4 else 'Not found'}")
            print(f"5GHz SSID: {ssid_5 if ssid_5 else 'Not found'}")
            # 清理 SSID
            ssid_2_4_cleaned = ssid_2_4.replace("<br>", "").replace(" ", "")
            ssid_5_cleaned = ssid_5.replace("<br>", "").replace(" ", "")
            # 提取最後四位
            ssid_2_4_last4 = ssid_2_4_cleaned[-4:] if len(ssid_2_4_cleaned) >= 4 else ssid_2_4_cleaned
            ssid_5_last4 = ssid_5_cleaned[-4:] if len(ssid_5_cleaned) >= 4 else ssid_5_cleaned
        else:
            print("Fail. SSID information not found in the given text.")
            ssid_2_4_last4 = ssid_5_last4 = None
        # 提取 LAN MAC 信息
        mac_matches = mac_pattern.findall(web_page_content1)
        lan_mac_last4 = ""
        if mac_matches:
            lan_mac = mac_matches[0][0]  # 提取匹配的 MAC 地址
            print(f"LAN MAC: {lan_mac}")
            # 移除空格和冒號
            lan_mac_cleaned = lan_mac.replace(" ", "").replace(":", "")
            lan_mac_last4 = lan_mac_cleaned[-4:] if len(lan_mac_cleaned) >= 4 else lan_mac_cleaned
        else:
            print("Fail. LAN MAC information not found in the given text.")
        # 比對
        if lan_mac_last4:
            if ssid_2_4_last4 and ssid_2_4_last4 == lan_mac_last4:
                print(f"Pass.Match found: Last 4 characters of 2.4GHz SSID ({ssid_2_4_last4}) match LAN MAC ({lan_mac_last4})")
                result_VersionTxt.append(True)
            else:
                print(f"Fail.No match for 2.4GHz SSID: {ssid_2_4_last4} and LAN MAC: {lan_mac_last4}")
                result_VersionTxt.append(False)

            if ssid_5_last4 and ssid_5_last4 == lan_mac_last4:
                print(f"Pass.Match found: Last 4 characters of 5GHz SSID ({ssid_5_last4}) match LAN MAC ({lan_mac_last4})")
                result_VersionTxt.append(True)
            else:
                print(f"Fail.No match for 5GHz SSID: {ssid_5_last4} and LAN MAC: {lan_mac_last4}")
                result_VersionTxt.append(False)
            
        pattern2 = re.compile(r'\b(WAN MAC|LAN MAC|2\.4GHz WLAN MAC|5GHz WLAN MAC):\s*<font[^>]*>([0-9A-F]{2}(:[0-9A-F]{2}){5})</font>', re.IGNORECASE)
        matches = pattern2.findall(web_page_content1)
        expected_conditions = 4
        if len(matches) == expected_conditions:
            for match in matches:
                print(f"Type: {match[0]}, MAC: {match[1]}")
            print("Pass. All conditions found.")
        else:
            print("Fail. No match items found.")
            result_VersionTxt.append(False)

        web_page_content2 = d._driver.page_source
        pattern3 = re.compile(r'mydlink number:\s*(\d+)', re.IGNORECASE)
        match3 = pattern3.search(web_page_content2)
        if match3:
            mydlink_number = match3.group(1).strip()
            print(f"Pass. Found mydlink Number: {mydlink_number}")
            result_VersionTxt.append(True)
        else:
            print("Fail. Mydlink Number not found.")
            result_VersionTxt.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_VersionTxt = False
        time.sleep(2)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_VersionTxt, execution_time, current_time

def WirelessGuestZoneSSID_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_WirelessGuestZoneSSID_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_SSID1 = [
            "1111111111111111111111111111111",
            "11111111111111111111111111111111",
            "1",
        ]
        for SSID1 in input_SSID1:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
            d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
            d.element("input", "wifiName_24g", txt=SSID1, sec=a.buffer_time)
            d.save_new()
            result_WirelessGuestZoneSSID_Limitation.append(True)
        input_SSID2 = [
            "",
            "111111111111111111111111111111111",
        ]
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
        for SSID2 in input_SSID2:            
            d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
            d.element("input", "wifiName_24g", txt=SSID2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="wifiName_24g" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_WirelessGuestZoneSSID_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WirelessGuestZoneSSID_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WirelessGuestZoneSSID_Limitation, execution_time, current_time

def WirelessGuestZoneSSID_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_WirelessGuestZoneSSID_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_SSID1 = [
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "abcdefghijklmnopqrstuvwxyz",
            "0123456789",
            "- _11111",
            "! '#$%&()*+,./:;<=>?@[\]^`{|}~",
        ]
        for SSID1 in input_SSID1:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
            d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
            d.element("input", "wifiName_24g", txt=SSID1, sec=a.buffer_time)
            d.save_new()
            result_WirelessGuestZoneSSID_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WirelessGuestZoneSSID_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WirelessGuestZoneSSID_Positive, execution_time, current_time

def WirelessGuestZoneSSID_Negative():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_WirelessGuestZoneSSID_Negative = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_SSID2 = [
            " 123456789",
            "012345678 ",
        ]
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
        for SSID2 in input_SSID2:            
            d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
            d.element("input", "wifiName_24g", txt=SSID2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="wifiName_24g" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_WirelessGuestZoneSSID_Negative.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WirelessGuestZoneSSID_Negative = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WirelessGuestZoneSSID_Negative, execution_time, current_time

def WirelessGuestZonePassword_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_WirelessGuestZonePassword_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Password1 = [
            "1a2b3c4d5e",
            "1a2b3c4d5e6f7g8h9i8j7j6k5l4m3n2o1p2q3r4s5t6u7u8v9w8x7y6z5a4b3c2",
        ]
        for Password1 in input_Password1:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
            d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
            d.element("input", "password_24g", txt=Password1, sec=a.buffer_time)
            d.save_new()
            result_WirelessGuestZonePassword_Limitation.append(True)
        input_Password2 = [
            "1a2b3c4d5",
            "1a2b3c4d5e6f7g8h9i10j1j1k12l13m14n15o16p17q18r19s20t21u2u2v23w24",
        ]
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
        for Password2 in input_Password2:            
            d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
            d.element("input", "password_24g", txt=Password2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="password_24g" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_WirelessGuestZonePassword_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WirelessGuestZonePassword_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WirelessGuestZonePassword_Limitation, execution_time, current_time

def WirelessGuestZonePassword_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_WirelessGuestZonePassword_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Password1 = [
            '! "#$%&"()*+,-./0123456789a:;<=>?',
            "@1ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "_`1abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for Password1 in input_Password1:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
            d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
            d.element("input", "password_24g", txt=Password1, sec=a.buffer_time)
            d.save_new()
            result_WirelessGuestZonePassword_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WirelessGuestZonePassword_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WirelessGuestZonePassword_Positive, execution_time, current_time

def ParentalControlProfileName_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ParentalControlProfileName_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_profileName1 = [
            "1",
            "111111111111111111111111111111111",
        ]
        for Name1 in input_profileName1:
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            d.element("id", "pc_createButton", sec=a.buffer_time)
            d.element("input", "profileName", txt=Name1, sec=a.buffer_time)
            d.save_new()
            result_ParentalControlProfileName_Limitation.append(True)
        input_profileName2 = [
            "",
        ]
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        for Name2 in input_profileName2:            
            d.element("id", "pc_createButton", sec=a.buffer_time)
            d.element("input", "profileName", txt=Name2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="profileName" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ParentalControlProfileName_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalControlProfileName_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalControlProfileName_Limitation, execution_time, current_time

def ParentalControlProfileName_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ParentalControlProfileName_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_profileName1 = [
            "!'#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "`abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for Name1 in input_profileName1:
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            d.element("id", "pc_createButton", sec=a.buffer_time)
            d.element("input", "profileName", txt=Name1, sec=a.buffer_time)
            d.save_new()
            result_ParentalControlProfileName_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalControlProfileName_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalControlProfileName_Positive, execution_time, current_time

def ParentalControlPopProfileName_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ParentalControlPopProfileName_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="test", sec=a.buffer_time)
        d.save_new()
        input_profileName1 = [
            "11111111111111111111111111111111",
            "1",
            "111111111111111111111111111111111",
        ]
        for Name1 in input_profileName1:
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            d.element("xpath", a.EditIcon,sec=a.buffer_time)
            d.element("class", "edit_btn_profileName", sec=a.buffer_time)
            d.element("input", "pop_profileName", txt=Name1, sec=a.buffer_time)
            d.element("id", "wf_save", sec=a.buffer_time)
            d.save_new()
            result_ParentalControlPopProfileName_Limitation.append(True)
        input_profileName2 = [
            "",
        ]
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        for Name2 in input_profileName2:            
            d.element("xpath", a.EditIcon,sec=a.buffer_time)
            d.element("class", "edit_btn_profileName", sec=a.buffer_time)
            d.element("input", "pop_profileName", txt=Name2, sec=a.buffer_time)
            d.element("id", "wf_save", sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="pop_profileName" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ParentalControlPopProfileName_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalControlPopProfileName_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalControlPopProfileName_Limitation, execution_time, current_time

def ParentalControlPopProfileName_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ParentalControlPopProfileName_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="test", sec=a.buffer_time)
        d.save_new()
        input_profileName1 = [
            "!'#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "`abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for Name1 in input_profileName1:
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            d.element("xpath", a.EditIcon,sec=a.buffer_time)
            d.element("class", "edit_btn_profileName", sec=a.buffer_time)
            d.element("input", "pop_profileName", txt=Name1, sec=a.buffer_time)
            d.element("id", "wf_save", sec=a.buffer_time)
            d.save_new()
            result_ParentalControlPopProfileName_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalControlPopProfileName_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalControlPopProfileName_Positive, execution_time, current_time

def ParentalControlWebsiteName_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ParentalControlWebsiteName_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="test", sec=a.buffer_time)
        input_WebsiteName1 = [
            "11111111111111111111111111111111",
            "1",
        ]
        for Website1 in input_WebsiteName1:
            d.element("xpath", a.EditIcon,sec=a.buffer_time)
            d.scrolldown(500)
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=Website1, sec=a.buffer_time)
            d.element("input", "wf_url", txt="dlink.dlinkddns.com", sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            d.save_new()
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            result_ParentalControlWebsiteName_Limitation.append(True)
        input_WebsiteName2 = [
            "111111111111111111111111111111111",
        ]
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        for Website2 in input_WebsiteName2:            
            d.element("xpath", a.EditIcon,sec=a.buffer_time)
            d.scrolldown(500)
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=Website2, sec=a.buffer_time)
            d.element("input", "wf_url", txt="dlink.dlinkddns.com", sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="wf_name" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ParentalControlWebsiteName_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalControlWebsiteName_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalControlWebsiteName_Limitation, execution_time, current_time

def ParentalControlWebsiteName_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ParentalControlWebsiteName_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="test", sec=a.buffer_time)
        input_WebsiteName1 = [
            "!'#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "`abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for Website1 in input_WebsiteName1:
            d.element("xpath", a.EditIcon,sec=a.buffer_time)
            d.scrolldown(500)
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=Website1, sec=a.buffer_time)
            d.element("input", "wf_url", txt="dlink.dlinkddns.com", sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            d.save_new()
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            result_ParentalControlWebsiteName_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalControlWebsiteName_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalControlWebsiteName_Positive, execution_time, current_time

def ParentalControlURLKeyword_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ParentalControlURLKeyword_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="test", sec=a.buffer_time)
        input_URLKeyword1 = [
            "111111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111.com",
            "dlink.dlinkddns.com",
            "Dlinktest",
        ]
        for URLKeyword1 in input_URLKeyword1:
            d.element("xpath", a.EditIcon,sec=a.buffer_time)
            d.scrolldown(500)
            d.element("id", "wf_createButton", sec=a.buffer_time)
            wf_name_input = WebDriverWait(d._driver, a.button_time).until(
                EC.visibility_of_element_located((By.XPATH, '//input[@name="wf_name"]'))
            )
            wf_name_input.clear()
            d.element("input", "wf_url", txt=URLKeyword1, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            d.save_new()
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            result_ParentalControlURLKeyword_Limitation.append(True)
        input_URLKeyword2 = [
            "1111111111111111111111111111111111111111111111111111111111111111.com",
            "11111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111111111.111111111111111111111111111111111111111111111111111111111111111.11111111111111111111111111111111111111111111111111111111111.com",
            "",
        ]
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        for URLKeywor2 in input_URLKeyword2:            
            d.element("xpath", a.EditIcon,sec=a.buffer_time)
            d.scrolldown(500)
            d.element("id", "wf_createButton", sec=a.buffer_time)
            wf_name_input = WebDriverWait(d._driver, a.button_time).until(
                EC.visibility_of_element_located((By.XPATH, '//input[@name="wf_name"]'))
            )
            wf_name_input.clear()
            d.element("input", "wf_url", txt= URLKeywor2 , sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="wf_url" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ParentalControlURLKeyword_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalControlURLKeyword_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalControlURLKeyword_Limitation, execution_time, current_time

def ParentalControlURLKeyword_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ParentalControlURLKeyword_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="test", sec=a.buffer_time)
        input_URLKeyword1 = [
            "dlink.dlinkddns.com",
            "test.ABCDEFGHIJKLMNOPQRSTUVWXYZ.com",
            "test.abcdefghijklmnopqrstuvwxyz.com",
            "test.0123456789.com",
            "test.012345-6789.com",
        ]
        for URLKeyword1 in input_URLKeyword1:
            d.element("xpath", a.EditIcon,sec=a.buffer_time)
            d.scrolldown(500)
            d.element("id", "wf_createButton", sec=a.buffer_time)
            wf_name_input = WebDriverWait(d._driver, a.button_time).until(
                EC.visibility_of_element_located((By.XPATH, '//input[@name="wf_name"]'))
            )
            wf_name_input.clear()
            d.element("input", "wf_url", txt=URLKeyword1, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            d.save_new()
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            result_ParentalControlURLKeyword_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalControlURLKeyword_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalControlURLKeyword_Positive, execution_time, current_time

def ParentalControlURLKeyword_Negative():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ParentalControlURLKeyword_Negative = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="test", sec=a.buffer_time)
        input_URLKeyword2 = [
            "-dlinktest.dns.com",
            "dns.-dlinktest.com",
        ]
        for URLKeywor2 in input_URLKeyword2:            
            d.scrolldown(500)
            d.element("id", "wf_createButton", sec=a.buffer_time)
            wf_name_input = WebDriverWait(d._driver, a.button_time).until(
                EC.visibility_of_element_located((By.XPATH, '//input[@name="wf_name"]'))
            )
            wf_name_input.clear()
            d.element("input", "wf_url", txt= URLKeywor2 , sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="wf_url" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_ParentalControlURLKeyword_Negative.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalControlURLKeyword_Negative = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalControlURLKeyword_Negative, execution_time, current_time

def PPPoEUsername_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPPoEUsername_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Username1 = [
            "1",
            "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        ]
        for Username1 in input_Username1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "userName_PPPoE", txt=Username1, sec=a.buffer_time)
            #d.element("input", "password_PPPoE", txt=Username1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            result_PPPoEUsername_Limitation.append(True)
        input_Username2 = [
            "",
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for Username2 in input_Username2:            
            d.element("input", "userName_PPPoE", txt=Username2, sec=a.buffer_time)
            #d.element("input", "password_PPPoE", txt=Username1, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="userName_PPPoE" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_PPPoEUsername_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPPoEUsername_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_PPPoEUsername_Limitation, execution_time, current_time

def PPPoEUsername_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPPoEUsername_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Username1 = [
            "!'#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "`abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for Username1 in input_Username1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "userName_PPPoE", txt=Username1, sec=a.buffer_time)
            #d.element("input", "password_PPPoE", txt=Username1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            result_PPPoEUsername_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPPoEUsername_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_PPPoEUsername_Positive, execution_time, current_time

def PPPoEPassword_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPPoEPassword_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Password1 = [
            "",
            "1111111111111111111111111111111111111111111111111111111111111111",
        ]
        for Password1 in input_Password1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            #d.element("input", "userName_PPPoE", txt=Username1, sec=a.buffer_time)
            d.element("input", "password_PPPoE", txt=Password1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            result_PPPoEPassword_Limitation.append(True)
        input_Password2 = [
            "11111111111111111111111111111111111111111111111111111111111111111 ",
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for Password2 in input_Password2:            
            #d.element("input", "userName_PPPoE", txt=Username2, sec=a.buffer_time)
            d.element("input", "password_PPPoE", txt=Password2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="password_PPPoE" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_PPPoEPassword_Limitation.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPPoEPassword_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_PPPoEPassword_Limitation, execution_time, current_time

def PPPoEPassword_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPPoEPassword_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Password1 = [
            "!'#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "`abcdefghijklmnopqrstuvwxyz{|}~",
            " 123456789",
            "012345678 "
        ]
        for Password1 in input_Password1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            #d.element("input", "userName_PPPoE", txt=Username1, sec=a.buffer_time)
            d.element("input", "password_PPPoE", txt=Password1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            result_PPPoEPassword_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPPoEPassword_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_PPPoEPassword_Positive, execution_time, current_time

def PPPoEUsername_Negative():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPPoEUsername_Negative = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Username2 = [
            " 123456789",
            "012345678 "
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for Username2 in input_Username2:            
            d.element("input", "userName_PPPoE", txt=Username2, sec=a.buffer_time)
            #d.element("input", "password_PPPoE", txt=Username1, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="userName_PPPoE" and contains(@class, "error")]'))
            )
            error_text = error_element.text
            print(f"Pass.Error text: {error_text}")
            result_PPPoEUsername_Negative.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPPoEUsername_Negative = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_PPPoEUsername_Negative, execution_time, current_time
    
def WirelessSSID_LanguageCharacters():
    url = a.DUT_GUI_url
    d = Dlink(browser='firefox')
    start_time = time.time()
    result_WirelessSSID_LanguageCharacters = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_WirelessSSID = [
            "Îºá½¹ÏƒÎ¼Îµ",
            "ü„€€€€",
            "ý¿¿¿¿¿",
            "ô€€",
            "€¿€¿€¿€",
            "€‚ƒ„…†‡ˆ‰Š‹Œ",
            "à á â ã ä å æ ç è é ê",
            "ð ñ ò ó ô õ ö ÷",
            "ø ù ú û",
            "ü ý",
            "Àà€ð€€ø€€€ü€",
            "þþÿÿ",
            "ü€€€€¯",
            "üƒ¿¿¿¿",
            "í¿¿",
            "í®€í°€",
            "ï¿¾",
            "ï·ï·‘ï·’ï·“ï·",
            "ðŸ¿¾ðŸ¿¿ð¯¿¾ð¯¿¿",
            "Admin Password",
            "管理員密碼",
            "管理员密码",
            "관리자 비밀번호",
            "Mot de passe d'administration",
            "Senha do administrador",
            "Contraseña de administrador",
            "Password amministratore",
            "Admin-Kennwort",
            "Пароль",
        ]
        for WirelessSSID in input_WirelessSSID:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.scrolldown(500)
            d.element("input", "wifiName_24", txt=WirelessSSID, sec=a.buffer_time)
            d.save_new()
            #check
            d.open(url, a.DUT_admin_pwd)
            d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
            d.element("id", "routerInfo_circle", sec=a.buffer_time)
            d.scrolldown(500)
            NewSSID = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_24G"]'))
            )
            SSID = NewSSID.text
            print(f"The New Wi-Fi Name (SSID) after change is: {SSID}")
            if SSID == WirelessSSID:
                print(f"Pass. The New Wi-Fi Name (SSID) is: {SSID}")
                result_WirelessSSID_LanguageCharacters.append(True)
            else:
                print("Fail.The New Wi-Fi Name (SSID) after change is error.")
                result_WirelessSSID_LanguageCharacters.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WirelessSSID_LanguageCharacters = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WirelessSSID_LanguageCharacters, execution_time, current_time

def WirelessGuestZoneSSID_LanguageCharacters():
    url = a.DUT_GUI_url
    d = Dlink(browser='firefox')
    start_time = time.time()
    result_WirelessGuestZoneSSID_LanguageCharacters = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_GuestZoneSSID = [
            "Îºá½¹ÏƒÎ¼Îµ",
            "ü„€€€€",
            "ý¿¿¿¿¿",
            "ô€€",
            "€¿€¿€¿€",
            "€‚ƒ„…†‡ˆ‰Š‹Œ",
            "à á â ã ä å æ ç è é ê",
            "ð ñ ò ó ô õ ö ÷",
            "ø ù ú û",
            "ü ý",
            "Àà€ð€€ø€€€ü€",
            "þþÿÿ",
            "ü€€€€¯",
            "üƒ¿¿¿¿",
            "í¿¿",
            "í®€í°€",
            "ï¿¾",
            "ï·ï·‘ï·’ï·“ï·",
            "ðŸ¿¾ðŸ¿¿ð¯¿¾ð¯¿¿",
            "Admin Password",
            "管理員密碼",
            "管理员密码",
            "관리자 비밀번호",
            "Mot de passe d'administration",
            "Senha do administrador",
            "Contraseña de administrador",
            "Password amministratore",
            "Admin-Kennwort",
            "Пароль",
        ]
        for GuestZoneSSID in input_GuestZoneSSID:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
            d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
            d.element("input", "wifiName_24g", txt=GuestZoneSSID, sec=a.buffer_time)
            d.save_new()
            #check
            d.open(url, a.DUT_admin_pwd)
            d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
            d.element("id", "routerInfo_circle", sec=a.buffer_time)
            d.scrolldown(500)
            NewSSID = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_24G_Guest"]'))
            )
            SSID = NewSSID.text
            print(f"The New Wi-Fi Name (SSID) after change is: {SSID}")
            if SSID == GuestZoneSSID:
                print(f"Pass. The New Wi-Fi Name (SSID) is: {SSID}")
                result_WirelessGuestZoneSSID_LanguageCharacters.append(True)
            else:
                print("Fail.The New Wi-Fi Name (SSID) after change is error.")
                result_WirelessGuestZoneSSID_LanguageCharacters.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WirelessGuestZoneSSID_LanguageCharacters = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WirelessGuestZoneSSID_LanguageCharacters, execution_time, current_time

def ScheduleName_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ScheduleName_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Names1 = [
            "",
            "_-ABC abc 01234"
        ]
        for Name1 in input_Names1:
            d.element("id", "submenu_Time", sec=a.buffer_time)
            d.element("java", "Schedule", sec=a.buffer_time)
            d.element("id", "createButton", sec=a.buffer_time)
            d.element("input", "schedule_name", txt=Name1, sec=a.buffer_time)
            d.plan("Sunday", "19:00", "22:00", sec=3)
            d.element("xpath", "//*[@id='save_td']/center/button", sec=a.buffer_time)
            d.save_new()
            result_ScheduleName_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ScheduleName_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ScheduleName_Positive, execution_time, current_time

def ClientName_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ClientName_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Names1 = [
            "",
            "_-ABC abc 01234 安安5555555555",
        ]
        for Name1 in input_Names1:
            d.element("id", "clientInfo_circle", sec=a.buffer_time)
            d.scrolldown(500)
            d.element("edit", "editData(1)", sec=a.buffer_time)
            d.element("input", "client_Name", txt=Name1, sec=a.buffer_time)
            d.element("checkbox", "enableAccess",status="enable", sec=a.buffer_time)
            d.element("checkbox", "enableAccess",status="disable", sec=a.buffer_time)
            d.element("id", "check_btn", sec=a.buffer_time)
            result_ClientName_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ClientName_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ClientName_Positive, execution_time, current_time

def DeviceName_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_DeviceName_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Names1 = [
            "ABCabc-0123",
            "",
        ]
        for Name1 in input_Names1:
            d.element("id", "submenu_Network", sec=a.buffer_time)
            d.element("input", "presentDeviceName", txt=Name1, sec=a.buffer_time)
            d.save_new()
            d._driver.refresh()
            time.sleep(5)
            d.open(url, a.DUT_admin_pwd)
            time.sleep(5)
            result_DeviceName_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_DeviceName_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_DeviceName_Positive, execution_time, current_time

def UserName_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_UserName_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_Names1 = [
            "A",
            "1",
            "aaa-1234555555555555"
        ]
        for Name1 in input_Names1:
            d.element("id", "submenu_UserAndDevice", sec=a.buffer_time)
            d.element("id", "createButton", sec=a.buffer_time)
            d.element("input", "shareport_UserName", txt=Name1, sec=a.buffer_time)
            d.element("input", "shareport_Password", txt="a123456789", sec=a.buffer_time)
            d.element("id", "save_buttonFocus", sec=a.buffer_time)
            d.save_new()
            d.open(url, a.DUT_admin_pwd)
            time.sleep(5)
            result_UserName_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_UserName_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_UserName_Positive, execution_time, current_time

def UserPassword_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.open(url, a.DUT_admin_pwd)
    start_time = time.time()
    result_UserPassword_Positive = []
    try:
        input_Name = [
            "A",
            "1",
            "aaa-1234555555555555"
        ]
        input_Password = [
            "1a2b3c4d5e",
            "2a2b3c4d5e",
            "3a2b3c4d5e"
        ]
        for Name, Password in zip(input_Name, input_Password):
            d.element("id", "submenu_UserAndDevice", sec=a.buffer_time)
            d.element("id", "createButton", sec=a.buffer_time)
            d.element("input", "shareport_UserName", txt=Name, sec=a.buffer_time)
            d.element("input", "shareport_Password", txt=Password, sec=a.buffer_time)
            d.element("id", "save_buttonFocus", sec=a.buffer_time)
            d.save_new()
            d.open(url, a.DUT_admin_pwd)
            time.sleep(5)
            result_UserPassword_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_UserPassword_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_UserPassword_Positive, execution_time, current_time

def QuickVPNpwd_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_QuickVPNpwd_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_QuickVPNpwd = [
            a.DUT_admin_pwd,
            "1a2b3c4d5e6f7g8h9i0jKLMNopqrstu1",
        ]
        for QuickVPNpwd in input_QuickVPNpwd:
            d.element("id", "submenu_QuickVPN", sec=a.buffer_time)
            d.element("checkbox", "status_vpn",status="enable", sec=a.buffer_time)
            d.element("input", "userName", txt="admin", sec=a.buffer_time)
            d.element("input", "password", txt=QuickVPNpwd, sec=a.buffer_time)
            d.element("input", "psk", txt=a.DUT_admin_pwd, sec=a.buffer_time)
            d.save_new()
            d.open(url, a.DUT_admin_pwd)
            time.sleep(5)
            result_QuickVPNpwd_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_QuickVPNpwd_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_QuickVPNpwd_Positive, execution_time, current_time

def SmartConnect_refresh30times():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SmartConnect_refresh30times = []
    try:
        d.open(url, a.DUT_admin_pwd)
        for _ in range(30):
            d._driver.refresh()
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            label_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'label[for="status_smart"]'))
            )
            span_enabled = label_element.find_element(By.CLASS_NAME, "chkbox_enabled")
            element_text = span_enabled.text
            if element_text == "Enabled":
                print("The text is 'Enabled'.")
                result_SmartConnect_refresh30times.append(True)
            else:
                print(f"The text is not 'Enabled'.")
                result_SmartConnect_refresh30times.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SmartConnect_refresh30times = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SmartConnect_refresh30times, execution_time, current_time

def SmartConnect_ReopenBrowser10Times():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SmartConnect_ReopenBrowser10Times = []
    try:
        d.open(url, a.DUT_admin_pwd)
        for _ in range(10):
            d.open(url, a.DUT_admin_pwd)
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            label_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'label[for="status_smart"]'))
            )
            span_enabled = label_element.find_element(By.CLASS_NAME, "chkbox_enabled")
            element_text = span_enabled.text
            if element_text == "Enabled":
                print("The text is 'Enabled'.")
                result_SmartConnect_ReopenBrowser10Times.append(True)
            else:
                print(f"The text is not 'Enabled'.")
                result_SmartConnect_ReopenBrowser10Times.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SmartConnect_ReopenBrowser10Times = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SmartConnect_ReopenBrowser10Times, execution_time, current_time

def SmartConnect_SwitchFunctionTable10Times():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SmartConnect_SwitchFunctionTable10Times = []
    try:
        d.open(url, a.DUT_admin_pwd)
        for _ in range(10):
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("id", "menu_Home", sec=a.buffer_time)
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            label_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'label[for="status_smart"]'))
            )
            span_enabled = label_element.find_element(By.CLASS_NAME, "chkbox_enabled")
            element_text = span_enabled.text
            if element_text == "Enabled":
                print("The text is 'Enabled'.")
                result_SmartConnect_SwitchFunctionTable10Times.append(True)
            else:
                print(f"The text is not 'Enabled'.")
                result_SmartConnect_SwitchFunctionTable10Times.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SmartConnect_SwitchFunctionTable10Times = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SmartConnect_SwitchFunctionTable10Times, execution_time, current_time

def SmartConnect_disable():
    file_path = f"{a.Log_folder}\\SmartConnect_disable.log"
    logger = setup_logger(file_path)
    logger.info("Log message for SmartConnect_disable")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SmartConnect_disable = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        label_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, 'label[for="status_smart"]'))
        )
        span_enabled = label_element.find_element(By.CLASS_NAME, "chkbox_disabled")
        element_text = span_enabled.text
        if element_text == "Disabled":
            logger.info("Pass.The text is 'Disabled'.")
            print("Pass.")
            result_SmartConnect_disable = True
        else:
            logger.error(f"Fail.The text is not 'Disabled'.")
            print("Fail")
            result_SmartConnect_disable = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_SmartConnect_disable = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_SmartConnect_disable, execution_time, current_time

def SmartConnect_check24G5G():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SmartConnect_check24G5G = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "routerInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #24GHz
        ShowSSID_24G = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_24G"]'))
        )
        SSID24 = ShowSSID_24G.text
        print(f"The Wi-Fi Name (SSID) is: {SSID24}")
        if SSID24 == a.DUT_Wifi_SSID:
            print(f"Pass.The Wi-Fi Name (SSID) is: {SSID24}")
            result_SmartConnect_check24G5G.append(True)
        else:
            print("Fail.The Wi-Fi Name (SSID) is error.")
            result_SmartConnect_check24G5G.append(False)
        #5GHz
        ShowSSID_5G = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_5G"]'))
        )
        SSID5 = ShowSSID_5G.text
        print(f"The Wi-Fi Name (SSID) is: {SSID5}")
        if SSID5 == a.DUT_Wifi_SSID:
            print(f"Pass.The Wi-Fi Name (SSID) is: {SSID5}")
            result_SmartConnect_check24G5G.append(True)
        else:
            print("Fail.The Wi-Fi Name (SSID) is error.")
            result_SmartConnect_check24G5G.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SmartConnect_check24G5G = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SmartConnect_check24G5G, execution_time, current_time

def SmartConnect_check24G():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SmartConnect_check24G = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "routerInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #24GHz
        ShowSSID_24G = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_24G"]'))
        )
        SSID24 = ShowSSID_24G.text
        print(f"The Wi-Fi Name (SSID) is: {SSID24}")
        if SSID24 == a.DUT_Wifi_SSID:
            print(f"Pass.The Wi-Fi Name (SSID) is: {SSID24}")
            result_SmartConnect_check24G = True
        else:
            print("Fail.The Wi-Fi Name (SSID) is error.")
            result_SmartConnect_check24G = False
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SmartConnect_check24G = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SmartConnect_check24G, execution_time, current_time

def ChromeCheck_Chinese():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.language_select(url, a.DUT_admin_pwd, "zh-tw")
    start_time = time.time()
    result_ChromeCheck_Chinese = []
    try:
        elements_to_check = [
            {"id": "menu_Home", "expected_text": "首頁"},
            {"id": "menu_Settings", "expected_text": "基本設定"},
            {"id": "submenu_Internet", "expected_text": "網際網路"},
            {"id": "submenu_WiFi", "expected_text": "無線網路"},
            {"id": "submenu_Network", "expected_text": "區域網路"},
            {"id": "submenu_Mydlink", "expected_text": "D-Link雲端服務"},
            {"id": "submenu_OperationMode", "expected_text": "操作模式"},
            {"id": "menu_Advanced", "expected_text": "功能"},
            {"id": "submenu_ParentalControl", "expected_text": "家長控制"},
            {"id": "submenu_QoS", "expected_text": "QoS Engine"},
            {"id": "submenu_Firewall", "expected_text": "防火牆"},
            {"id": "submenu_PortForwarding", "expected_text": "連接埠轉送"},
            {"id": "submenu_StaticRoute", "expected_text": "固定路由表"},
            {"id": "submenu_DynamicDNS", "expected_text": "動態 DNS"},
            {"id": "submenu_QuickVPN", "expected_text": "Quick VPN"},
            {"id": "menu_Management", "expected_text": "系統管理"},
            {"id": "submenu_Time", "expected_text": "時間與排程"},
            {"id": "submenu_SystemLog", "expected_text": "系統日誌"},
            {"id": "submenu_Admin", "expected_text": "系統管理者"},
            {"id": "submenu_UserAndDevice", "expected_text": "使用者"},
            {"id": "submenu_UpdateFirmware", "expected_text": "韌體更新"},
            {"id": "submenu_Statistics", "expected_text": "統計"},
        ]
        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]
            element = WebDriverWait(d._driver, a.button_time).until(
                EC.element_to_be_clickable((By.ID, element_id))
            )
            element.click()
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Chinese.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Chinese.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChromeCheck_Chinese = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCheck_Chinese, execution_time, current_time

def ChromeCheck_Simplified():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.language_select(url, a.DUT_admin_pwd, "zh-cn")
    start_time = time.time()
    result_ChromeCheck_Simplified = []
    try:
        elements_to_check = [
            {"id": "menu_Home", "expected_text": "首页"},
            {"id": "menu_Settings", "expected_text": "设置"},
            {"id": "submenu_Internet", "expected_text": "网际网络"},
            {"id": "submenu_WiFi", "expected_text": "无线"},
            {"id": "submenu_Network", "expected_text": "网络"},
            {"id": "submenu_Mydlink", "expected_text": "D-Link云"},
            {"id": "submenu_OperationMode", "expected_text": "运行模式"},
            {"id": "menu_Advanced", "expected_text": "功能"},
            {"id": "submenu_ParentalControl", "expected_text": "家长控制"},
            {"id": "submenu_QoS", "expected_text": "QoS引擎"},
            {"id": "submenu_Firewall", "expected_text": "防火墙"},
            {"id": "submenu_PortForwarding", "expected_text": "端口转发"},
            {"id": "submenu_StaticRoute", "expected_text": "静态路由"},
            {"id": "submenu_DynamicDNS", "expected_text": "动态DNS"},
            {"id": "submenu_QuickVPN", "expected_text": "快速VPN"},
            {"id": "menu_Management", "expected_text": "管理"},
            {"id": "submenu_Time", "expected_text": "时间和计划"},
            {"id": "submenu_SystemLog", "expected_text": "系统日志"},
            {"id": "submenu_Admin", "expected_text": "系统管理"},
            {"id": "submenu_UserAndDevice", "expected_text": "用户"},
            {"id": "submenu_UpdateFirmware", "expected_text": "固件升级"},
            {"id": "submenu_Statistics", "expected_text": "统计数据"},
        ]
        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]
            element = WebDriverWait(d._driver, a.button_time).until(
                EC.element_to_be_clickable((By.ID, element_id))
            )
            element.click()
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Simplified.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Simplified.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChromeCheck_Simplified = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCheck_Simplified, execution_time, current_time

def ChromeCheck_Korean():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.language_select(url, a.DUT_admin_pwd, "ko-kr")
    start_time = time.time()
    result_ChromeCheck_Korean = []
    try:
        elements_to_check = [
            {"id": "menu_Home", "expected_text": "홈"},
            {"id": "menu_Settings", "expected_text": "설정"},
            {"id": "submenu_Internet", "expected_text": "인터넷"},
            {"id": "submenu_WiFi", "expected_text": "무선"},
            {"id": "submenu_Network", "expected_text": "네트워크"},
            {"id": "submenu_Mydlink", "expected_text": "D-Link 클라우드"},
            {"id": "submenu_OperationMode", "expected_text": "동작 모드"},
            {"id": "menu_Advanced", "expected_text": "기능"},
            {"id": "submenu_ParentalControl", "expected_text": "자녀 보호 설정"},
            {"id": "submenu_QoS", "expected_text": "QoS 엔진"},
            {"id": "submenu_Firewall", "expected_text": "방화벽"},
            {"id": "submenu_PortForwarding", "expected_text": "포트 포워딩"},
            {"id": "submenu_StaticRoute", "expected_text": "고정 경로"},
            {"id": "submenu_DynamicDNS", "expected_text": "다이나믹 DNS"},
            {"id": "submenu_QuickVPN", "expected_text": "퀵 VPN"},
            {"id": "menu_Management", "expected_text": "관리"},
            {"id": "submenu_Time", "expected_text": "시간 및 스케줄"},
            {"id": "submenu_SystemLog", "expected_text": "시스템 로그"},
            {"id": "submenu_Admin", "expected_text": "시스템 관리자"},
            {"id": "submenu_UserAndDevice", "expected_text": "사용자"},
            {"id": "submenu_UpdateFirmware", "expected_text": "업그레이드"},
            {"id": "submenu_Statistics", "expected_text": "통계"},
        ]
        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]
            element = WebDriverWait(d._driver, a.button_time).until(
                EC.element_to_be_clickable((By.ID, element_id))
            )
            element.click()
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Korean.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Korean.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChromeCheck_Korean = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCheck_Korean, execution_time, current_time

def ChromeCheck_France():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.language_select(url, a.DUT_admin_pwd, "fr-fr")
    start_time = time.time()
    result_ChromeCheck_France = []
    try:
        elements_to_check = [
            {"id": "menu_Home", "expected_text": "Accueil"},
            {"id": "menu_Settings", "expected_text": "Paramètres"},
            {"id": "submenu_Internet", "expected_text": "Internet(WAN)"},
            {"id": "submenu_WiFi", "expected_text": "Sans fil(Wi-Fi)"},
            {"id": "submenu_Network", "expected_text": "Réseau(LAN)"},
            {"id": "submenu_Mydlink", "expected_text": "Cloud D-Link"},
            {"id": "submenu_OperationMode", "expected_text": "Mode de fonctionnement"},
            {"id": "menu_Advanced", "expected_text": "Fonctionnalités"},
            {"id": "submenu_ParentalControl", "expected_text": "Contrôle parental"},
            {"id": "submenu_QoS", "expected_text": "Moteur QoS"},
            {"id": "submenu_Firewall", "expected_text": "Pare-feu"},
            {"id": "submenu_PortForwarding", "expected_text": "Redirection de port"},
            {"id": "submenu_StaticRoute", "expected_text": "Routes statiques"},
            {"id": "submenu_DynamicDNS", "expected_text": "DNS dynamique"},
            {"id": "submenu_QuickVPN", "expected_text": "VPN rapide"},
            {"id": "menu_Management", "expected_text": "Gestion"},
            {"id": "submenu_Time", "expected_text": "Calendrier"},
            {"id": "submenu_SystemLog", "expected_text": "Journal système"},
            {"id": "submenu_Admin", "expected_text": "Admin système"},
            {"id": "submenu_UserAndDevice", "expected_text": "Utilisateur"},
            {"id": "submenu_UpdateFirmware", "expected_text": "Mettre à jour"},
            {"id": "submenu_Statistics", "expected_text": "Statistiques"},
        ]
        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]
            element = WebDriverWait(d._driver, a.button_time).until(
                EC.element_to_be_clickable((By.ID, element_id))
            )
            element.click()
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_France.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_France.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChromeCheck_France = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCheck_France, execution_time, current_time

def ChromeCheck_Portuguese():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.language_select(url, a.DUT_admin_pwd, "pt-br")
    start_time = time.time()
    result_ChromeCheck_Portuguese = []
    try:
        elements_to_check = [
            {"id": "menu_Home", "expected_text": "Home"},
            {"id": "menu_Settings", "expected_text": "Configurações"},
            {"id": "submenu_Internet", "expected_text": "Internet (WAN)"},
            {"id": "submenu_WiFi", "expected_text": "Wireless (Wi-Fi)"},
            {"id": "submenu_Network", "expected_text": "Rede (LAN)"},
            {"id": "submenu_Mydlink", "expected_text": "Nuvem D-Link"},
            {"id": "submenu_OperationMode", "expected_text": "Modo de Operação"},
            {"id": "menu_Advanced", "expected_text": "Funcionalidades"},
            {"id": "submenu_ParentalControl", "expected_text": "Controlo Parental"},
            {"id": "submenu_QoS", "expected_text": "Ferramenta QoS"},
            {"id": "submenu_Firewall", "expected_text": "Firewall e Segurança"},
            {"id": "submenu_PortForwarding", "expected_text": "Redirecionamento de portas"},
            {"id": "submenu_StaticRoute", "expected_text": "Rotas Estáticas"},
            {"id": "submenu_DynamicDNS", "expected_text": "DNS Dinâmico"},
            {"id": "submenu_QuickVPN", "expected_text": "Quick VPN"},
            {"id": "menu_Management", "expected_text": "Gerenciamento"},
            {"id": "submenu_Time", "expected_text": "Relógio e Programação"},
            {"id": "submenu_SystemLog", "expected_text": "Registros do Roteador"},
            {"id": "submenu_Admin", "expected_text": "Administração e Sistema"},
            {"id": "submenu_UserAndDevice", "expected_text": "Usuário"},
            {"id": "submenu_UpdateFirmware", "expected_text": "Atualizar"},
            {"id": "submenu_Statistics", "expected_text": "Estatísticas"},
        ]
        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]
            element = WebDriverWait(d._driver, a.button_time).until(
                EC.element_to_be_clickable((By.ID, element_id))
            )
            element.click()
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Portuguese.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Portuguese.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChromeCheck_Portuguese = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCheck_Portuguese, execution_time, current_time

def ChromeCheck_Espanol():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.language_select(url, a.DUT_admin_pwd, "es-es")
    start_time = time.time()
    result_ChromeCheck_Espanol = []
    try:
        elements_to_check = [
            {"id": "menu_Home", "expected_text": "Inicio"},
            {"id": "menu_Settings", "expected_text": "Configuración"},
            {"id": "submenu_Internet", "expected_text": "Internet"},
            {"id": "submenu_WiFi", "expected_text": "Inalámbrico"},
            {"id": "submenu_Network", "expected_text": "Red"},
            {"id": "submenu_Mydlink", "expected_text": "D-Link Cloud"},
            {"id": "submenu_OperationMode", "expected_text": "Modo de funcionamiento"},
            {"id": "menu_Advanced", "expected_text": "Características"},
            {"id": "submenu_ParentalControl", "expected_text": "Control paterno"},
            {"id": "submenu_QoS", "expected_text": "QoS"},
            {"id": "submenu_Firewall", "expected_text": "Cortafuegos"},
            {"id": "submenu_PortForwarding", "expected_text": "Direccionamiento de puertos"},
            {"id": "submenu_StaticRoute", "expected_text": "Rutas estáticas"},
            {"id": "submenu_DynamicDNS", "expected_text": "DNS dinámico"},
            {"id": "submenu_QuickVPN", "expected_text": "VPN rápida"},
            {"id": "menu_Management", "expected_text": "Gestión"},
            {"id": "submenu_Time", "expected_text": "Hora y programación"},
            {"id": "submenu_SystemLog", "expected_text": "Registro del sistema"},
            {"id": "submenu_Admin", "expected_text": "Administrador del sistema"},
            {"id": "submenu_UserAndDevice", "expected_text": "Usuario"},
            {"id": "submenu_UpdateFirmware", "expected_text": "Actualizar"},
            {"id": "submenu_Statistics", "expected_text": "Estadísticas"},
        ]
        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]
            element = WebDriverWait(d._driver, a.button_time).until(
                EC.element_to_be_clickable((By.ID, element_id))
            )
            element.click()
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Espanol.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Espanol.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChromeCheck_Espanol = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCheck_Espanol, execution_time, current_time

def ChromeCheck_Italian():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.language_select(url, a.DUT_admin_pwd, "it-it")
    start_time = time.time()
    result_ChromeCheck_Italian = []
    try:
        elements_to_check = [
            {"id": "menu_Home", "expected_text": "Home"},
            {"id": "menu_Settings", "expected_text": "Impostazioni"},
            {"id": "submenu_Internet", "expected_text": "Internet"},
            {"id": "submenu_WiFi", "expected_text": "Wireless"},
            {"id": "submenu_Network", "expected_text": "Rete"},
            {"id": "submenu_Mydlink", "expected_text": "D-Link Cloud"},
            {"id": "submenu_OperationMode", "expected_text": "Modalità operativa"},
            {"id": "menu_Advanced", "expected_text": "Caratteristiche"},
            {"id": "submenu_ParentalControl", "expected_text": "Controllo parentale"},
            {"id": "submenu_QoS", "expected_text": "Motore QoS"},
            {"id": "submenu_Firewall", "expected_text": "Firewall"},
            {"id": "submenu_PortForwarding", "expected_text": "Inoltro porte"},
            {"id": "submenu_StaticRoute", "expected_text": "Route statiche"},
            {"id": "submenu_DynamicDNS", "expected_text": "DNS dinamico"},
            {"id": "submenu_QuickVPN", "expected_text": "VPN rapida"},
            {"id": "menu_Management", "expected_text": "Gestione"},
            {"id": "submenu_Time", "expected_text": "Ora e pianificazione"},
            {"id": "submenu_SystemLog", "expected_text": "Log di sistema"},
            {"id": "submenu_Admin", "expected_text": "Amministratore di sistema"},
            {"id": "submenu_UserAndDevice", "expected_text": "Utente"},
            {"id": "submenu_UpdateFirmware", "expected_text": "Aggiorna"},
            {"id": "submenu_Statistics", "expected_text": "Statistiche"},
        ]
        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]
            element = WebDriverWait(d._driver, a.button_time).until(
                EC.element_to_be_clickable((By.ID, element_id))
            )
            element.click()
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Italian.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Italian.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChromeCheck_Italian = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCheck_Italian, execution_time, current_time

def ChromeCheck_Deutsch():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.language_select(url, a.DUT_admin_pwd, "de-de")
    start_time = time.time()
    result_ChromeCheck_Deutsch = []
    try:
        elements_to_check = [
            {"id": "menu_Home", "expected_text": "Startseite"},
            {"id": "menu_Settings", "expected_text": "Einstellungen"},
            {"id": "submenu_Internet", "expected_text": "Internet"},
            {"id": "submenu_WiFi", "expected_text": "WLAN"},
            {"id": "submenu_Network", "expected_text": "Netzwerk"},
            {"id": "submenu_Mydlink", "expected_text": "D-Link Cloud"},
            {"id": "submenu_OperationMode", "expected_text": "Betriebsmodus"},
            {"id": "menu_Advanced", "expected_text": "Merkmale"},
            {"id": "submenu_ParentalControl", "expected_text": "Kinderschutz"},
            {"id": "submenu_QoS", "expected_text": "QoS Engine"},
            {"id": "submenu_Firewall", "expected_text": "Firewall"},
            {"id": "submenu_PortForwarding", "expected_text": "Portweiterleitung"},
            {"id": "submenu_StaticRoute", "expected_text": "Statische Routes"},
            {"id": "submenu_DynamicDNS", "expected_text": "Dynamischer DNS"},
            {"id": "submenu_QuickVPN", "expected_text": "Quick VPN"},
            {"id": "menu_Management", "expected_text": "Verwaltung"},
            {"id": "submenu_Time", "expected_text": "Zeit & Zeitplan"},
            {"id": "submenu_SystemLog", "expected_text": "Systemprotokoll"},
            {"id": "submenu_Admin", "expected_text": "Systemverwaltung"},
            {"id": "submenu_UserAndDevice", "expected_text": "Benutzer"},
            {"id": "submenu_UpdateFirmware", "expected_text": "Upgrade"},
            {"id": "submenu_Statistics", "expected_text": "Statistik"},
        ]
        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]
            element = WebDriverWait(d._driver, a.button_time).until(
                EC.element_to_be_clickable((By.ID, element_id))
            )
            element.click()
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Deutsch.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Deutsch.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChromeCheck_Deutsch = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCheck_Deutsch, execution_time, current_time

def ChromeCheck_Russian():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    d.language_select(url, a.DUT_admin_pwd, "ru-ru")
    start_time = time.time()
    result_ChromeCheck_Russian = []
    try:
        elements_to_check = [
            {"id": "menu_Home", "expected_text": "Главная"},
            {"id": "menu_Settings", "expected_text": "Настройки"},
            {"id": "submenu_Internet", "expected_text": "Интернет"},
            {"id": "submenu_WiFi", "expected_text": "Беспроводная сеть"},
            {"id": "submenu_Network", "expected_text": "Сеть"},
            {"id": "submenu_Mydlink", "expected_text": "Облако D-Link"},
            {"id": "submenu_OperationMode", "expected_text": "Режим работы"},
            {"id": "menu_Advanced", "expected_text": "Функции"},
            {"id": "submenu_ParentalControl", "expected_text": "Родительский контроль"},
            {"id": "submenu_QoS", "expected_text": "QoS Engine"},
            {"id": "submenu_Firewall", "expected_text": "Межсетевой экран"},
            {"id": "submenu_PortForwarding", "expected_text": "Перенаправление портов"},
            {"id": "submenu_StaticRoute", "expected_text": "Статические маршруты"},
            {"id": "submenu_DynamicDNS", "expected_text": "Dynamic DNS"},
            {"id": "submenu_QuickVPN", "expected_text": "Quick VPN"},
            {"id": "menu_Management", "expected_text": "Управление"},
            {"id": "submenu_Time", "expected_text": "Время и расписание"},
            {"id": "submenu_SystemLog", "expected_text": "Системный журнал Syslog"},
            {"id": "submenu_Admin", "expected_text": "Системный Администратор"},
            {"id": "submenu_UserAndDevice", "expected_text": "Иользователя"},
            {"id": "submenu_UpdateFirmware", "expected_text": "Обновить"},
            {"id": "submenu_Statistics", "expected_text": "Статистика"},
        ]
        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]
            element = WebDriverWait(d._driver, a.button_time).until(
                EC.element_to_be_clickable((By.ID, element_id))
            )
            element.click()
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Russian.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_ChromeCheck_Russian.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChromeCheck_Russian = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChromeCheck_Russian, execution_time, current_time

def BrowserCheckDUTWiFiName(browser_name):
    result_BrowserCheckDUTWiFiName = []
    start_time = time.time()
    print("DUT Model Name:", a.DUT_modelName)
    print("DUT MAC:", a.DUTMAC)
    try:
        if browser_name == 'chrome':
            chrome_options = webdriver.ChromeOptions()
            chrome_options.add_argument('--ignore-certificate-errors')
            chrome_options.add_argument('--incognito')
            driver = webdriver.Chrome(options=chrome_options)
        elif browser_name == 'edge':
            edge_options = webdriver.EdgeOptions()
            edge_options.add_argument('--ignore-certificate-errors')
            edge_options.add_argument('--incognito')
            driver = webdriver.Edge(options=edge_options)
        elif browser_name == 'firefox':
            firefox_options = webdriver.FirefoxOptions()
            firefox_options.add_argument('--ignore-certificate-errors')
            firefox_options.add_argument('--incognito')
            driver = webdriver.Firefox(options=firefox_options)
        else:
            raise ValueError("Invalid browser name")
        url = a.DUT_GUI_url
        driver.set_window_size(a.W, a.H)
        driver.get(url)
        print(f"Open Home page with {browser_name}")
        time.sleep(5)
        Language = [
            "en-us",
        ]
        for desired_language in Language:
            try:
                # Change Language to desired_language
                language_select = Select(driver.find_element(By.ID, "Language"))
                language_select.select_by_value(desired_language)
                time.sleep(5)
            except Exception as e:
                print(f"Fail to change language to {desired_language}. Exception: {e}")
                result_BrowserCheckDUTWiFiName.append(False)
            else:
                print(f"Successfully changed language to {desired_language}")
                result_BrowserCheckDUTWiFiName.append(True)
        # Input password
        time.sleep(2)
        password = driver.find_element("name", "admin_Password")
        actions = ActionChains(driver)
        actions.move_to_element(password).click().perform()
        time.sleep(2)
        password.send_keys(a.DUT_admin_pwd + Keys.ENTER)
        print("Enter Password")
        time.sleep(3)
        driver.refresh()
        time.sleep(3)
        routerInfo_circle = WebDriverWait(driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "routerInfo_circle"))
        )
        routerInfo_circle.click()
        router = WebDriverWait(driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "index_ShowSSID_24G")))
        time.sleep(5)
        search_elements = [a.DUT_modelName, a.DUTMAC]
        results = {}
        for element in search_elements:
            try:
                elements = WebDriverWait(driver, a.button_time).until(
                    EC.presence_of_all_elements_located((By.XPATH, f'//*[contains(translate(text(), "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz"), "{element.lower()}")]'))
                )
                if elements:
                    results[element] = True
                    print(f"Elements found with text: {element}")
                else:
                    results[element] = False
                    print(f"No elements found with text: {element}")
            except Exception as e:
                print(f"An error occurred while searching for {element}: {str(e)}")
        if results.get(a.DUT_modelName) and results.get(a.DUTMAC):
            print(f"{a.DUT_modelName} and {a.DUTMAC} were found.")
            result_BrowserCheckDUTWiFiName = True
        else:
            print(f"Either {a.DUT_modelName} or {a.DUTMAC} was not found.")
            result_BrowserCheckDUTWiFiName = False
    except Exception as e:
        print(f"Fail. Exception: {e}")
        result_BrowserCheckDUTWiFiName.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        if driver:
            driver.quit()
        return result_BrowserCheckDUTWiFiName, execution_time, current_time
def run_BrowserCheckDUTWiFiName_all_browsers():
    browsers = ['chrome', 'edge', 'firefox']
    all_results = {}
    for browser in browsers:
        result, execution_time, current_time = BrowserCheckDUTWiFiName(browser)
        all_results[browser] = result
    return all_results, execution_time, current_time

#DHCP
def run_DHCPDefaultWizard(browser, language, title_keyword):
    result_DHCPDefaultWizard = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser=browser)
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        # Policy
        d.element("downmenu", language, sec=a.buffer_time)
        # Check wizard title
        wizard_title = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.ID, "wizard_title"))
        )
        title = wizard_title.text
        if title == title_keyword:
            print(f"Pass.The text is {title}.")
            result_DHCPDefaultWizard.append(True)
        else:
            print(f"Fail.The text is {title}.")
            result_DHCPDefaultWizard.append(False)
        # Wizard steps
        d.element("id", "btn_agree", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        time.sleep(a.wizard_time)
        # Check
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        print(f"Dut has finished wizard and can access the login page.")
        result_DHCPDefaultWizard.append(True)
        print("Pass")
        time.sleep(10)
    except TimeoutException:
        print(f"Dut has not finished wizard and cannot access the login page.")
        result_DHCPDefaultWizard.append(False)
        print("Fail.TimeoutException..")
        time.sleep(10)
    except Exception:
        print(f"Fail.Exception...")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_DHCPDefaultWizard = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_DHCPDefaultWizard, execution_time, current_time
    
#DHCP_Chrome
def DHCPDefaultWizard_ChromeEnglish():
    return run_DHCPDefaultWizard('chrome', 'English', 'Terms Of Use And Privacy Policy')
def DHCPDefaultWizard_ChromeChinese():
    return run_DHCPDefaultWizard('chrome', '繁體中文', '使用條款和隱私權政策')
def DHCPDefaultWizard_ChromeSimplified():
    return run_DHCPDefaultWizard('chrome', '简体中文', '使用条款和隐私策略')
def DHCPDefaultWizard_ChromeKorean():
    return run_DHCPDefaultWizard('chrome', '한국', '이용 약관 및 개인 정보 보호 정책')
def DHCPDefaultWizard_ChromeFrance():
    return run_DHCPDefaultWizard('chrome', 'français', "Conditions D'Utilisation Et Politique De Confidentialité")
def DHCPDefaultWizard_ChromePortuguese():
    return run_DHCPDefaultWizard('chrome', 'português', "Termos De Uso E Política De Privacidade")
def DHCPDefaultWizard_ChromeEspanol():
    return run_DHCPDefaultWizard('chrome', 'Español', "Términos De Uso Y Política De Privacidad")
def DHCPDefaultWizard_ChromeItalian():
    return run_DHCPDefaultWizard('chrome', 'Italiano', "Condizioni D'Uso E Politica Sulla Privacy")
def DHCPDefaultWizard_ChromeDeutsch():
    return run_DHCPDefaultWizard('chrome', 'Deutsch', "Nutzungsbedingungen Und Datenschutzrichtlinie")
def DHCPDefaultWizard_ChromeRussian():
    return run_DHCPDefaultWizard('chrome', 'русский', "Условия Использования И Политика Приватности")

#CHT
def run_CHTDefaultWizard(browser, language, title_keyword):
    result_CHTDefaultWizard = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser=browser)
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        # Policy
        d.element("downmenu", language, sec=a.buffer_time)
        # Check wizard title
        wizard_title = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.ID, "wizard_title"))
        )
        title = wizard_title.text
        if title == title_keyword:
            print(f"Pass.The text is {title}.")
            result_CHTDefaultWizard.append(True)
        else:
            print(f"Fail.The text is {title}.")
            result_CHTDefaultWizard.append(False)
        # Wizard steps
        d.element("id", "btn_agree", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        time.sleep(15)
        d.element("input", "pppoe_username",txt=a.CHT_name,sec=a.buffer_time)
        d.element("input", "pppoe_password",txt=a.CHT_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        time.sleep(15)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        time.sleep(a.wizard_time)
        # Check
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        print(f"Dut has finished wizard and can access the login page.")
        result_CHTDefaultWizard.append(True)
        print("Pass")
        time.sleep(10)
    except TimeoutException:
        print(f"Dut has not finished wizard and cannot access the login page.")
        result_CHTDefaultWizard.append(False)
        print("Fail.TimeoutException..")
        time.sleep(10)
    except Exception:
        print(f"Fail.Exception...")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CHTDefaultWizard = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CHTDefaultWizard, execution_time, current_time
    
#CHT_Chrome
def CHTDefaultWizard_ChromeEnglish():
    return run_CHTDefaultWizard('chrome', 'English', 'Terms Of Use And Privacy Policy')
def CHTDefaultWizard_ChromeChinese():
    return run_CHTDefaultWizard('chrome', '繁體中文', '使用條款和隱私權政策')
def CHTDefaultWizard_ChromeSimplified():
    return run_CHTDefaultWizard('chrome', '简体中文', '使用条款和隐私策略')
def CHTDefaultWizard_ChromeKorean():
    return run_CHTDefaultWizard('chrome', '한국', '이용 약관 및 개인 정보 보호 정책')
def CHTDefaultWizard_ChromeFrance():
    return run_CHTDefaultWizard('chrome', 'français', "Conditions D'Utilisation Et Politique De Confidentialité")
def CHTDefaultWizard_ChromePortuguese():
    return run_CHTDefaultWizard('chrome', 'português', "Termos De Uso E Política De Privacidade")
def CHTDefaultWizard_ChromeEspanol():
    return run_CHTDefaultWizard('chrome', 'Español', "Términos De Uso Y Política De Privacidad")
def CHTDefaultWizard_ChromeItalian():
    return run_CHTDefaultWizard('chrome', 'Italiano', "Condizioni D'Uso E Politica Sulla Privacy")
def CHTDefaultWizard_ChromeDeutsch():
    return run_CHTDefaultWizard('chrome', 'Deutsch', "Nutzungsbedingungen Und Datenschutzrichtlinie")
def CHTDefaultWizard_ChromeRussian():
    return run_CHTDefaultWizard('chrome', 'русский', "Условия Использования И Политика Приватности")

#NoWAN
def run_NoWanDefaultWizard(browser, language, title_keyword):
    result_NoWanDefaultWizard = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser=browser)
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(3)
        # Policy
        d.element("downmenu", language, sec=a.buffer_time)
        # Check wizard title
        wizard_title = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.ID, "wizard_title"))
        )
        title = wizard_title.text
        if title == title_keyword:
            print(f"Pass.The text is {title}.")
            result_NoWanDefaultWizard.append(True)
        else:
            print(f"Fail.The text is {title}.")
            result_NoWanDefaultWizard.append(False)
        # Wizard steps
        d.element("id", "btn_agree", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        #I understand and want to continue
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "cb_dhcp", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        time.sleep(15)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        time.sleep(a.wizard_time)
        # Check
        d.open(url, a.DUT_admin_pwd)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        print(f"Dut has finished wizard and can access the login page.")
        result_NoWanDefaultWizard.append(True)
        print("Pass")
        time.sleep(10)
    except TimeoutException:
        print(f"Dut has not finished wizard and cannot access the login page.")
        result_NoWanDefaultWizard.append(False)
        print("Fail.TimeoutException..")
        time.sleep(10)
    except Exception:
        print(f"Fail.Exception...")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_NoWanDefaultWizard = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_NoWanDefaultWizard, execution_time, current_time
    
#NoWan_Chrome
def NoWanDefaultWizard_ChromeEnglish():
    return run_NoWanDefaultWizard('chrome', 'English', 'Terms Of Use And Privacy Policy')
def NoWanDefaultWizard_ChromeChinese():
    return run_NoWanDefaultWizard('chrome', '繁體中文', '使用條款和隱私權政策')
def NoWanDefaultWizard_ChromeSimplified():
    return run_NoWanDefaultWizard('chrome', '简体中文', '使用条款和隐私策略')
def NoWanDefaultWizard_ChromeKorean():
    return run_NoWanDefaultWizard('chrome', '한국', '이용 약관 및 개인 정보 보호 정책')
def NoWanDefaultWizard_ChromeFrance():
    return run_NoWanDefaultWizard('chrome', 'français', "Conditions D'Utilisation Et Politique De Confidentialité")
def NoWanDefaultWizard_ChromePortuguese():
    return run_NoWanDefaultWizard('chrome', 'português', "Termos De Uso E Política De Privacidade")
def NoWanDefaultWizard_ChromeEspanol():
    return run_NoWanDefaultWizard('chrome', 'Español', "Términos De Uso Y Política De Privacidad")
def NoWanDefaultWizard_ChromeItalian():
    return run_NoWanDefaultWizard('chrome', 'Italiano', "Condizioni D'Uso E Politica Sulla Privacy")
def NoWanDefaultWizard_ChromeDeutsch():
    return run_NoWanDefaultWizard('chrome', 'Deutsch', "Nutzungsbedingungen Und Datenschutzrichtlinie")
def NoWanDefaultWizard_ChromeRussian():
    return run_NoWanDefaultWizard('chrome', 'русский', "Условия Использования И Политика Приватности")


#DHCP_Firefox
def DHCPDefaultWizard_FirefoxEnglish():
    return run_DHCPDefaultWizard('firefox', 'English', 'Terms Of Use And Privacy Policy')
#DHCP_Edge
def DHCPDefaultWizard_EdgeEnglish():
    return run_DHCPDefaultWizard('edge', 'English', 'Terms Of Use And Privacy Policy')
#DHCP_edge_chromium
def DHCPDefaultWizard_EdgeChromiumEnglish():
    return run_DHCPDefaultWizard('edge_chromium', 'English', 'Terms Of Use And Privacy Policy')

#CHT_Firefox
def CHTDefaultWizard_FirefoxEnglish():
    return run_CHTDefaultWizard('firefox', 'English', 'Terms Of Use And Privacy Policy')
#CHT_Edge
def CHTDefaultWizard_EdgeEnglish():
    return run_CHTDefaultWizard('edge', 'English', 'Terms Of Use And Privacy Policy')
#CHT_edge_chromium
def CHTDefaultWizard_EdgeChromiumEnglish():
    return run_CHTDefaultWizard('edge_chromium', 'English', 'Terms Of Use And Privacy Policy')

#NoWan_Firefox
def NoWanDefaultWizard_FirefoxEnglish():
    return run_NoWanDefaultWizard('firefox', 'English', 'Terms Of Use And Privacy Policy')
#NoWan_Edge
def NoWanDefaultWizard_EdgeEnglish():
    return run_NoWanDefaultWizard('edge', 'English', 'Terms Of Use And Privacy Policy')
#NoWan_edge_chromium
def NoWanDefaultWizard_EdgeChromiumEnglish():
    return run_NoWanDefaultWizard('edge_chromium', 'English', 'Terms Of Use And Privacy Policy')


def perform_browser_check(browser_name):
    url = a.DUT_GUI_url
    d = Dlink(browser=browser_name)
    d.language_select(url, a.DUT_admin_pwd, "en-us")
    start_time = time.time()
    result_browser_check = []
    try:
        elements_to_check = [
            {"id": "rwdBtn_Topology", "expected_text": "Home"},
            {"id": "menu_Settings", "expected_text": "Settings"},
            {"id": "submenu_Internet", "expected_text": "Internet"},
            {"id": "submenu_WiFi", "expected_text": "Wireless"},
            {"id": "submenu_Network", "expected_text": "Network"},
            {"id": "submenu_Mydlink", "expected_text": "D-Link Cloud"},
            {"id": "submenu_OperationMode", "expected_text": "Operation Mode"},
            {"id": "menu_Advanced", "expected_text": "Features"},
            {"id": "submenu_ParentalControl", "expected_text": "Parental Control"},
            {"id": "submenu_QoS", "expected_text": "QoS Engine"},
            {"id": "submenu_Firewall", "expected_text": "Firewall"},
            {"id": "submenu_PortForwarding", "expected_text": "Port Forwarding"},
            {"id": "submenu_StaticRoute", "expected_text": "Static Routes"},
            {"id": "submenu_DynamicDNS", "expected_text": "Dynamic DNS"},
            {"id": "submenu_QuickVPN", "expected_text": "Quick VPN"},
            {"id": "menu_Management", "expected_text": "Management"},
            {"id": "submenu_Time", "expected_text": "Time & Schedule"},
            {"id": "submenu_SystemLog", "expected_text": "System Log"},
            {"id": "submenu_Admin", "expected_text": "System Admin"},
            {"id": "submenu_UserAndDevice", "expected_text": "User"},
            {"id": "submenu_UpdateFirmware", "expected_text": "Upgrade"},
            {"id": "submenu_Statistics", "expected_text": "Statistics"},
        ]

        # Check each element
        for element_info in elements_to_check:
            element_id = element_info["id"]
            expected_text = element_info["expected_text"]

            element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.ID, element_id))
            )
            d._driver.execute_script("arguments[0].click();", element)

            element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.ID, element_id))
            )
            actual_text = element.text
            print(f"{element_id}: {actual_text}")
            time.sleep(5)

            if actual_text == expected_text:
                print(f"Pass: {expected_text}")
                time.sleep(5)
                result_browser_check.append(True)
            else:
                print(f"Fail: {expected_text}")
                time.sleep(5)
                result_browser_check.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_browser_check = False
        time.sleep(5)
    finally:
        print(result_browser_check)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_browser_check, execution_time, current_time
    
def ChromeCheck_English():
    return perform_browser_check('chrome')

def FirefoxCheck_English():
    return perform_browser_check('firefox')


def EdgeCheck_English():
    return perform_browser_check('edge')

def EdgeChromiumCheck_English():
    return perform_browser_check('edge_chromium')

def AddProfileAndClientDevice():
    file_path = f"{a.Log_folder}\\AddProfileAndClientDevice.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddProfileAndClientDevice")
    result_AddProfileAndClientDevice = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # Add Profile
        d.element("id", "pc_createButton", sec=a.buffer_time)
        # Profile Name
        d.element("input", "profileName", txt="test1", sec=a.buffer_time)
        d.scrolldown(500)
        #add device
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice0,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        #check
        time.sleep(5)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # 選取第一個元素（index 0）
        element_1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]'))
        )
        value_1 = element_1.text
        print(f"ProfileName: {value_1}")
        result_AddProfileAndClientDevice.append(True)
        # 選取第二個元素（index 1）
        element_2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]/following-sibling::td[1]'))
        )
        value_2 = element_2.text
        print(f"DeviceCount: {value_2}")
        result_AddProfileAndClientDevice.append(True)
        #p.s.選取第三個元素（index 2）//td[text()="test1"]/following-sibling::td[1]/following-sibling::td[1]
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddProfileAndClientDevice = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddProfileAndClientDevice, execution_time, current_time
    
def MaximumParentalControlProfile():
    result_MaximumParentalControlProfile = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        profile_names = [
            "001",
            "002",
            "003",
            "004",
            "005",
            "006",
            "007",
            "008",
            "009",
            "010",
            "011",
            "012"
        ]
        for profile_name in profile_names:
            d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
            d.element("id", "pc_createButton", sec=a.buffer_time)
            d.element("input", "profileName", txt=profile_name, sec=a.buffer_time)
            time.sleep(5)
            d.save_new()
            result_MaximumParentalControlProfile.append(True)
        #check
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        button_element = d._driver.find_element(By.ID,"pc_createButton")
        if button_element.is_enabled():
            print("Fail.")
            result_MaximumParentalControlProfile.append(False)
            time.sleep(5)
        else:
            print("Pass. Successfully Add Profiles to Max .")
            result_MaximumParentalControlProfile.append(True)
            time.sleep(5)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_MaximumParentalControlProfile = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_MaximumParentalControlProfile, execution_time, current_time

def EditProflleTest1EnableSchedule_Sunday():
    result_EditProflleTest1EnableSchedule_Sunday = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #edit
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        time.sleep(5)
        d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
        day = ["Sunday"]
        time_intervals = [
            ("17:00","18:00"),
        ]
        for Day in day:
            for start_time1, end_time1 in time_intervals:
                d.plan(Day, start_time1, end_time1, sec=3)
        d.element("id", "schedule_apply", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        time.sleep(5)
        #check
        time.sleep(5)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        # 選取第一個元素（index 0）
        element_1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]'))
        )
        value_1 = element_1.text
        print(f"ProfileName: {value_1}")
        result_EditProflleTest1EnableSchedule_Sunday.append(True)
        # 選取第二個元素（index 1）
        element_2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]/following-sibling::td[1]'))
        )
        value_2 = element_2.text
        print(f"DeviceCount: {value_2}")
        result_EditProflleTest1EnableSchedule_Sunday.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_EditProflleTest1EnableSchedule_Sunday = False
    finally:
        print(result_EditProflleTest1EnableSchedule_Sunday)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_EditProflleTest1EnableSchedule_Sunday, execution_time, current_time

def EditProflleTest1_AddAnotherBedtimeSchedule():
    result_EditProflleTest1_AddAnotherBedtimeSchedule = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.element("id", "bedsch_editBtn", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
        element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, "//span[contains(text(),'Add another Bedtime schedule')]"))
        )
        element.click()
        d.element("id", "chkBedSchedule_week_2_7", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.element("id", "bedsch_editBtn", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_2_7", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.save_new()
        #check
        time.sleep(5)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        element_1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]'))
        )
        value_1 = element_1.text
        print(f"ProfileName: {value_1}")
        result_EditProflleTest1_AddAnotherBedtimeSchedule.append(True)
        element_2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]/following-sibling::td[1]'))
        )
        value_2 = element_2.text
        print(f"DeviceCount: {value_2}")
        result_EditProflleTest1_AddAnotherBedtimeSchedule.append(True)
        element_3 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]/following-sibling::td[1]/following-sibling::td[1]'))
        )
        value_3 = element_3.text
        print(f"State: {value_3}")
        result_EditProflleTest1_AddAnotherBedtimeSchedule.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_EditProflleTest1_AddAnotherBedtimeSchedule = False
        time.sleep(10)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_EditProflleTest1_AddAnotherBedtimeSchedule, execution_time, current_time
    
def CheckProfileStatusAndClientsStatusProhibiting():
    result_CheckProfileStatusAndClientsStatusProhibiting = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #check
        time.sleep(5)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        element_1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]'))
        )
        value_1 = element_1.text
        print(f"ProfileName: {value_1}")
        result_CheckProfileStatusAndClientsStatusProhibiting.append(True)
        element_2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]/following-sibling::td[1]'))
        )
        value_2 = element_2.text
        print(f"DeviceCount: {value_2}")
        result_CheckProfileStatusAndClientsStatusProhibiting.append(True)
        element_3 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]/following-sibling::td[1]/following-sibling::td[1]'))
        )
        value_3 = element_3.text
        print(f"State: {value_3}")
        if value_3 == 'Schedule Paused':
            result_CheckProfileStatusAndClientsStatusProhibiting.append(True)
            print("Pass.")
        else:
            print("Fail.")
            result_CheckProfileStatusAndClientsStatusProhibiting.append(False)
        d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        element_4 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'link_IconE_Block'))
        )
        print(f"clients status: link_IconE_Block")
        result_CheckProfileStatusAndClientsStatusProhibiting.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_CheckProfileStatusAndClientsStatusProhibiting = False
        time.sleep(10)
    finally:
        print(result_CheckProfileStatusAndClientsStatusProhibiting)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckProfileStatusAndClientsStatusProhibiting, execution_time, current_time

def RemoveOneWebsiteFilter():
    file_path = f"{a.Log_folder}\\RemoveOneWebsiteFilter.log"
    logger = setup_logger(file_path)
    logger.info("Log message for RemoveOneWebsiteFilter")
    result_RemoveOneWebsiteFilter = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        d.element("xpath", "//*[@id='wf_table']/tbody/tr[1]/td[4]/img",index=1, sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        result_RemoveOneWebsiteFilter.append(True)
        time.sleep(5)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        label_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'wf_RemainingRules'))
        )
        label_text = label_element.text
        if label_text == "18":
            logger.info(f"Pass.Remaining: {label_text}")
            print("Pass.")
            result_RemoveOneWebsiteFilter.append(True)
        else:
            result_RemoveOneWebsiteFilter.append(False)
            logger.error(f"Fail.Remaining: {label_text}")
            print("Fail.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_RemoveOneWebsiteFilter = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_RemoveOneWebsiteFilter, execution_time, current_time

def CheckCannotGoTo6RestrictedWeb():
    file_path = f"{a.Log_folder}\\CheckCannotGoTo6RestrictedWeb.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoTo6RestrictedWeb")
    start_time = time.time()
    options = webdriver.ChromeOptions()
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--incognito')
    driver = webdriver.Chrome(options=options)
    result_CheckCannotGoTo6RestrictedWeb = []
    try:
        driver.set_window_size(a.W, a.H)
        websites = [
            #{
            #    "url": "https://yahoo.com",
            #    "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            #},
            {
                "url": "https://www.youtube.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.facebook.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.google.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.ge.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.blogger.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://microsoft.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
        ]
        for website in websites:
            try:
                driver.get(website["url"])
                wait = WebDriverWait(driver, a.button_time)
                found_restricted = False

                for text in website["expected_texts"]:
                    try:
                        restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                        if restricted:
                            logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                            print("Pass.")
                            result_CheckCannotGoTo6RestrictedWeb.append(True)
                            found_restricted = True
                            time.sleep(3)
                            break
                    except Exception:
                        continue
                
                # 如果沒有找到任何預期的文本，則視為無法訪問
                if not found_restricted:
                    logger.info(f"Pass. URL: {website['url']} is not accessible.")
                    print("Pass (not accessible).")
                    result_CheckCannotGoTo6RestrictedWeb.append(True)

            except Exception as e:
                logger.error(f"Error accessing {website['url']}: {str(e)}")
                print(f"Error accessing {website['url']}. Pass (not accessible).")
                result_CheckCannotGoTo6RestrictedWeb.append(True)

    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckCannotGoTo6RestrictedWeb = False
    finally:
        print(result_CheckCannotGoTo6RestrictedWeb)
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCannotGoTo6RestrictedWeb, execution_time, current_time

def CannotPingv4v6RestrictedDomain6():
    file_path = f"{a.Log_folder}\\CannotPingv4v6RestrictedDomain6.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CannotPingv4v6RestrictedDomain6")
    def execute_ping(address, version):
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.info("Pass. Cannot Ping v4 v6 Restricted Domain 6.")
                print("Pass.")
                return True
            else:
                logger.error("Fail. Still can Ping v4 v6 Restricted Domain 6.")
                print("Fail.")
                return False
        else:
            logger.error("Fail. Still can Ping v4 v6.")
            print("Fail.")
            return False
    print("ipconfig/flushdns")
    subprocess.run(["ipconfig", "/flushdns"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/release")
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/renew")
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    print("Wait 60 sec...")
    time.sleep(60)
    start_time = time.time()
    CannotPingv4v6RestrictedDomain6_v4 = []
    CannotPingv4v6RestrictedDomain6_v6 = []
    addresses = [
        #"yahoo.com",
        "www.youtube.com",
        "www.facebook.com",
        "www.google.com",
        "www.ge.com",
        "www.blogger.com",
        "microsoft.com",
    ]
    versions = ["-4", "-6"]
    try:
        for address in addresses:
            for version in versions:
                if version == "-4" or version == "-6":
                    is_passed = execute_ping(address, version)
                    if version == "-4":
                        CannotPingv4v6RestrictedDomain6_v4.append(is_passed)
                    elif version == "-6":
                        CannotPingv4v6RestrictedDomain6_v6.append(is_passed)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        CannotPingv4v6RestrictedDomain6_v4 = False
        CannotPingv4v6RestrictedDomain6_v6 = False
    finally:
        print(CannotPingv4v6RestrictedDomain6_v4, CannotPingv4v6RestrictedDomain6_v6)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return CannotPingv4v6RestrictedDomain6_v4, CannotPingv4v6RestrictedDomain6_v6, execution_time, current_time

def RemoveAll6WebsiteFilter():
    file_path = f"{a.Log_folder}\\RemoveAll6WebsiteFilter.log"
    logger = setup_logger(file_path)
    logger.info("Log message for RemoveAll6WebsiteFilter")
    result_RemoveAll6WebsiteFilter = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        repeat_count = 6
        for _ in range(repeat_count):
            d.element("xpath", "//*[@id='wf_table']/tbody/tr[1]/td[4]/img", index=1, sec=a.buffer_time)
            time.sleep(5)
        d.save_new()
        result_RemoveAll6WebsiteFilter.append(True)
        time.sleep(5)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(10)
        label_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'wf_RemainingRules'))
        )
        label_text = label_element.text
        if label_text == "24":
            logger.info(f"Pass.Remaining: {label_text}")
            print("Pass.")
            result_RemoveAll6WebsiteFilter.append(True)
        else:
            result_RemoveAll6WebsiteFilter.append(False)
            print("Fail.")
            logger.error(f"Fail.Remaining: {label_text}")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_RemoveAll6WebsiteFilter = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_RemoveAll6WebsiteFilter, execution_time, current_time

def CheckCanGoTo7DeletedRestrictedWeb():
    file_path = f"{a.Log_folder}\\CheckCanGoTo7DeletedRestrictedWeb.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCanGoTo7DeletedRestrictedWeb")
    start_time = time.time()
    options = webdriver.ChromeOptions()
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--incognito')
    driver = webdriver.Chrome(options=options)
    result_CheckCanGoTo7DeletedRestrictedWeb = []
    try:
        driver.set_window_size(a.W, a.H)
        websites = [
            {
                "url": "https://yahoo.com",
                "expected_texts": ["yahoo"]
            },
            {
                "url": "https://www.youtube.com",
                "expected_texts": ["youtube"]
            },
            {
                "url": "https://www.facebook.com",
                "expected_texts": ["facebook"]
            },
            {
                "url": "https://www.google.com",
                "expected_texts": ["google"]
            },
            {
                "url": "https://www.ge.com",
                "expected_texts": ["ge"]
            },
            {
                "url": "https://blogger.com",
                "expected_texts": ["blogger"]
            },
            {
                "url": "https://microsoft.com",
                "expected_texts": ["microsoft"]
            },
        ]
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            for text in website["expected_texts"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        result_CheckCanGoTo7DeletedRestrictedWeb.append(True)
                        time.sleep(3)
                        break
                    else:
                        logger.error(f"Fail. URL: {website['url']}, No expected text found.")
                        print("Fail.")
                        result_CheckCanGoTo7DeletedRestrictedWeb.append(False)
                except Exception:
                    pass
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckCanGoTo7DeletedRestrictedWeb = False
    finally:
        print(result_CheckCanGoTo7DeletedRestrictedWeb)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCanGoTo7DeletedRestrictedWeb, execution_time, current_time
    
def CanPing7v4v6RestrictedDomain():
    file_path = f"{a.Log_folder}\\CanPing7v4v6RestrictedDomain.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CanPing7v4v6RestrictedDomain")
    def execute_CanPing(address, version):
        result = subprocess.run(["ping", address, version, "-n", "20"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                print("Fail. More than 4 occurrences of connection issues.")
                return False
            else:
                print("Pass. Connection issues found but not exceeding 4 occurrences.")
                return True
        else:
            print("Pass. No connection issues found.")
            return True
    # Release and renew the IP addresses
    print("ipconfig/flushdns")
    subprocess.run(["ipconfig", "/flushdns"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/release")
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/renew")
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    print("Wait 60 sec...")
    time.sleep(60)
    start_time = time.time()
    CanPing7v4v6RestrictedDomain_v4 = []
    CanPing7v4v6RestrictedDomain_v6 = []
    addresses = [
        "yahoo.com",
        "Yahoo.com",
        "www.youtube.com",
        "www.YouTube.com",
        "www.facebook.com",
        "www.Facebook.com",
        "www.google.com",
        "www.Google.com",
        "www.ge.com",
        "www.GE.com",
        "blogger.com",
        "Blogger.com",
        "microsoft.com",
        "Microsoft.com",
    ]
    versions = ["-4", "-6"]
    try:
        for address in addresses:
            for version in versions:
                if version == "-4" or version == "-6":
                    is_passed = execute_CanPing(address, version)
                    if version == "-4":
                        CanPing7v4v6RestrictedDomain_v4.append(is_passed)
                    elif version == "-6":
                        CanPing7v4v6RestrictedDomain_v6.append(is_passed)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        CanPing7v4v6RestrictedDomain_v4 = False
        CanPing7v4v6RestrictedDomain_v6 = False
    finally:
        print(CanPing7v4v6RestrictedDomain_v4, CanPing7v4v6RestrictedDomain_v6)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return CanPing7v4v6RestrictedDomain_v4, CanPing7v4v6RestrictedDomain_v6, execution_time, current_time

def EditProflleTest1AddWebsiteFilter():
    file_path = f"{a.Log_folder}\\EditProflleTest1AddWebsiteFilter.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditProflleTest1AddWebsiteFilter")
    result_EditProflleTest1AddWebsiteFilter = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        # Add website Filter
        wf_name = [
            "yahoo",
            "YouTube",
            "facebook",
            "google",
            "ge",
            "blogger",
            "microsoft",
        ]
        wf_url = [
            "yahoo.com",
            "www.youtube.com",
            "www.facebook.com",
            "www.google.com",
            "www.ge.com",
            "www.blogger.com",
            "microsoft.com",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            time.sleep(5)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
                time.sleep(5)
        d.save_new()
        result_EditProflleTest1AddWebsiteFilter.append(True)
        time.sleep(5)
        #parental control
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        #Edit
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        time.sleep(10)
        label_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'wf_RemainingRules'))
        )
        label_text = label_element.text
        if label_text == "17":
            logger.info(f"Pass.Remaining: {label_text}")
            print("Pass.")
            result_EditProflleTest1AddWebsiteFilter.append(True)
        else:
            result_EditProflleTest1AddWebsiteFilter.append(False)
            logger.error(f"Fail.Remaining: {label_text}")
            print("Fail.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1AddWebsiteFilter = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditProflleTest1AddWebsiteFilter, execution_time, current_time

def ipconfigAll():
    file_path = f"{a.Log_folder}\\ipconfigAll.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ipconfigAll")
    start_time = time.time()
    result_ipconfigAll = False
    try:
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(5)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(20)
        result = subprocess.run(["ipconfig", "/all"], capture_output=True, text=True)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = time.strftime("ipconfigall.txt")
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
            result_ipconfigAll = True
            print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ipconfigAll = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:",current_time)
        print("Result saved to:", filename)
        logging.shutdown()
        return result_ipconfigAll, execution_time, current_time

def EnableAlwaysBroadcast():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableAlwaysBroadcast = False
    try :
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "alwaysBroadcast",status="enable",sec=a.buffer_time)
        d.save_new()
        result_EnableAlwaysBroadcast = True
        print("Finish.")
    except Exception as e:
        print(e)
        result_EnableAlwaysBroadcast = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_EnableAlwaysBroadcast, execution_time, current_time

def WanSpeedInCmd():
    start_time = time.time()
    result_WanSpeedInCmd = False
    try:
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(10)
        command_output = subprocess.check_output(["wmic", "nic", "get", "name,speed"], text=True)
        output_file_path = a.all_file_path + "/network_speed_info.txt"
        with open(output_file_path, "w") as output_file:
            output_file.write(command_output)
        print(f"Network speed information saved to: {output_file_path}")
        result_WanSpeedInCmd = True
        print("Finish.")
    except Exception as e:
        print(e)
        result_WanSpeedInCmd = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WanSpeedInCmd, execution_time, current_time
    
def CheckWanSpeedInCmd(WanSpeed):
    start_time = time.time()
    result_CheckWanSpeedInCmd = []
    try:
        file_path = a.all_file_path + "/network_speed_info.txt"
        with open(file_path, "r") as file:
            file_content = file.read()
        match = re.search(r'Realtek PCIe GbE Family Controller\s+(\d+)', file_content)
        if match:
            speed_value = int(match.group(1))
            print(f"Speed value: {speed_value}")
            if speed_value == WanSpeed:
                print(f"Pass.Speed is equal to {WanSpeed}")
                result_CheckWanSpeedInCmd.append(True)
            else:
                print(f"Fail.Speed is not equal to {WanSpeed},is {speed_value}")
                result_CheckWanSpeedInCmd.append(False)
        else:
            print("Pattern not found in the file.")
            result_CheckWanSpeedInCmd.append(False)
        new_file_name = f"network_speed_info_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        os.rename(file_path, os.path.join(a.all_file_path, new_file_name))
        print(f"File renamed to: {new_file_name}")
        result_CheckWanSpeedInCmd.append(True)
    except Exception as e:
        print(e)
        result_CheckWanSpeedInCmd = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        print(result_CheckWanSpeedInCmd)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CheckWanSpeedInCmd, execution_time, current_time
    
def changeWanSpeed(input_WanSpeed):
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_changeWanSpeed = False
    try :
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(600)
        d.element("downmenu",input_WanSpeed,sec=a.buffer_time)
        d.save_new()
        result_changeWanSpeed = True
        print("Finish")
    except Exception as e:
        print(e)
        result_changeWanSpeed = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_changeWanSpeed, execution_time, current_time

def ScheduleTest_24GHz():
    file_path = f"{a.Log_folder}\\ScheduleTest_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ScheduleTest_24GHz")
    overall_start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_ScheduleTest_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(600)
        d.element("checkbox", "status_5" ,status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_24" ,status="enable", sec=a.buffer_time)
        xpath_Advanced = "//span[contains(@onclick, 'showAdv(\"24\")') and contains(., 'Advanced Settings')]"
        Advanced = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, xpath_Advanced))
        )
        Advanced.click()
        print("Click Advanced.")
        d.scrolldown(600)
        d.element("xpath", "//li[@data-name='Add']", sec=a.buffer_time)
        day = ["Monday",
               "Tuesday", 
               "Wednesday", 
               "Thursday", 
               "Friday", 
               "Saturday", 
               "Sunday",
               ]
        time_intervals = [
            ("13:00", "13:30"),
            ("14:00", "14:30"),
            ("15:00", "15:30"),
        ]
        for Day in day:
            for start_time1, end_time1 in time_intervals:
                d.plan(Day, start_time1, end_time1, sec=3)
        d.element("xpath", "//button[contains(text(), 'Apply')]", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        result_ScheduleTest_24GHz = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ScheduleTest_24GHz = False
        time.sleep(5)
    finally:
        overall_end_time = time.time()
        execution_time = overall_end_time - overall_start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ScheduleTest_24GHz, execution_time, current_time

def ScheduleTest_5GHz():
    file_path = f"{a.Log_folder}\\ScheduleTest_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ScheduleTest_5GHz")
    overall_start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_ScheduleTest_5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_24" ,status="disable", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5" ,status="enable", sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(600)
        xpath_Advanced = "//span[contains(@onclick, 'showAdv(\"5\")') and contains(text(), 'Advanced Settings')]"
        Advanced = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, xpath_Advanced))
        )
        Advanced.click()
        print("Click 5GHz Advanced Settings.")
        d.scrolldown(800)
        d.element("xpath", "//a[@class='sbSelector' and contains(text(), 'Always Enable')]", sec=a.buffer_time)
        xpath_Clone = "//p[contains(script, 'Clone') and contains(text(), 'Wireless Schedule')]"
        Clone = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, xpath_Clone))
        )
        Clone.click()
        d.element("id", "scheduleBtn_ok", sec=a.buffer_time)
        d.save_new()
        result_ScheduleTest_5GHz = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ScheduleTest_5GHz = False
        time.sleep(5)
    finally:
        overall_end_time = time.time()
        execution_time = overall_end_time - overall_start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ScheduleTest_5GHz, execution_time, current_time
 
def ChangeChannelWidth_5GHz(ChannelWidth):
    file_path = f"{a.Log_folder}\\ChangeChannelWidth_5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeChannelWidth_5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeChannelWidth_5GHz = False
    try:
        #close mesh
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        #close 24GHz
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_24" ,status="disable", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5" ,status="enable", sec=a.buffer_time)
        d.save_new()
        #changle Channel Width
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(600)
        xpath_Advanced = "//span[contains(@onclick, 'showAdv(\"5\")') and contains(text(), 'Advanced Settings')]"
        Advanced = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, xpath_Advanced))
        )
        Advanced.click()
        print("Click 5GHz Advanced Settings.")
        d.scrolldown(800)
        d.element("downmenu", "36", sec=a.buffer_time)
        d.element("downmenu_Multiple", ChannelWidth, sec=a.buffer_time)
        d.element("id", "btn_OK", sec=a.buffer_time)
        d.save_new()
        result_ChangeChannelWidth_5GHz = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeChannelWidth_5GHz = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeChannelWidth_5GHz, execution_time, current_time

def ScheduleTest_GuestZone():
    file_path = f"{a.Log_folder}\\ScheduleTest_GuestZone.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ScheduleTest_GuestZone")
    overall_start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_ScheduleTest_GuestZone = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
        SSID = a.DUT_Wifi_SSID + "_GuestZone24GHz"
        d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
        d.element("input", "wifiName_24g",txt=SSID, sec=a.buffer_time)
        d.element("input", "password_24g", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
        d.scrolldown(300)
        d.element("xpath", "//li[@data-name='Add']", sec=a.buffer_time)
        day = ["Monday",
               "Tuesday", 
               "Wednesday", 
               "Thursday", 
               "Friday", 
               "Saturday", 
               "Sunday",
               ]
        time_intervals = [
            ("13:00", "13:30"),
            ("14:00", "14:30"),
            ("15:00", "15:30"),
        ]
        for Day in day:
            for start_time1, end_time1 in time_intervals:
                d.plan(Day, start_time1, end_time1, sec=3)
        d.element("xpath", "//button[contains(text(), 'Apply')]", sec=a.buffer_time)
        d.save_new()
        result_ScheduleTest_GuestZone = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ScheduleTest_GuestZone = False
        time.sleep(5)
    finally:
        overall_end_time = time.time()
        execution_time = overall_end_time - overall_start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ScheduleTest_GuestZone, execution_time, current_time

def Change24GHz5GHz_Invisible():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_Change24GHz5GHz_Invisible = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(600)
        xpath_Advanced = "//span[contains(@onclick, 'showAdv(\"24\")') and contains(., 'Advanced Settings')]"
        Advanced = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, xpath_Advanced))
        )
        Advanced.click()
        print("Click Advanced.")
        d.scrolldown(600)
        xpath_Advanced = "//span[contains(@onclick, 'showAdv(\"5\")') and contains(text(), 'Advanced Settings')]"
        Advanced = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, xpath_Advanced))
        )
        Advanced.click()
        print("Click 5GHz Advanced Settings.")
        d.scrolldown(600)
        d.element("downmenu_Multiple", "Invisible", sec=a.buffer_time)
        d.save_new()
        result_Change24GHz5GHz_Invisible = True
        print("Finish.")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_Change24GHz5GHz_Invisible = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_Change24GHz5GHz_Invisible, execution_time, current_time
    
def CheckWiFiChannelWidth_204080MHz():
    file_path = f"{a.Log_folder}\\CheckWiFiChannelWidth_204080MHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWiFiChannelWidth_204080MHz")
    start_time = time.time()
    result_CheckWiFiChannelWidth_204080MHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "20 MHz" in copied_text or  "40 MHz" in copied_text or  "80 MHz" in copied_text:
            logger.info(f"Pass. Found {a.DUT_Wifi_SSID} and '20/40/80 MHz' in {wifiInfo_txt_path}")
            print("Pass")
            result = True
        else:
            result = False
            logger.error(f"Fail to find {a.DUT_Wifi_SSID} or '20/40/80 MHz.")
            print("Fail")
        result_CheckWiFiChannelWidth_204080MHz.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckWiFiChannelWidth_204080MHz.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CheckWiFiChannelWidth_204080MHz, execution_time, current_time
    
def CheckWiFiChannelWidth_2040MHz():
    file_path = f"{a.Log_folder}\\CheckWiFiChannelWidth_2040MHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWiFiChannelWidth_2040MHz")
    start_time = time.time()
    result_CheckWiFiChannelWidth_2040MHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "20 MHz" in copied_text or  "40 MHz" in copied_text:
            logger.info(f"Pass. Found {a.DUT_Wifi_SSID} and '20/40 MHz' in {wifiInfo_txt_path}")
            print("Pass")
            result = True
        elif "80 MHz" in copied_text:
            result = False
            logger.error(f"Fail.Still can find 80 MHz.")
            print("Fail")
        else:
            result = False
            logger.error(f"Fail to find {a.DUT_Wifi_SSID} or '20/40 MHz.")
            print("Fail")
        result_CheckWiFiChannelWidth_2040MHz.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckWiFiChannelWidth_2040MHz.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CheckWiFiChannelWidth_2040MHz, execution_time, current_time

def CheckWiFiChannelWidth_20MHz():
    file_path = f"{a.Log_folder}\\CheckWiFiChannelWidth_20MHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWiFiChannelWidth_20MHz")
    start_time = time.time()
    result_CheckWiFiChannelWidth_20MHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "20 MHz" in copied_text:
            logger.info(f"Pass. Found {a.DUT_Wifi_SSID} and '20 MHz' in {wifiInfo_txt_path}")
            print("Pass")
            result = True
        elif "80 MHz" in copied_text or "40 MHz" in copied_text:
            result = False
            logger.error(f"Fail.Still can find 40 or 80 MHz.")
            print("Fail")
        else:
            result = False
            logger.error(f"Fail to find {a.DUT_Wifi_SSID} or '20 MHz.")
            print("Fail")
        result_CheckWiFiChannelWidth_20MHz.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckWiFiChannelWidth_20MHz.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CheckWiFiChannelWidth_20MHz, execution_time, current_time

def ChangeChannelWidth_5GHzAndWPA2WPA3(ChannelWidth):
    file_path = f"{a.Log_folder}\\ChangeChannelWidth_5GHzAndWPA2WPA3.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeChannelWidth_5GHzAndWPA2WPA3")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeChannelWidth_5GHzAndWPA2WPA3 = False
    try:
        #close mesh
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        #close 24GHz
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_24" ,status="disable", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("checkbox", "status_5" ,status="enable", sec=a.buffer_time)
        d.save_new()
        time.sleep(60)
        #changle Channel Width
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(600)
        xpath_Advanced = "//span[contains(@onclick, 'showAdv(\"5\")') and contains(text(), 'Advanced Settings')]"
        Advanced = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, xpath_Advanced))
        )
        Advanced.click()
        print("Click 5GHz Advanced Settings.")
        d.scrolldown(400)
        time.sleep(10)
        SSID = a.DUT_Wifi_SSID+"_WPA3_5"
        d.element("input","wifiName_5",txt=SSID,sec=a.buffer_time)
        d.element("downmenu_Multiple", "WPA2/WPA3-Personal", sec=a.buffer_time)
        d.element("id", "btn_OK", sec=a.buffer_time)
        d.element("downmenu", "36", sec=a.buffer_time)
        d.element("downmenu_Multiple", ChannelWidth, sec=a.buffer_time)
        d.element("id", "btn_OK", sec=a.buffer_time)
        d.save_new()
        result_ChangeChannelWidth_5GHzAndWPA2WPA3 = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeChannelWidth_5GHzAndWPA2WPA3 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeChannelWidth_5GHzAndWPA2WPA3, execution_time, current_time

def CheckWiFiChannelWidth_204080MHz_WPA2WPA3():
    file_path = f"{a.Log_folder}\\CheckWiFiChannelWidth_204080MHz_WPA2WPA3.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWiFiChannelWidth_204080MHz_WPA2WPA3")
    start_time = time.time()
    result_CheckWiFiChannelWidth_204080MHz_WPA2WPA3 = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "WPA2" in copied_text or "WPA3" in copied_text and "20 MHz" in copied_text or  "40 MHz" in copied_text or  "80 MHz" in copied_text:
            logger.info(f"Pass. Found {a.DUT_Wifi_SSID} and '20/40/80 MHz' and WPA2/3 in {wifiInfo_txt_path}")
            print("Pass")
            result = True
        else:
            result = False
            logger.error(f"Fail to find {a.DUT_Wifi_SSID} or '20/40/80 MHz or WPA2/3.")
            print("Fail")
        result_CheckWiFiChannelWidth_204080MHz_WPA2WPA3.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckWiFiChannelWidth_204080MHz_WPA2WPA3.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CheckWiFiChannelWidth_204080MHz_WPA2WPA3, execution_time, current_time
    
def CheckWiFiChannelWidth_2040MHz_WPA2WPA3():
    file_path = f"{a.Log_folder}\\CheckWiFiChannelWidth_2040MHz_WPA2WPA3.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWiFiChannelWidth_2040MHz_WPA2WPA3")
    start_time = time.time()
    result_CheckWiFiChannelWidth_2040MHz_WPA2WPA3 = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "WPA2" in copied_text or "WPA3" in copied_text and "20 MHz" in copied_text or  "40 MHz" in copied_text:
            logger.info(f"Pass. Found {a.DUT_Wifi_SSID} and '20/40 MHz' and WPA2/3 in {wifiInfo_txt_path}")
            print("Pass")
            result = True
        elif "80 MHz" in copied_text:
            result = False
            logger.error(f"Fail.Still can find 80 MHz.")
            print("Fail")
        else:
            result = False
            logger.error(f"Fail to find {a.DUT_Wifi_SSID} or '20/40 MHz or WPA2/3.")
            print("Fail")
        result_CheckWiFiChannelWidth_2040MHz_WPA2WPA3.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckWiFiChannelWidth_2040MHz_WPA2WPA3.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CheckWiFiChannelWidth_2040MHz_WPA2WPA3, execution_time, current_time

def CheckWiFiChannelWidth_20MHz_WPA2WPA3():
    file_path = f"{a.Log_folder}\\CheckWiFiChannelWidth_20MHz_WPA2WPA3.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWiFiChannelWidth_20MHz_WPA2WPA3")
    start_time = time.time()
    result_CheckWiFiChannelWidth_20MHz_WPA2WPA3 = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "WPA2" in copied_text or "WPA3" in copied_text and "20 MHz" in copied_text:
            logger.info(f"Pass. Found {a.DUT_Wifi_SSID} and '20 MHz' or WPA2/3 in {wifiInfo_txt_path}")
            print("Pass")
            result = True
        else:
            result = False
            logger.error(f"Fail to find {a.DUT_Wifi_SSID} or '20 MHz.")
            print("Fail")
        result_CheckWiFiChannelWidth_20MHz_WPA2WPA3.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckWiFiChannelWidth_20MHz_WPA2WPA3.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CheckWiFiChannelWidth_20MHz_WPA2WPA3, execution_time, current_time
    
def PPPoEDefaultWizard():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_PPPoEDefaultWizard = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_default_pwd)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "op_option_smart_router",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "pppoe_username",txt="amit",sec=a.buffer_time)
        d.element("input", "pppoe_password",txt="amit",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "wifi_networkName24G",txt=a.DUT_Wifi_SSID,sec=a.buffer_time)
        d.element("input", "wifi_password24G",txt=a.WiFi_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "device_password",txt=a.DUT_admin_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "timeZone_Search",txt="Asia/Taipei",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "AutoUpgrade_off",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        time.sleep(a.wizard_time)
        #check
        d.open(url,a.DUT_admin_pwd )
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        print("Dut has finished wizard and can access login page.")
        result_PPPoEDefaultWizard = True
        print("Pass")
        time.sleep(10)
    except TimeoutException:
        print("Dut has not finished wizard and cannot access login page.")
        result_PPPoEDefaultWizard = False
        print("Fail")
        time.sleep(10)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPPoEDefaultWizard = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_PPPoEDefaultWizard, execution_time, current_time

def InternetPPPoE_PasswordSpecialCharacters():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_InternetPPPoE_PasswordSpecialCharacters = False
    try:
        d.open(url, a.DUT_admin_pwd)
        SpecialCharacters = r'~!@#$%^&*()_-+\ /[]{}:";=?<>,."'
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("input", "userName_PPPoE", txt=SpecialCharacters, sec=a.buffer_time)
        d.element("input", "password_PPPoE", txt=SpecialCharacters, sec=a.buffer_time)
        d.save_new()
        result_InternetPPPoE_PasswordSpecialCharacters = True
        print("Finish")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_InternetPPPoE_PasswordSpecialCharacters = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_InternetPPPoE_PasswordSpecialCharacters, execution_time, current_time

def InternetPPPoE_PasswordNoSpecialCharacters():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_InternetPPPoE_PasswordNoSpecialCharacters = False
    try:
        d.open(url, a.DUT_admin_pwd)
        SpecialCharacters = r"~!@$%^&()_+[]{}:'"
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("input", "userName_PPPoE", txt=SpecialCharacters, sec=a.buffer_time)
        d.element("input", "password_PPPoE", txt=SpecialCharacters, sec=a.buffer_time)
        d.save_new()
        result_InternetPPPoE_PasswordNoSpecialCharacters = True
        print("Finish")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_InternetPPPoE_PasswordNoSpecialCharacters = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_InternetPPPoE_PasswordNoSpecialCharacters, execution_time, current_time

def CheckInternetActivityReport():
    file_path = f"{a.Log_folder}\\CheckInternetActivityReport.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckInternetActivityReport")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "header_messageInfo", sec=a.buffer_time)
        xpath_expression = "//div[contains(@class, 'cell_l') and text()='Night-Time Internet Activity Report']"
        element = d._driver.find_element(By.XPATH, xpath_expression)
        element.click()
        print(element.text)
        result_CheckInternetActivityReport = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckInternetActivityReport = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckInternetActivityReport, execution_time, current_time

def CheckIpconfigHostname():
    file_path = f"{a.Log_folder}\\CheckIpconfigHostname.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckIpconfigHostname")
    result_CheckIpconfigHostname = False
    start_time = time.time()
    d = Dlink(browser='chrome')
    try:
        d.open(a.Uplink_GUI_url, a.Uplink_adminpwd )
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(800)
        try:
            dutModelElements = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_all_elements_located((By.CLASS_NAME, "client_Name"))
            )
            for dutModelElement in dutModelElements:
                dutModelText = dutModelElement.text
                if "DUTmodel" in dutModelText:
                    print(dutModelText)
                    logger.info("Pass to Check Ipconfig Hostname.")
                    print("Pass")
                    result_CheckIpconfigHostname = True
                    break
            else:
                logger.error("Fail. DUTmodel not found.")
                print("Fail.")
                result_CheckIpconfigHostname = False
        except TimeoutException:
            logger.error("Fail.Timeout,DUTmodel not found.")
            print("Fail.")
            result_CheckIpconfigHostname = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckIpconfigHostname = False
        time.sleep(5)
    finally:
        print(result_CheckIpconfigHostname)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckIpconfigHostname, execution_time, current_time

def ChangeDHCPserver2to254():
    file_path = f"{a.Log_folder}\\ChangeDHCPserver2to254.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeDHCPserver2to254")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeDHCPserver2to254 = []
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("input", "dhcpIPAddressRange1",txt="2",sec=a.buffer_time)
        d.element("input", "dhcpIPAddressRange2",txt="254",sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Network", sec=a.buffer_time)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        RangeList = [
            "dhcpIPAddressRange1",
            "dhcpIPAddressRange2",
        ]
        valueList = [
            "2",
            "254",
        ]
        for Range, value in zip(RangeList, valueList):      
            current_input_text = d.element("id", Range).get_attribute("value")
            if current_input_text != value:
                print(f"Expected: {value}, but got: {current_input_text}")
                result_ChangeDHCPserver2to254.append(False)
            else:
                print(f"Same as Expected: {value}.")
                result_ChangeDHCPserver2to254.append(True)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeDHCPserver2to254 = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_ChangeDHCPserver2to254)
        logging.shutdown()
        return result_ChangeDHCPserver2to254, execution_time, current_time

def Disconnect_PPPoEv4():
    file_path = f"{a.Log_folder}\\Disconnect_PPPoEv4.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Disconnect_PPPoEv4")
    result_Disconnect_PPPoEv4 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.scrolldown(300)
        Disconnect = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'RenewRelease_btn'))
        )
        Disconnect.click()
        time.sleep(10)
        disconnect_success = False
        max_attempts = 2
        for attempt in range(max_attempts):
            try:
                WebDriverWait(d._driver, a.button_time).until(
                    EC.text_to_be_present_in_element((By.ID, 'RenewRelease_btn'), 'Connect')
                )
                disconnect_success = True
                logger.info("Pass.Disconnect successfully converted to Connect.")
                print("Pass")
                break
            except TimeoutException:
                logger.error(f"Disconnect is not converted to Connect within 30 seconds, retry {attempt + 1} time.")
                print("Fail,try again.")
                Disconnect.click()
        if not disconnect_success:
            logger.error("In all attempts, Disconnect still does not transition to Connect.")
            print("Fail")
        time.sleep(60)
        result_Disconnect_PPPoEv4 = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_Disconnect_PPPoEv4 = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Disconnect_PPPoEv4, execution_time, current_time

def DisableMainWiFi_24GHz5GHz():
    file_path = f"{a.Log_folder}\\DisableMainWiFi_24GHz5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisableMainWiFi_24GHz5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_DisableMainWiFi_24GHz5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_5",status="disable", sec=a.buffer_time)
        d.save_new()
        result_DisableMainWiFi_24GHz5GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_DisableMainWiFi_24GHz5GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisableMainWiFi_24GHz5GHz, execution_time, current_time

def EnableMainWiFi_24GHz5GHz():
    file_path = f"{a.Log_folder}\\EnableMainWiFi_24GHz5GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EnableMainWiFi_24GHz5GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableMainWiFi_24GHz5GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="enable", sec=a.buffer_time)
        d.element("checkbox", "status_5",status="enable", sec=a.buffer_time)
        d.save_new()
        result_EnableMainWiFi_24GHz5GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_EnableMainWiFi_24GHz5GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EnableMainWiFi_24GHz5GHz, execution_time, current_time

def DisableMainWiFi_24GHz():
    file_path = f"{a.Log_folder}\\DisableMainWiFi_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisableMainWiFi_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_DisableMainWiFi_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="disable", sec=a.buffer_time)
        d.save_new()
        result_DisableMainWiFi_24GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_DisableMainWiFi_24GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisableMainWiFi_24GHz, execution_time, current_time

def EnableMainWiFi_24GHz():
    file_path = f"{a.Log_folder}\\EnableMainWiFi_24GHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EnableMainWiFi_24GHz")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_EnableMainWiFi_24GHz = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "status_24",status="enable", sec=a.buffer_time)
        d.save_new()
        result_EnableMainWiFi_24GHz = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_EnableMainWiFi_24GHz = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EnableMainWiFi_24GHz, execution_time, current_time

def CheckWiFiChannelWidth_204080160MHz():
    file_path = f"{a.Log_folder}\\CheckWiFiChannelWidth_204080160MHz.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWiFiChannelWidth_204080160MHz")
    start_time = time.time()
    result_CheckWiFiChannelWidth_204080160MHz = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(2)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "20 MHz" in copied_text or "40 MHz" in copied_text or "80 MHz" in copied_text or "160 MHz" in copied_text:
            logger.info(f"Pass. Found {a.DUT_Wifi_SSID} and '20/40/80/160 MHz' in {wifiInfo_txt_path}")
            print("Pass")
            result = True
        else:
            result = False
            logger.error(f"Fail to find {a.DUT_Wifi_SSID} or '20/40/80/160 MHz.")
            print("Fail")
        result_CheckWiFiChannelWidth_204080160MHz.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckWiFiChannelWidth_204080160MHz.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process .pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CheckWiFiChannelWidth_204080160MHz, execution_time, current_time

def CheckWiFiChannelWidth_204080160MHz_WPA2WPA3():
    file_path = f"{a.Log_folder}\\CheckWiFiChannelWidth_204080160MHz_WPA2WPA3.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckWiFiChannelWidth_204080160MHz_WPA2WPA3")
    start_time = time.time()
    result_CheckWiFiChannelWidth_204080160MHz_WPA2WPA3 = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    wifiinfoview_path = a.wifiinfoview_path
    wifiinfoview_process = subprocess.Popen(wifiinfoview_path, shell=True)
    print("wifiinfoview PID:", wifiinfoview_process.pid)
    try:
        time.sleep(5)
        pyautogui.click(x=500, y=500)
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'f')
        time.sleep(3)
        pyautogui.write(a.DUT_Wifi_SSID)
        pyautogui.press('enter')
        time.sleep(3)
        pyautogui.hotkey('esc')
        time.sleep(3)
        pyautogui.hotkey('ctrl', 'c')
        time.sleep(3)
        copied_text = clipboard.paste()
        wifiInfo_txt_path = os.path.join(a.all_file_path, "wifiInfo_.txt")
        with open(wifiInfo_txt_path, "w", encoding="utf-8") as file:
            file.write(copied_text)
        if a.DUT_Wifi_SSID in copied_text and "WPA2" in copied_text or "WPA3" in copied_text and "20 MHz" in copied_text or "40 MHz" in copied_text or "80 MHz" in copied_text or "160 MHz" in copied_text:
            print(f"Pass. Found {a.DUT_Wifi_SSID} and '20/40/80/160 MHz' and WPA2/3 in {wifiInfo_txt_path}")
            print("Pass")
            result = True
        else:
            result = False
            print(f"Fail to find {a.DUT_Wifi_SSID} or '20/40/80/160 MHz or WPA2/3.")
            print("Fail")
        result_CheckWiFiChannelWidth_204080160MHz_WPA2WPA3.append(result)
        new_filename = "wifiInfo_" + current_time + ".txt"
        new_filepath = os.path.join(os.path.dirname(wifiInfo_txt_path), new_filename)
        os.replace(wifiInfo_txt_path, new_filepath)
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckWiFiChannelWidth_204080160MHz_WPA2WPA3.append(False)
    finally:
        subprocess.call(['taskkill', '/F', '/T', '/PID', str(wifiinfoview_process.pid)])
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        logging.shutdown()
        return result_CheckWiFiChannelWidth_204080160MHz_WPA2WPA3, execution_time, current_time

def Internet_L2TP():
    file_path = f"{a.Log_folder}\\Internet_L2TP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Internet_L2TP")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_Internet_L2TP = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "L2TP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_L2TP", txt=a.L2TP_Server, sec=a.buffer_time)
        d.element("input", "userName_L2TP", txt=a.userName_L2TP, sec=a.buffer_time)
        d.element("input", "password_L2TP", txt=a.password_L2TP, sec=a.buffer_time)
        d.save_new()
        result_Internet_L2TP = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Internet_L2TP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Internet_L2TP, execution_time, current_time

def CheckHomePage_NetworkStatus(status):
    file_path = f"{a.Log_folder}\\CheckHomePage_NetworkStatus.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckHomePage_NetworkStatus")
    result_CheckHomePage_NetworkStatus = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.scrolldown(300)
        NetworkStatus = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowNetworkStatus"]'))
        )
        print(f"Network Status: {NetworkStatus.text}")
        Status = status
        if NetworkStatus.text == Status:
            result_CheckHomePage_NetworkStatus = True
            logger.info("Pass. Internet status display correctly on Home page.")
            print("Pass.")
        else:
            result_CheckHomePage_NetworkStatus = False
            logger.error("Fail. Connection Type does not match.")
            print("Fail.")
    except Exception as e:
            logger.error(f"An error occurred: {str(e)}")
            print("\n+++++ False +++++\n")
            result_CheckHomePage_NetworkStatus = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckHomePage_NetworkStatus, execution_time, current_time

def InternetConnectionCheck():
    file_path = f"{a.Log_folder}\\InternetConnectionCheck.log"
    logger = setup_logger(file_path)
    logger.info("Log message for InternetConnectionCheck")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_InternetConnectionCheck = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        connected = WebDriverWait(d._driver, a.button_time).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, a.HomeConnected)))
        result_InternetConnectionCheck = True
        logger.info("Finish.Internet status show correctly on Home page")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_InternetConnectionCheck = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_InternetConnectionCheck, execution_time, current_time

def InternetDisconnectionCheck():
    file_path = f"{a.Log_folder}\\InternetDisconnectionCheck.log"
    logger = setup_logger(file_path)
    logger.info("Log message for InternetDisconnectionCheck")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_InternetDisconnectionCheck = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        connected = WebDriverWait(d._driver, a.button_time).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, a.HomeDisconnected)))
        result_InternetDisconnectionCheck = True
        logger.info("Finish.Internet status show correctly on Home page")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_InternetDisconnectionCheck = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_InternetDisconnectionCheck, execution_time, current_time

def InternetReconnectModeManual():
    file_path = f"{a.Log_folder}\\InternetReconnectModeManual.log"
    logger = setup_logger(file_path)
    logger.info("Log message for InternetReconnectModeManual")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_InternetReconnectModeManual = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.scrolldown(500)
        xpath_selector1 = '//a[starts-with(@id, "sbSelector_") and contains(text(), "Always on")]'
        Reconnect = WebDriverWait(d._driver, a.button_time).until(EC.element_to_be_clickable((By.XPATH, xpath_selector1)))
        Reconnect.click()
        time.sleep(5)
        d.element("downmenu_Multiple","Manual")
        d.save_new()
        result_InternetReconnectModeManual = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_InternetReconnectModeManual = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_InternetReconnectModeManual, execution_time, current_time
    
def CheckGoToSettingsButtonInternet_v4_L2TP():
    file_path = f"{a.Log_folder}\\CheckGoToSettingsButtonInternet_v4_L2TP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckGoToSettingsButtonInternet_v4_L2TP")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckGoToSettingsButtonInternet_v4_L2TP = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("id", "goto_internet_v4", sec=a.buffer_time)
        time.sleep(10)
        Internet = d._driver.find_elements("xpath",'//*[contains(text(),"L2TP Server")]')
        if len(Internet) > 0:
            result_CheckGoToSettingsButtonInternet_v4_L2TP = True
            logger.info("Pass.The Home page will switch to L2TP WAN setting on Internet page.")
            print("Pass.")
        else:
            result_CheckGoToSettingsButtonInternet_v4_L2TP = False
            logger.error("Fail to Check Go To Settings Button Internet v4 L2TP.")
            print("Fail.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CheckGoToSettingsButtonInternet_v4_L2TP = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckGoToSettingsButtonInternet_v4_L2TP, execution_time, current_time

def ConnectAndCheck():
    file_path = f"{a.Log_folder}\\ConnectAndCheck.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ConnectAndCheck")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ConnectAndCheck = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.scrolldown(300)
        connect_button = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'RenewRelease_btn'))
        )
        connect_button.click()
        try:
            disconnect_button = WebDriverWait(d._driver, a.button_time).until(
                EC.text_to_be_present_in_element((By.ID, 'RenewRelease_btn'), 'Disconnect')
            )
            print("Connect Successfully converted to Disconnect.")
        except TimeoutException:
            print("If Connect does not change to Disconnect within 30 seconds, click the Connect button again.")
            connect_button.click()
        print("Wait for 120 sec...")
        time.sleep(120)
        result_ConnectAndCheck = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ConnectAndCheck = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ConnectAndCheck, execution_time, current_time

def ChangeL2TP_DNS(input_SecondaryDNSServer):
    file_path = f"{a.Log_folder}\\ChangeL2TP_DNS.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeL2TP_DNS")
    result_ChangeL2TP_DNS = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        input_PrimaryDNSServer = "2.2.2.2"
        d.element("input","primaryDNSAddress_L2TP", txt = input_PrimaryDNSServer, sec=a.buffer_time)
        d.element("input","secondaryDNSAddress_L2TP", txt = input_SecondaryDNSServer, sec=a.buffer_time)
        d.save_new()
        time.sleep(60)
        #check2.2.2.2
        d.open(url, a.DUT_admin_pwd)
        NewPrimaryDNSServer = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowPrimaryDNS"]'))
        )
        PrimaryDNS = NewPrimaryDNSServer.text
        print(f"The New Primary DNS Server after change is: {PrimaryDNS}")
        if PrimaryDNS == input_PrimaryDNSServer:
            logger.info(f"Pass. The New Primary DNS Server is: {PrimaryDNS}")
            print("Pass")
            result_ChangeL2TP_DNS.append(True)
        else:
            logger.error("Fail.The New Primary DNS Server after change is error.")
            print("Fail.")
            result_ChangeL2TP_DNS.append(False)
        #check3.3.3.3
        d.open(url, a.DUT_admin_pwd)
        NewsecondaryDNS = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSecondaryDNS"]'))
        )
        secondaryDNS = NewsecondaryDNS.text
        print(f"The New secondary DNS Server after change is: {secondaryDNS}")
        if secondaryDNS == input_SecondaryDNSServer:
            logger.info(f"Pass. The New secondary DNS Server is: {secondaryDNS}")
            print("Pass")
            result_ChangeL2TP_DNS.append(True)
        else:
            logger.error("Fail.The New secondary DNS Server after change is error.")
            print("Fail.")
            result_ChangeL2TP_DNS.append(False)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangeL2TP_DNS = False
        time.sleep(5)
    finally:
        print(result_ChangeL2TP_DNS)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeL2TP_DNS, execution_time, current_time

def Internet_PPTP():
    file_path = f"{a.Log_folder}\\Internet_PPTP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Internet_PPTP")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_Internet_PPTP = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "PPTP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_PPTP", txt=a.PPTP_Server, sec=a.buffer_time)
        d.element("input", "userName_PPTP", txt=a.userName_PPTP, sec=a.buffer_time)
        d.element("input", "password_PPTP", txt=a.password_PPTP, sec=a.buffer_time)
        d.save_new()
        result_Internet_PPTP = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Internet_PPTP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Internet_PPTP, execution_time, current_time
    
def CheckGoToSettingsButtonInternet_v4_PPTP():
    file_path = f"{a.Log_folder}\\CheckGoToSettingsButtonInternet_v4_PPTP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckGoToSettingsButtonInternet_v4_PPTP")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_CheckGoToSettingsButtonInternet_v4_PPTP = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("id", "goto_internet_v4", sec=a.buffer_time)
        time.sleep(10)
        Internet = d._driver.find_elements("xpath",'//*[contains(text(),"PPTP Server")]')
        if len(Internet) > 0:
            result_CheckGoToSettingsButtonInternet_v4_PPTP = True
            logger.info("Pass.The Home page will switch to PPTP WAN setting on Internet page.")
            print("Pass.")
        else:
            result_CheckGoToSettingsButtonInternet_v4_PPTP = False
            logger.error("Fail to Check Go To Settings Button Internet v4 PPTP.")
            print("Fail.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CheckGoToSettingsButtonInternet_v4_PPTP = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckGoToSettingsButtonInternet_v4_PPTP, execution_time, current_time

def ChangePPTP_DNS(input_SecondaryDNSServer):
    file_path = f"{a.Log_folder}\\ChangePPTP_DNS.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangePPTP_DNS")
    result_ChangePPTP_DNS = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        input_PrimaryDNSServer = "2.2.2.2"
        d.element("input","primaryDNSAddress_PPTP", txt = input_PrimaryDNSServer, sec=a.buffer_time)
        d.element("input","secondaryDNSAddress_PPTP", txt = input_SecondaryDNSServer, sec=a.buffer_time)
        d.save_new()
        #check2.2.2.2
        d.open(url, a.DUT_admin_pwd)
        NewPrimaryDNSServer = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowPrimaryDNS"]'))
        )
        PrimaryDNS = NewPrimaryDNSServer.text
        print(f"The New Primary DNS Server after change is: {PrimaryDNS}")
        if PrimaryDNS == input_PrimaryDNSServer:
            logger.info(f"Pass. The New Primary DNS Server is: {PrimaryDNS}")
            print("Pass")
            result_ChangePPTP_DNS.append(True)
        else:
            logger.error("Fail.The New Primary DNS Server after change is error.")
            print("Fail.")
            result_ChangePPTP_DNS.append(False)
        #check3.3.3.3
        d.open(url, a.DUT_admin_pwd)
        NewsecondaryDNS = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSecondaryDNS"]'))
        )
        secondaryDNS = NewsecondaryDNS.text
        print(f"The New secondary DNS Server after change is: {secondaryDNS}")
        if secondaryDNS == input_SecondaryDNSServer:
            logger.info(f"Pass. The New secondary DNS Server is: {secondaryDNS}")
            print("Pass")
            result_ChangePPTP_DNS.append(True)
        else:
            logger.error("Fail.The New secondary DNS Server after change is error.")
            print("Fail.")
            result_ChangePPTP_DNS.append(False)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangePPTP_DNS = False
        time.sleep(5)
    finally:
        print(result_ChangePPTP_DNS)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangePPTP_DNS, execution_time, current_time

def ping1350():
    file_path = f"{a.Log_folder}\\ping1350.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ping1350")
    def execute_ping(address, options, count):
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", address, *options, "-n", str(count)], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(options, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("需要切割封包，但已設定 DF 旗標。" in result.stdout or
            "目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("需要切割封包，但已設定 DF 旗標。")+ result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.error("Fail. More than 4 occurrences of connection issues.")
                print("Fail.")
                return False
            else:
                logger.info("Pass. Connection issues found but not exceeding 4 occurrences.")
                print("Pass.")
                return True
        else:
            logger.info("Pass. No connection issues found.")
            print("Pass.")
            return True           
    try:
        start_time = time.time()
        result_ping1350 = []
        addresses = ["168.95.1.1"]
        options = ["-f", "-l", "1350"]
        count = 10
        for address in addresses:
            result_ping1350.append(execute_ping(address, options, count))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        result_ping1350 = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ping1350, execution_time, current_time

def DisplayYTFor10sec():
    file_path = f"{a.Log_folder}\\DisplayYTFor10sec.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisplayYTFor10sec")
    start_time = time.time()
    options = webdriver.ChromeOptions()
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--incognito')
    driver = webdriver.Chrome(options=options)
    result_DisplayYTFor10sec = []
    try:
        driver.set_window_size(a.W, a.H)
        websites = [
            {
                "url": "https://www.youtube.com/watch?v=3wPONiZwy0o",
                "expected_texts": ["youtube"]
            },
        ]
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            for text in website["expected_texts"]:
                try:
                    pyautogui.press('space')
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass")
                        result_DisplayYTFor10sec.append(True)
                        print("\n+++++ Play video for 10 seconds +++++\n")
                        time.sleep(10)
                        logger.info("Finish")
                        print("Finish")
                        result_DisplayYTFor10sec.append(True)
                        break
                    else:
                        logger.error(f"Fail. URL: {website['url']}, No expected text found.")
                        print("Fail")
                        result_DisplayYTFor10sec.append(False)
                except Exception:
                    pass
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DisplayYTFor10sec = False
    finally:
        print(result_DisplayYTFor10sec)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisplayYTFor10sec, execution_time, current_time

def AddressMode_StaticIP_L2TP():
    file_path = f"{a.Log_folder}\\AddressMode_StaticIP_L2TP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddressMode_StaticIP_L2TP")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_AddressMode_StaticIP_L2TP = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("id", "advBtn_internet", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("downmenu_Multiple","Static IP")
        d.element("downmenu","L2TP")
        d.element("input","gatewayIP_L2TP",txt="192.168.45.1")
        d.element("input","primaryDNSAddress_L2TP",txt="8.8.8.8")
        d.save_new()
        print("\n+++++ Sleep 300 sec +++++\n")
        time.sleep(300)
        result_AddressMode_StaticIP_L2TP = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddressMode_StaticIP_L2TP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddressMode_StaticIP_L2TP, execution_time, current_time

def AddressMode_StaticIP_PPTP():
    file_path = f"{a.Log_folder}\\AddressMode_StaticIP_PPTP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddressMode_StaticIP_PPTP")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_AddressMode_StaticIP_PPTP = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("id", "advBtn_internet", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("downmenu_Multiple","Static IP")
        d.element("downmenu","PPTP")
        d.element("input","gatewayIP_PPTP",txt="192.168.35.1")
        d.element("input","primaryDNSAddress_PPTP",txt="8.8.8.8")
        d.save_new()
        print("\n+++++ Sleep 300 sec +++++\n")
        time.sleep(300)
        result_AddressMode_StaticIP_PPTP = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddressMode_StaticIP_PPTP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddressMode_StaticIP_PPTP, execution_time, current_time

def MTU1450_PPTP():
    file_path = f"{a.Log_folder}\\MTU1450_PPTP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for MTU1450_PPTP")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_MTU1450_PPTP = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("id", "advBtn_internet", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("input","mtu_PPTP_Input",txt="1450")
        d.save_new()
        result_MTU1450_PPTP = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_MTU1450_PPTP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_MTU1450_PPTP, execution_time, current_time

def AddClientManually():
    result_AddClientManually = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        input_name = "test1"
        input_Mac = "1a:03:4f:db:da:55"
        input_IP = a.client1IP
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("class", "client_add_Tag", sec=a.buffer_time)
        d.element("input", "client_Name",txt=input_name, sec=a.buffer_time)
        d.element("input", "client_editMac",txt=input_Mac, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=input_IP, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        result_AddClientManually = True
        print("Finish")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_AddClientManually = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AddClientManually, execution_time, current_time

def EditClientNameAndDelete_NoAiSeries():
    file_path = f"{a.Log_folder}\\EditClientNameAndDelete_NoAiSeries.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditClientNameAndDelete_NoAiSeries")
    result_EditClientNameAndDelete_NoAiSeries = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        # default
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        client_name_elements = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, "client_Name"))
        )
        defaultClientNames = [element.text for element in client_name_elements]
        print(f"The client names are: {defaultClientNames}")
        # change
        input_ClientName = "1111111111A_ ba-1111111111111111"
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("edit", "editData(1)", sec=a.buffer_time)
        d.element("input", "client_Name", txt=input_ClientName, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        client_name_elements_after_change = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, "client_Name"))
        )
        changedClientNames = [element.text for element in client_name_elements_after_change]
        print(f"The client names after change are: {changedClientNames}")

        if input_ClientName in changedClientNames:
            logger.info(f"Pass. The client name is: {input_ClientName}")
            print("Pass")
            result_EditClientNameAndDelete_NoAiSeries.append(True)
        else:
            logger.error("Fail.The client name after change is error.")
            print("Fail")
            result_EditClientNameAndDelete_NoAiSeries.append(False)
        # delete
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("edit", "editData(1)", sec=a.buffer_time)
        client_name_input = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.XPATH, '//input[@name="client_Name"]'))
        )
        client_name_input.clear()
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="disable", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        client_name_elements_after_delete = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, "client_Name"))
        )
        client_names_after_delete = [element.text for element in client_name_elements_after_delete]
        print(f"The client names after delete are: {client_names_after_delete}")

        if client_names_after_delete == defaultClientNames:
            logger.info(f"Pass. The client names are: {client_names_after_delete}")
            print("Pass")
            result_EditClientNameAndDelete_NoAiSeries.append(True)
        else:
            logger.error("Fail. Client name settings after delete are error.")
            print("Fail")
            result_EditClientNameAndDelete_NoAiSeries.append(False)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_EditClientNameAndDelete_NoAiSeries = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print(result_EditClientNameAndDelete_NoAiSeries)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditClientNameAndDelete_NoAiSeries, execution_time, current_time

#Matt_Static IP
def run_StaticIPDefaultWizard(browser, language, title_keyword):
    result_StaticIPDefaultWizard = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser=browser)
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(3)
        # Policy
        d.element("downmenu", language, sec=a.buffer_time)
        # Check wizard title
        wizard_title = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.ID, "wizard_title"))
        )
        title = wizard_title.text
        if title == title_keyword:
            print(f"Pass.The text is {title}.")
            result_StaticIPDefaultWizard.append(True)
        else:
            print(f"Fail.The text is {title}.")
            result_StaticIPDefaultWizard.append(False)
        # Wizard steps
        d.element("id", "btn_agree", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        #I understand and want to continue
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "cb_static", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "static_ipAddress",txt="192.168.1.20",sec=a.buffer_time)
        d.element("input", "static_subnetMask",txt="255.255.255.0",sec=a.buffer_time)
        d.element("input", "static_gateway",txt="192.168.1.1",sec=a.buffer_time)
        d.element("input", "static_primaryDNS",txt="192.168.1.1",sec=a.buffer_time)
        d.element("input", "static_secondaryDNS",txt="192.168.1.2",sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        time.sleep(15)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        time.sleep(a.wizard_time)
        # Check
        d.open(url, a.DUT_admin_pwd)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        print(f"Dut has finished wizard and can access the login page.")
        result_StaticIPDefaultWizard.append(True)
        print("Pass")
        time.sleep(10)
    except TimeoutException:
        print(f"Dut has not finished wizard and cannot access the login page.")
        result_StaticIPDefaultWizard.append(False)
        print("Fail.TimeoutException..")
        time.sleep(10)
    except Exception:
        print(f"Fail.Exception...")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_StaticIPDefaultWizard = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_StaticIPDefaultWizard, execution_time, current_time

#Static IP_Chrome
def StaticIPDefaultWizard_ChromeEnglish():
    return run_StaticIPDefaultWizard('chrome', 'English', 'Terms Of Use And Privacy Policy')
def StaticIPDefaultWizard_ChromeChinese():
    return run_StaticIPDefaultWizard('chrome', '繁體中文', '使用條款和隱私權政策')
def StaticIPDefaultWizard_ChromeSimplified():
    return run_StaticIPDefaultWizard('chrome', '简体中文', '使用条款和隐私策略')
def StaticIPDefaultWizard_ChromeKorean():
    return run_StaticIPDefaultWizard('chrome', '한국', '이용 약관 및 개인 정보 보호 정책')
def StaticIPDefaultWizard_ChromeFrance():
    return run_StaticIPDefaultWizard('chrome', 'français', "Conditions D'Utilisation Et Politique De Confidentialité")
def StaticIPDefaultWizard_ChromePortuguese():
    return run_StaticIPDefaultWizard('chrome', 'português', "Termos De Uso E Política De Privacidade")
def StaticIPDefaultWizard_ChromeEspanol():
    return run_StaticIPDefaultWizard('chrome', 'Español', "Términos De Uso Y Política De Privacidad")
def StaticIPDefaultWizard_ChromeItalian():
    return run_StaticIPDefaultWizard('chrome', 'Italiano', "Condizioni D'Uso E Politica Sulla Privacy")
def StaticIPDefaultWizard_ChromeDeutsch():
    return run_StaticIPDefaultWizard('chrome', 'Deutsch', "Nutzungsbedingungen Und Datenschutzrichtlinie")
def StaticIPDefaultWizard_ChromeRussian():
    return run_StaticIPDefaultWizard('chrome', 'русский', "Условия Использования И Политика Приватности")

def DownUPLan():
    file_path = f"{a.Log_folder}\\DownUPLan.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DownUPLan")
    start_time = time.time()
    def disable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=disable'])
    def enable_Lan():
        subprocess.run(['netsh', 'interface', 'set', 'interface', a.Lan1, 'admin=enable'])
    result_DownUPLan = False
    if not ctypes.windll.shell32.IsUserAnAdmin():
        logger.error("Fail.Please run the program as administrator.")
        print("Please run the program as administrator.")
        return False, 0, ""
    try:
        disable_Lan()
        enable_Lan()
        time.sleep(5)
        result_DownUPLan = True
        print("Finish")      
    except Exception as e:
        print("\n+++++ False +++++\n")
        logger.error(f"An error occurred: {str(e)}")
        result_DownUPLan = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DownUPLan, execution_time, current_time

def SetUpPortForwardRules():
    file_path = f"{a.Log_folder}\\SetUpPortForwardRules.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for SetUpPortForwardRules")
    result_SetUpPortForwardRules = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_PortForwarding", sec=a.buffer_time)
        d.element("id", "createButton", sec=a.buffer_time)
        d.element("input", "pf_Name",txt="1", sec=a.buffer_time)
        d.element("input", "pf_LocalIP",txt=a.client_PC, sec=a.buffer_time)
        d.element("input", "pf_TCPPort",txt="1", sec=a.buffer_time)
        d.element("input", "pf_UDPPort",txt="1", sec=a.buffer_time)
        d.element("id", "save_buttonFocus", sec=a.buffer_time)
        d.save_new()
        time.sleep(5)
        result_SetUpPortForwardRules = True
        print("Finish Set Up Port Forward Rules")
        logger.info("Finish")
    except Exception as e:
        logger.error(e)
        print("\n+++++ False +++++\n")
        result_SetUpPortForwardRules = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_SetUpPortForwardRules, execution_time, current_time

def ClientPCIpReservation():
    file_path = f"{a.Log_folder}\\ClientPCIpReservation.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ClientPCIpReservation")
    result_ClientPCIpReservation = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=a.client_PC, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        logger.info("Pass.Set Client PC ip Reservation.")
        print("Finish.")
        result_ClientPCIpReservation = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ClientPCIpReservation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ClientPCIpReservation, execution_time, current_time

def CheckConfigurationSize():
    file_path = f"{a.Log_folder}\\CheckConfigurationSize.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckConfigurationSize")
    result_CheckConfigurationSize = []
    start_time = time.time()
    try:
        download_dir = a.download_path
        bin_files = [f for f in os.listdir(download_dir) if f.endswith(".bin")]
        for bin_file in bin_files:
            file_path = os.path.join(download_dir, bin_file)
            file_size = os.path.getsize(file_path)
            if file_size > 0:
                logger.info("Pass.Configuration size is not 0 byte.")
                print(f"Pass.Configuration size is not 0 byte.")
                result_CheckConfigurationSize.append(True)
            else:
                logger.error("Fail.Configuration size should not be 0 byte.")
                print("Fail.Configuration size should not be 0 byte.")
                result_CheckConfigurationSize.append(False)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckConfigurationSize.append(False)
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print("\nFound .bin files:")
        for file in bin_files:
            file_path = os.path.join(download_dir, file)
            file_size = os.path.getsize(file_path)
            print(f"{file}, Size: {file_size} bytes")
        logging.shutdown()
        return result_CheckConfigurationSize, execution_time, current_time

def AddProfileTest1ScheduleBlockDayTime():
    file_path = f"{a.Log_folder}\\AddProfileTest1ScheduleBlockDayTime.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AddProfileTest1ScheduleBlockDayTime")
    result_AddProfileTest1ScheduleBlockDayTime = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="test1", sec=a.buffer_time)
        d.scrolldown(500)
        d.element("id", "device_createButton",sec=a.buffer_time)
        d.element("id", a.pcdevice0,sec=a.buffer_time)
        d.element("id", "device_selectBtn_apply",sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        time.sleep(5)
        d.element("checkbox", "status_bedSchedule", status="enable", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_1", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_2", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_3", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_4", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_5", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_6", sec=a.buffer_time)
        d.element("id", "chkBedSchedule_week_7", sec=a.buffer_time)
        d.element("id", "bedTime_apply", sec=a.buffer_time)
        d.element("checkbox", "status_schedule", status="enable", sec=a.buffer_time)
        try:
            wait = WebDriverWait(d._driver, a.button_time)
            bedtime_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".display-bedtime")))
            if bedtime_element.is_displayed():
                logger.info("Pass.Found the bedtime element within 20 seconds.")
                result_AddProfileTest1ScheduleBlockDayTime.append(True)
                print("Pass.Found the bedtime element within 20 seconds.")
            else:
                logger.error("Fail.Bedtime element not found within 20 seconds.")
                result_AddProfileTest1ScheduleBlockDayTime.append(False)
                print("Fail.Bedtime element not found within 20 seconds.")
        except:
            logger.error("Failed to find the bedtime element within 20 seconds.")
            print("Failed to find the bedtime element within 20 seconds.")
        d.plan("Monday", "09:00", "18:00", sec=3)
        d.plan("Tuesday", "09:00", "18:00", sec=3)
        d.plan("Wednesday", "09:00", "18:00", sec=3)
        d.plan("Thursday", "09:00", "18:00", sec=3)
        d.plan("Friday", "09:00", "18:00", sec=3)
        d.plan("Saturday", "09:00", "18:00", sec=3)
        d.plan("Sunday", "09:00", "18:00", sec=3)
        d.element("id", "schedule_apply", sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        time.sleep(5)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        element_3 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[text()="test1"]/following-sibling::td[1]/following-sibling::td[1]'))
        )
        value_3 = element_3.text
        print(f"State: {value_3}")
        if value_3 == 'Schedule Paused':
            result_AddProfileTest1ScheduleBlockDayTime.append(True)
            print("Pass.")
            logger.info(f"Pass.State: {value_3}")
        else:
            print("Fail.")
            logger.error(f"Fail.State: {value_3}")
            result_AddProfileTest1ScheduleBlockDayTime.append(False)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddProfileTest1ScheduleBlockDayTime.append(False)
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AddProfileTest1ScheduleBlockDayTime, execution_time, current_time

def ClientProhibiting():
    file_path = f"{a.Log_folder}\\ClientProhibiting.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ClientProhibiting")
    result_ClientProhibiting = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        try:
            wait = WebDriverWait(d._driver, a.button_time)
            link_icon_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".link_IconE_Block")))
            if link_icon_element.is_displayed():
                logger.info("Pass.Found the link_IconE_Block element within 20 seconds.")
                result_ClientProhibiting.append(True)
                print("Pass.Found the link_IconE_Block element within 20 seconds.")
            else:
                logger.error("Fail.link_IconE_Block element not found within 20 seconds.")
                result_ClientProhibiting.append(False)
                print("Fail.link_IconE_Block element not found within 20 seconds.")
        except:
            logger.error("Failed to find the link_IconE_Block element within 20 seconds.")
            print("Failed to find the link_IconE_Block element within 20 seconds.")
            result_ClientProhibiting.append(False)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ClientProhibiting.append(False)
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ClientProhibiting, execution_time, current_time

def Client2IpReservation():
    file_path = f"{a.Log_folder}\\Client2IpReservation.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Client2IpReservation")
    result_Client2IpReservation = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client 2
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=a.client1IP, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.element("edit", a.editData2, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=a.client2IP, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        logger.info("Finish.Set Client 2 ip Reservation.")
        print("Finish.")
        result_Client2IpReservation = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Client2IpReservation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Client2IpReservation, execution_time, current_time

def Client2IpReservation_35():
    file_path = f"{a.Log_folder}\\Client2IpReservation_35.log"
    logger = setup_logger(file_path)
    logger.info("Log message for Client2IpReservation_35")
    result_Client2IpReservation_35 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client 2
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=a.DUT_clientRSIP + "11", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        d.element("edit", a.editData2, sec=a.buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=a.buffer_time)
        d.element("input", "client_IPAdrReserve",txt=a.DUT_clientRSIP + "35", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        logger.info("Finish.Set Client 2 ip Reservation.")
        print("Finish.")
        result_Client2IpReservation_35 = True
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_Client2IpReservation_35 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_Client2IpReservation_35, execution_time, current_time
    
def EditClient1stSettingTest2():
    file_path = f"{a.Log_folder}\\EditClient1stSettingTest2.log"
    logger = setup_logger(file_path)
    logger.info("Log message for EditClient1stSettingTest2")
    result_EditClient1stSettingTest2 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #Connected Clients
        d.element("id", "clientInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        #Edit Client
        d.element("edit", a.editData1, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="enable", sec=a.buffer_time)
        d.element("downmenu", "test2", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        d.element("edit", a.editData2, sec=a.buffer_time)
        d.element("checkbox", "enableAccess", status="enable", sec=a.buffer_time)
        d.element("downmenu", "test2", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        time.sleep(5)
        test2 = d._driver.find_elements('xpath', "//*[text() = 'test2']")
        if len(test2) > 0:
            logger.info("Pass.Edit Client 1st select test2 Profile.")
            print("Pass.")
            result_EditClient1stSettingTest2 = True
            time.sleep(5)
        else:
            logger.error("Fail.Fail to Edit Client 1st select test2 Profile.")
            print("Fail.")
            result_EditClient1stSettingTest2 = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditClient1stSettingTest2 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_EditClient1stSettingTest2, execution_time, current_time

def M95DHCPDefaultWizard():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_M95DHCPDefaultWizard = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        #policy
        d.element("downmenu", "English", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_agree", sec=a.buffer_time)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("input", "wifi_networkName6G", txt=a.DUT_Wifi_SSID6, sec=a.buffer_time)
        d.element("input", "wifi_password6G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "AutoUpgrade_off", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)     
        d.element("id", "btn_next", sec=320)
        #check
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        print("Dut has finished wizard and can access login page.")
        result_M95DHCPDefaultWizard = True
        print("Pass")
        time.sleep(10)
    except TimeoutException:
        print("Dut has not finished wizard and cannot access the login page.")
        result_M95DHCPDefaultWizard = False
        print("Fail.TimeoutException..")
        time.sleep(10)
    except Exception:
        print("Fail.Exception..")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_M95DHCPDefaultWizard = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_M95DHCPDefaultWizard, execution_time, current_time

def M95CHTDefaultWizard():
    file_path = f"{a.Log_folder}\\M95CHTDefaultWizard.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for M95CHTDefaultWizard")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_M95CHTDefaultWizard = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "pppoe_username",txt=a.CHT_name,sec=a.buffer_time)
        d.element("input", "pppoe_password",txt=a.CHT_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("input", "wifi_networkName6G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password6G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "AutoUpgrade_off", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)     
        d.element("id", "btn_next", sec=320)
        #check
        d.open(url,a.DUT_admin_pwd )
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Pass.Dut has finished wizard and can access login page.")
        result_M95CHTDefaultWizard = True
        print("Finish")
        time.sleep(5)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access login page.")
        result_M95CHTDefaultWizard = False
        print("Fail")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_M95CHTDefaultWizard = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_M95CHTDefaultWizard, execution_time, current_time

def TermOfUseAndPrivacyPolicy():
    result_TermOfUseAndPrivacyPolicy = []
    start_time = time.time()
    try:
        d = Dlink(browser='chrome')
        target_url = a.DUT_GUI_url
        d._driver.get(target_url)
        time.sleep(5)
        language_select = Select(d._driver.find_element(By.ID, "Language"))
        desired_language = "en-us"
        language_select.select_by_value(desired_language)
        wait = WebDriverWait(d._driver, a.button_time)
        TermOfUse = wait.until(EC.presence_of_element_located((By.LINK_TEXT, "Term of Use")))
        TermOfUse.click()
        time.sleep(5)
        d._driver.switch_to.window(d._driver.window_handles[1])
        current_url = d._driver.current_url
        print(f"The URL of the current page is： {current_url}")
        url_substring = "EULA_Term"
        if url_substring in current_url :
            print(f"{'Pass. URL contains'} '{url_substring}'")
            result_TermOfUseAndPrivacyPolicy.append(True)
        else :
            print(f"{'Fail. URL does not contain'} '{url_substring}'")
            result_TermOfUseAndPrivacyPolicy.append(False)
        d._driver.switch_to.window(d._driver.window_handles[0])
        time.sleep(5)
        PrivacyPolicy = wait.until(EC.presence_of_element_located((By.LINK_TEXT, "Privacy Policy")))
        PrivacyPolicy.click()
        time.sleep(5)
        d._driver.switch_to.window(d._driver.window_handles[2])
        time.sleep(5)
        current_url = d._driver.current_url
        print(f"The URL of the current page is： {current_url}")
        url_substring = "EULA_Privacy"
        if url_substring in current_url :
            print(f"{'Pass. URL contains'} '{url_substring}'")
            result_TermOfUseAndPrivacyPolicy.append(True)
        else :
            print(f"{'Fail. URL does not contain'} '{url_substring}'")
            result_TermOfUseAndPrivacyPolicy.append(False)
        d._driver.switch_to.window(d._driver.window_handles[0])
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_TermOfUseAndPrivacyPolicy = False
        time.sleep(2)
    finally:
        print(result_TermOfUseAndPrivacyPolicy)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_TermOfUseAndPrivacyPolicy, execution_time, current_time

def PPTP_Username_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPTP_Username_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "PPTP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_PPTP", txt=a.PPTP_Server, sec=a.buffer_time)
        d.element("input", "userName_PPTP", txt=a.userName_PPTP, sec=a.buffer_time)
        d.element("input", "password_PPTP", txt=a.password_PPTP, sec=a.buffer_time)
        d.save_new()
        input_Username1 = [
            "!'#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "`abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for Username1 in input_Username1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "userName_PPTP", txt=Username1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            current_input_text = d.element("id", "userName_PPTP").get_attribute("value")
            if current_input_text != Username1:
                print(f"Expected: {Username1}, but got: {current_input_text}")
                result_PPTP_Username_Positive.append(False)
            else:
                print(f"Same as Expected: {Username1}.")
                result_PPTP_Username_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPTP_Username_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_PPTP_Username_Positive)
        return result_PPTP_Username_Positive, execution_time, current_time

def PPTP_Username_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPTP_Username_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "PPTP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_PPTP", txt=a.PPTP_Server, sec=a.buffer_time)
        d.element("input", "userName_PPTP", txt=a.userName_PPTP, sec=a.buffer_time)
        d.element("input", "password_PPTP", txt=a.password_PPTP, sec=a.buffer_time)
        d.save_new()
        input_Username1 = [
            "1",
            "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        ]
        for Username1 in input_Username1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "userName_PPTP", txt=Username1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            current_input_text = d.element("id", "userName_PPTP").get_attribute("value")
            if current_input_text != Username1:
                print(f"Expected: {Username1}, but got: {current_input_text}")
                result_PPTP_Username_Limitation.append(False)
            else:
                print(f"Same as Expected: {Username1}.")
                result_PPTP_Username_Limitation.append(True)
        input_Username2 = [
            "",
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for Username2 in input_Username2:            
            d.element("input", "userName_PPTP", txt=Username2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="userName_PPTP" and contains(@class, "error")]'))
            )
            if error_element:
                error_text = error_element.text
                if error_text:
                    print(f"Pass. Error text: {error_text}")
                    result_PPTP_Username_Limitation.append(True)
                else:
                    print("Fail. Error message is empty.")
                    result_PPTP_Username_Limitation.append(False)
            else:
                print("Fail. No error message found.")
                result_PPTP_Username_Limitation.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPTP_Username_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_PPTP_Username_Limitation)
        return result_PPTP_Username_Limitation, execution_time, current_time

def PPTP_Password_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPTP_Password_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "PPTP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_PPTP", txt=a.PPTP_Server, sec=a.buffer_time)
        d.element("input", "userName_PPTP", txt=a.userName_PPTP, sec=a.buffer_time)
        d.element("input", "password_PPTP", txt=a.password_PPTP, sec=a.buffer_time)
        d.save_new()
        input_Password1 = [
            "",
            "1111111111111111111111111111111111111111111111111111111111111111",
        ]
        for Password1 in input_Password1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "password_PPTP", txt=Password1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            current_input_text = d.element("id", "password_PPTP").get_attribute("value")
            if current_input_text != Password1:
                print(f"Expected: {Password1}, but got: {current_input_text}")
                result_PPTP_Password_Limitation.append(False)
            else:
                print(f"Same as Expected: {Password1}.")
                result_PPTP_Password_Limitation.append(True)
        input_Password2 = [
            "11111111111111111111111111111111111111111111111111111111111111111",
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for Password2 in input_Password2:            
            d.element("input", "password_PPTP", txt=Password2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="password_PPTP" and contains(@class, "error")]'))
            )
            if error_element:
                error_text = error_element.text
                if error_text:
                    print(f"Pass. Error text: {error_text}")
                    result_PPTP_Password_Limitation.append(True)
                else:
                    print("Fail. Error message is empty.")
                    result_PPTP_Password_Limitation.append(False)
            else:
                print("Fail. No error message found.")
                result_PPTP_Password_Limitation.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPTP_Password_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_PPTP_Password_Limitation)
        return result_PPTP_Password_Limitation, execution_time, current_time

def PPTP_Password_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPTP_Password_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "PPTP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_PPTP", txt=a.PPTP_Server, sec=a.buffer_time)
        d.element("input", "userName_PPTP", txt=a.userName_PPTP, sec=a.buffer_time)
        d.element("input", "password_PPTP", txt=a.password_PPTP, sec=a.buffer_time)
        d.save_new()
        input_Password1 = [
            "!'#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "`abcdefghijklmnopqrstuvwxyz{|}~",
            " 123456789",
            "012345678 ",
        ]
        for Password1 in input_Password1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "password_PPTP", txt=Password1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            current_input_text = d.element("id", "password_PPTP").get_attribute("value")
            if current_input_text != Password1:
                print(f"Expected: {Password1}, but got: {current_input_text}")
                result_PPTP_Password_Positive.append(False)
            else:
                print(f"Same as Expected: {Password1}.")
                result_PPTP_Password_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPTP_Password_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_PPTP_Password_Positive)
        return result_PPTP_Password_Positive, execution_time, current_time

def L2TP_Username_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_L2TP_Username_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "L2TP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_L2TP", txt=a.L2TP_Server, sec=a.buffer_time)
        d.element("input", "userName_L2TP", txt=a.userName_L2TP, sec=a.buffer_time)
        d.element("input", "password_L2TP", txt=a.password_L2TP, sec=a.buffer_time)
        d.save_new()
        input_Username1 = [
            "1",
            "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        ]
        for Username1 in input_Username1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "userName_L2TP", txt=Username1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            current_input_text = d.element("id", "userName_L2TP").get_attribute("value")
            if current_input_text != Username1:
                print(f"Expected: {Username1}, but got: {current_input_text}")
                result_L2TP_Username_Limitation.append(False)
            else:
                print(f"Same as Expected: {Username1}.")
                result_L2TP_Username_Limitation.append(True)
        input_Username2 = [
            "",
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for Username2 in input_Username2:            
            d.element("input", "userName_L2TP", txt=Username2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="userName_L2TP" and contains(@class, "error")]'))
            )
            if error_element:
                error_text = error_element.text
                if error_text:
                    print(f"Pass. Error text: {error_text}")
                    result_L2TP_Username_Limitation.append(True)
                else:
                    print("Fail. Error message is empty.")
                    result_L2TP_Username_Limitation.append(False)
            else:
                print("Fail. No error message found.")
                result_L2TP_Username_Limitation.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_L2TP_Username_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_L2TP_Username_Limitation)
        return result_L2TP_Username_Limitation, execution_time, current_time

def L2TP_Username_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_L2TP_Username_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "L2TP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_L2TP", txt=a.L2TP_Server, sec=a.buffer_time)
        d.element("input", "userName_L2TP", txt=a.userName_L2TP, sec=a.buffer_time)
        d.element("input", "password_L2TP", txt=a.password_L2TP, sec=a.buffer_time)
        d.save_new()
        input_Username1 = [
            "!'#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "`abcdefghijklmnopqrstuvwxyz{|}~",
        ]
        for Username1 in input_Username1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "userName_L2TP", txt=Username1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            current_input_text = d.element("id", "userName_L2TP").get_attribute("value")
            if current_input_text != Username1:
                print(f"Expected: {Username1}, but got: {current_input_text}")
                result_L2TP_Username_Positive.append(False)
            else:
                print(f"Same as Expected: {Username1}.")
                result_L2TP_Username_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_L2TP_Username_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_L2TP_Username_Positive)
        return result_L2TP_Username_Positive, execution_time, current_time

def L2TP_Password_Limitation():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_L2TP_Password_Limitation = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "L2TP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_L2TP", txt=a.L2TP_Server, sec=a.buffer_time)
        d.element("input", "userName_L2TP", txt=a.userName_L2TP, sec=a.buffer_time)
        d.element("input", "password_L2TP", txt=a.password_L2TP, sec=a.buffer_time)
        d.save_new()
        input_Password1 = [
            "",
            "1111111111111111111111111111111111111111111111111111111111111111",
        ]
        for Password1 in input_Password1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "password_L2TP", txt=Password1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            current_input_text = d.element("id", "password_L2TP").get_attribute("value")
            if current_input_text != Password1:
                print(f"Expected: {Password1}, but got: {current_input_text}")
                result_L2TP_Password_Limitation.append(False)
            else:
                print(f"Same as Expected: {Password1}.")
                result_L2TP_Password_Limitation.append(True)
        input_Password2 = [
            "11111111111111111111111111111111111111111111111111111111111111111",
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for Password2 in input_Password2:            
            d.element("input", "password_L2TP", txt=Password2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            time.sleep(5)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="password_L2TP" and contains(@class, "error")]'))
            )
            if error_element:
                error_text = error_element.text
                if error_text:
                    print(f"Pass. Error text: {error_text}")
                    result_L2TP_Password_Limitation.append(True)
                else:
                    print("Fail. Error message is empty.")
                    result_L2TP_Password_Limitation.append(False)
            else:
                print("Fail. No error message found.")
                result_L2TP_Password_Limitation.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_L2TP_Password_Limitation = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_L2TP_Password_Limitation)
        return result_L2TP_Password_Limitation, execution_time, current_time

def L2TP_Password_Positive():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_L2TP_Password_Positive = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "L2TP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_L2TP", txt=a.L2TP_Server, sec=a.buffer_time)
        d.element("input", "userName_L2TP", txt=a.userName_L2TP, sec=a.buffer_time)
        d.element("input", "password_L2TP", txt=a.password_L2TP, sec=a.buffer_time)
        d.save_new()
        input_Password1 = [
            "!'#$%&'()*+,-./0123456789:;<=>?",
            "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
            "`abcdefghijklmnopqrstuvwxyz{|}~",
            " 123456789",
            "012345678 ",
        ]
        for Password1 in input_Password1:
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("input", "password_L2TP", txt=Password1, sec=a.buffer_time)
            pyautogui.press('enter')
            d.save_new()
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            current_input_text = d.element("id", "password_L2TP").get_attribute("value")
            if current_input_text != Password1:
                print(f"Expected: {Password1}, but got: {current_input_text}")
                result_L2TP_Password_Positive.append(False)
            else:
                print(f"Same as Expected: {Password1}.")
                result_L2TP_Password_Positive.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_L2TP_Password_Positive = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_L2TP_Password_Positive)
        return result_L2TP_Password_Positive, execution_time, current_time

def PPTP_Username_Negative():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_PPTP_Username_Negative = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "PPTP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_PPTP", txt=a.PPTP_Server, sec=a.buffer_time)
        d.element("input", "userName_PPTP", txt=a.userName_PPTP, sec=a.buffer_time)
        d.element("input", "password_PPTP", txt=a.password_PPTP, sec=a.buffer_time)
        d.save_new()
        input_Username2 = [
            " 123456789",
            "012345678 ",
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for Username2 in input_Username2:            
            d.element("input", "userName_PPTP", txt=Username2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="userName_PPTP" and contains(@class, "error")]'))
            )
            if error_element:
                error_text = error_element.text
                if error_text:
                    print(f"Pass. Error text: {error_text}")
                    result_PPTP_Username_Negative.append(True)
                else:
                    print("Fail. Error message is empty.")
                    result_PPTP_Username_Negative.append(False)
            else:
                print("Fail. No error message found.")
                result_PPTP_Username_Negative.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_PPTP_Username_Negative = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_PPTP_Username_Negative)
        return result_PPTP_Username_Negative, execution_time, current_time

def L2TP_Username_Negative():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_L2TP_Username_Negative = []
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "L2TP", sec=a.buffer_time)
        d.element("input", "serverIPAddress_L2TP", txt=a.L2TP_Server, sec=a.buffer_time)
        d.element("input", "userName_L2TP", txt=a.userName_L2TP, sec=a.buffer_time)
        d.element("input", "password_L2TP", txt=a.password_L2TP, sec=a.buffer_time)
        d.save_new()
        input_Username2 = [
            " 123456789",
            "012345678 ",
        ]
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        for Username2 in input_Username2:            
            d.element("input", "userName_L2TP", txt=Username2, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            error_element = WebDriverWait(d._driver, a.button_time).until(
                EC.presence_of_element_located((By.XPATH, '//label[@for="userName_L2TP" and contains(@class, "error")]'))
            )
            if error_element:
                error_text = error_element.text
                if error_text:
                    print(f"Pass. Error text: {error_text}")
                    result_L2TP_Username_Negative.append(True)
                else:
                    print("Fail. Error message is empty.")
                    result_L2TP_Username_Negative.append(False)
            else:
                print("Fail. No error message found.")
                result_L2TP_Username_Negative.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_L2TP_Username_Negative = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_L2TP_Username_Negative)
        return result_L2TP_Username_Negative, execution_time, current_time

def MTU_DHCPStaticPPPoEL2TPPPTP():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_MTU_DHCPStaticPPPoEL2TPPPTP = []
    try:
        InternetConnectionList = [
            "Static IP",
            "Dynamic IP (DHCP)",
            "PPPoE",
            "PPTP",
            "L2TP",
        ]
        MTU_IDList = [
            "mtu_StaticIP_Input",
            "mtu_DynamicIP_Input",
            "mtu_PPPoE_Input",
            "mtu_PPTP_Input",
            "mtu_L2TP_Input",
        ]
        MTU_ValueList = [
            "1500",
            "1500",
            "1492",
            "1400",
            "1400",
        ]
        for InternetConnection, MTUValue, MTUID in zip(InternetConnectionList, MTU_ValueList, MTU_IDList):       
            d.open(url, a.DUT_admin_pwd)
            d.element("id", "submenu_Internet", sec=a.buffer_time)
            d.element("downmenu", InternetConnection, sec=a.buffer_time)
            d.element("id", "advBtn_internet", sec=a.buffer_time)
            current_input_text = d.element("id", MTUID).get_attribute("value")
            if current_input_text != MTUValue:
                print(f"Expected: {MTUValue}, but got: {current_input_text}")
                result_MTU_DHCPStaticPPPoEL2TPPPTP.append(False)
            else:
                print(f"Same as Expected: {MTUValue}.")
                result_MTU_DHCPStaticPPPoEL2TPPPTP.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_MTU_DHCPStaticPPPoEL2TPPPTP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_MTU_DHCPStaticPPPoEL2TPPPTP)
        return result_MTU_DHCPStaticPPPoEL2TPPPTP, execution_time, current_time

#StaticIP_Firefox
def StaticIPDefaultWizard_FirefoxEnglish():
    return run_StaticIPDefaultWizard('firefox', 'English', 'Terms Of Use And Privacy Policy')
#StaticIP_Edge
def StaticIPDefaultWizard_EdgeEnglish():
    return run_StaticIPDefaultWizard('edge', 'English', 'Terms Of Use And Privacy Policy')
#StaticIP_edge_chromium
def StaticIPDefaultWizard_EdgeChromiumEnglish():
    return run_StaticIPDefaultWizard('edge_chromium', 'English', 'Terms Of Use And Privacy Policy')

#DHCP
def run_M95DHCPDefaultWizard(browser, language, title_keyword):
    result_DHCPDefaultWizard = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser=browser)
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        # Policy
        d.element("downmenu", language, sec=a.buffer_time)
        # Check wizard title
        wizard_title = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.ID, "wizard_title"))
        )
        title = wizard_title.text
        if title == title_keyword:
            print(f"Pass.The text is {title}.")
            result_DHCPDefaultWizard.append(True)
        else:
            print(f"Fail.The text is {title}.")
            result_DHCPDefaultWizard.append(False)
        # Wizard steps
        d.element("id", "btn_agree", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("input", "wifi_networkName6G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password6G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "AutoUpgrade_off", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)     
        d.element("id", "btn_next", sec=320)
        # Check
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        print(f"Dut has finished wizard and can access the login page.")
        result_DHCPDefaultWizard.append(True)
        print("Pass")
        time.sleep(10)
    except TimeoutException:
        print(f"Dut has not finished wizard and cannot access the login page.")
        result_DHCPDefaultWizard.append(False)
        print("Fail.TimeoutException..")
        time.sleep(10)
    except Exception:
        print(f"Fail.Exception...")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_DHCPDefaultWizard = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_DHCPDefaultWizard, execution_time, current_time
    
#DHCP_Chrome
def M95DHCPDefaultWizard_ChromeEnglish():
    return run_M95DHCPDefaultWizard('chrome', 'English', 'Terms Of Use And Privacy Policy')
def M95DHCPDefaultWizard_ChromeChinese():
    return run_M95DHCPDefaultWizard('chrome', '繁體中文', '使用條款和隱私權政策')
def M95DHCPDefaultWizard_ChromeSimplified():
    return run_M95DHCPDefaultWizard('chrome', '简体中文', '使用条款和隐私策略')
def M95DHCPDefaultWizard_ChromeKorean():
    return run_M95DHCPDefaultWizard('chrome', '한국', '이용 약관 및 개인 정보 보호 정책')
def M95DHCPDefaultWizard_ChromeFrance():
    return run_M95DHCPDefaultWizard('chrome', 'français', "Conditions D'Utilisation Et Politique De Confidentialité")
def M95DHCPDefaultWizard_ChromePortuguese():
    return run_M95DHCPDefaultWizard('chrome', 'português', "Termos De Uso E Política De Privacidade")
def M95DHCPDefaultWizard_ChromeEspanol():
    return run_M95DHCPDefaultWizard('chrome', 'Español', "Términos De Uso Y Política De Privacidad")
def M95DHCPDefaultWizard_ChromeItalian():
    return run_M95DHCPDefaultWizard('chrome', 'Italiano', "Condizioni D'Uso E Politica Sulla Privacy")
def M95DHCPDefaultWizard_ChromeDeutsch():
    return run_M95DHCPDefaultWizard('chrome', 'Deutsch', "Nutzungsbedingungen Und Datenschutzrichtlinie")
def M95DHCPDefaultWizard_ChromeRussian():
    return run_M95DHCPDefaultWizard('chrome', 'русский', "Условия Использования И Политика Приватности")

#CHT
def run_M95CHTDefaultWizard(browser, language, title_keyword):
    result_CHTDefaultWizard = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser=browser)
    try:
        d.open(url, a.DUT_default_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        # Policy
        d.element("downmenu", language, sec=a.buffer_time)
        # Check wizard title
        wizard_title = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.ID, "wizard_title"))
        )
        title = wizard_title.text
        if title == title_keyword:
            print(f"Pass.The text is {title}.")
            result_CHTDefaultWizard.append(True)
        else:
            print(f"Fail.The text is {title}.")
            result_CHTDefaultWizard.append(False)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "pppoe_username",txt=a.CHT_name,sec=a.buffer_time)
        d.element("input", "pppoe_password",txt=a.CHT_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "wifi_networkName24G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password24G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("input", "wifi_networkName6G", txt=a.DUT_Wifi_SSID, sec=a.buffer_time)
        d.element("input", "wifi_password6G", txt=a.WiFi_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "device_password", txt=a.DUT_admin_pwd, sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("input", "timeZone_Search", txt="Asia/Taipei", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)
        d.element("id", "AutoUpgrade_off", sec=a.buffer_time)
        d.element("id", "btn_next", sec=a.buffer_time)     
        d.element("id", "btn_next", sec=320)
        # Check
        d.open(url, a.DUT_admin_pwd)
        time.sleep(5)
        d._driver.refresh()
        time.sleep(5)
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        print(f"Dut has finished wizard and can access the login page.")
        result_CHTDefaultWizard.append(True)
        print("Pass")
        time.sleep(10)
    except TimeoutException:
        print(f"Dut has not finished wizard and cannot access the login page.")
        result_CHTDefaultWizard.append(False)
        print("Fail.TimeoutException..")
        time.sleep(10)
    except Exception:
        print(f"Fail.Exception...")
        print("\n+++++ False +++++\n")
        time.sleep(5)
        result_CHTDefaultWizard = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CHTDefaultWizard, execution_time, current_time
    
#CHT_Chrome
def M95CHTDefaultWizard_ChromeEnglish():
    return run_M95CHTDefaultWizard('chrome', 'English', 'Terms Of Use And Privacy Policy')
def M95CHTDefaultWizard_ChromeChinese():
    return run_M95CHTDefaultWizard('chrome', '繁體中文', '使用條款和隱私權政策')
def M95CHTDefaultWizard_ChromeSimplified():
    return run_M95CHTDefaultWizard('chrome', '简体中文', '使用条款和隐私策略')
def M95CHTDefaultWizard_ChromeKorean():
    return run_M95CHTDefaultWizard('chrome', '한국', '이용 약관 및 개인 정보 보호 정책')
def M95CHTDefaultWizard_ChromeFrance():
    return run_M95CHTDefaultWizard('chrome', 'français', "Conditions D'Utilisation Et Politique De Confidentialité")
def M95CHTDefaultWizard_ChromePortuguese():
    return run_M95CHTDefaultWizard('chrome', 'português', "Termos De Uso E Política De Privacidade")
def M95CHTDefaultWizard_ChromeEspanol():
    return run_M95CHTDefaultWizard('chrome', 'Español', "Términos De Uso Y Política De Privacidad")
def M95CHTDefaultWizard_ChromeItalian():
    return run_M95CHTDefaultWizard('chrome', 'Italiano', "Condizioni D'Uso E Politica Sulla Privacy")
def M95CHTDefaultWizard_ChromeDeutsch():
    return run_M95CHTDefaultWizard('chrome', 'Deutsch', "Nutzungsbedingungen Und Datenschutzrichtlinie")
def M95CHTDefaultWizard_ChromeRussian():
    return run_M95CHTDefaultWizard('chrome', 'русский', "Условия Использования И Политика Приватности")

#DHCP_Firefox
def M95DHCPDefaultWizard_FirefoxEnglish():
    return run_M95DHCPDefaultWizard('firefox', 'English', 'Terms Of Use And Privacy Policy')
#DHCP_Edge
def M95DHCPDefaultWizard_EdgeEnglish():
    return run_M95DHCPDefaultWizard('edge', 'English', 'Terms Of Use And Privacy Policy')
#DHCP_edge_chromium
def M95DHCPDefaultWizard_EdgeChromiumEnglish():
    return run_M95DHCPDefaultWizard('edge_chromium', 'English', 'Terms Of Use And Privacy Policy')

#CHT_Firefox
def M95CHTDefaultWizard_FirefoxEnglish():
    return run_M95CHTDefaultWizard('firefox', 'English', 'Terms Of Use And Privacy Policy')
#CHT_Edge
def M95CHTDefaultWizard_EdgeEnglish():
    return run_M95CHTDefaultWizard('edge', 'English', 'Terms Of Use And Privacy Policy')
#CHT_edge_chromium
def M95CHTDefaultWizard_EdgeChromiumEnglish():
    return run_M95CHTDefaultWizard('edge_chromium', 'English', 'Terms Of Use And Privacy Policy')

def EditProflleTest1AddWebsiteFilter_AA():
    result_EditProflleTest1AddWebsiteFilter_AA = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        d.element("id", "wf_createButton", sec=a.buffer_time)
        d.element("input", "wf_name", txt="a", sec=a.buffer_time)
        d.element("input", "wf_url", txt="aaa", sec=a.buffer_time)
        apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
        for button in apply_buttons:
            if "Apply" in button.text:
                d._driver.execute_script("arguments[0].click();", button)
                print("Clicked the 'Apply' button successfully.")
                result_EditProflleTest1AddWebsiteFilter_AA.append(True)
                break
        d.element("id", "wf_createButton", sec=a.buffer_time)
        d.element("input", "wf_name", txt="a", sec=a.buffer_time)
        d.element("input", "wf_url", txt="aaa", sec=a.buffer_time)
        apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
        for button in apply_buttons:
            if "Apply" in button.text:
                d._driver.execute_script("arguments[0].click();", button)
                print("Clicked the 'Apply' button successfully.")
                break
        error_element = WebDriverWait(d._driver, a.button_time).until(EC.presence_of_element_located((By.XPATH, '//label[@for="wf_name" and contains(@class, "error")]')))
        if error_element:
            error_text = error_element.text
            if error_text:
                print(f"Pass. Error text: {error_text}")
                result_EditProflleTest1AddWebsiteFilter_AA.append(True)
            else:
                print("Fail. Error message is empty.")
                result_EditProflleTest1AddWebsiteFilter_AA.append(False)
        else:
            print("Fail. No error message found.")
            result_EditProflleTest1AddWebsiteFilter_AA.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_EditProflleTest1AddWebsiteFilter_AA = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_EditProflleTest1AddWebsiteFilter_AA)
        return result_EditProflleTest1AddWebsiteFilter_AA, execution_time, current_time

def AddProfile1():
    result_AddProfile1 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "pc_createButton", sec=a.buffer_time)
        d.element("input", "profileName", txt="1", sec=a.buffer_time)
        d.save_new()
        time.sleep(5)
        result_AddProfile1 = True
        print("Finish")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_AddProfile1 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AddProfile1, execution_time, current_time

def MaximumWebsiteFilter():
    result_MaximumWebsiteFilter = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        wf_name = [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
        ]
        wf_url = [
            "111",
            "222",
            "333",
            "444",
            "555",
            "666",
            "777",
            "888",
            "999",
            "100",
            "011",
            "012",
            "013",
            "014",
            "015",
            "016",
            "017",
            "018",
            "019",
            "020",
            "021",
            "022",
            "023",
            "024",
        ]
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=3)
            d.element("input", "wf_name", txt=name, sec=3)
            d.element("input", "wf_url", txt=url, sec=3)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        time.sleep(3)
                        break
            except:
                print("Failed to click the 'Apply' button.")
                time.sleep(3)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        button_element = d._driver.find_element(By.ID,"wf_createButton")
        if button_element.is_enabled():
            print("Fail.Fail to Add Website Filter to max.")
            result_MaximumWebsiteFilter.append(False)
            time.sleep(5)
        else:
            print("Pass. Successfully Add Website Filter to Max .")
            result_MaximumWebsiteFilter.append(True)
            time.sleep(5)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_MaximumWebsiteFilter = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_MaximumWebsiteFilter)
        return result_MaximumWebsiteFilter, execution_time, current_time
    
def ParentalSettingsEdit(inputTxt,Description):
    result_ParentalSettingsEdit = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "ParentalControl_Settings", sec=a.buffer_time)
        d.element("input", Description, txt=inputTxt, sec=a.buffer_time)
        d.save_new()
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "ParentalControl_Settings", sec=a.buffer_time)
        current_input_text = d.element("id", Description).get_attribute("value")
        if current_input_text != inputTxt:
            print(f"Fail.Expected: {inputTxt}, but got: {current_input_text}")
            result_ParentalSettingsEdit.append(False)
        else:
            print(f"Pass.Got: {current_input_text}.Same as Expected: {inputTxt}.")
            result_ParentalSettingsEdit.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalSettingsEdit = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalSettingsEdit, execution_time, current_time
def SettingsManualPauseControlMsg_Edit():
    return ParentalSettingsEdit("ManualPauseControlMsg",'Description_0')
def SettingsWebsiteFilterMsg_Edit():
    return ParentalSettingsEdit("WebsiteFilterMsg",'Description_1')
def SettingsCustomScheduleMsg_Edit():
    return ParentalSettingsEdit("CustomScheduleMsg",'Description_2')
def SettingsBedtimeScheduleMsg_Edit():
    return ParentalSettingsEdit("BedtimeScheduleMsg",'Description_3')


def CaptivePageMessage(expected_value):
    start_time = time.time()
    result_CaptivePageMessage = []
    websites = [
        {
            "url": "http://www.dlink.com",
            "messages": [
                {"text": expected_value},
            ]
        }
    ]
    options = webdriver.ChromeOptions()
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--incognito')
    driver = webdriver.Chrome(options=options)
    driver.set_window_size(a.W, a.H)
    time.sleep(5)
    try:
        for website in websites:
            driver.get(website["url"])
            time.sleep(5)
            driver.refresh()
            time.sleep(20)
            page_info = driver.execute_script("return document.body.innerHTML;")
            print(page_info)
            element = driver.find_element(By.CLASS_NAME, 'text')
            actual_value = element.text.strip()
            if actual_value == expected_value:
                print(f"Pass.Expected: \"{expected_value}\",Got: \"{actual_value}\"")
                result_CaptivePageMessage.append(True)
            else:
                print(f"Fail.Expected: \"{expected_value}\",Got: \"{actual_value}\"")
                result_CaptivePageMessage.append(False)
    except Exception as e:
        print(e)
        result_CaptivePageMessage = False
        print("Fail")
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_CaptivePageMessage, execution_time, current_time
def CaptivePageMessage_ManualPauseControlMsg():
    return CaptivePageMessage("ManualPauseControlMsg")
def CaptivePageMessage_WebsiteFilterMsg():
    return CaptivePageMessage("WebsiteFilterMsg")
def CaptivePageMessage_CustomScheduleMsg():
    return CaptivePageMessage("CustomScheduleMsg")
def CaptivePageMessage_BedtimeScheduleMsg():
    return CaptivePageMessage("BedtimeScheduleMsg")

def ParentalSettingsReset(cp_button,Description,inputTxt):
    result_ParentalSettingsReset = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "ParentalControl_Settings", sec=a.buffer_time)
        d.element("id", cp_button, sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("id", "ParentalControl_Settings", sec=a.buffer_time)
        current_input_text = d.element("id", Description).get_attribute("value")
        if current_input_text != inputTxt:
            print(f"Fail.Expected: {inputTxt}, but got: {current_input_text}")
            result_ParentalSettingsReset.append(False)
        else:
            print(f"Pass.Got: {current_input_text}.Same as Expected: {inputTxt}.")
            result_ParentalSettingsReset.append(True)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ParentalSettingsReset = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ParentalSettingsReset, execution_time, current_time
def SettingsManualPauseControlMsg_Reset():
    return ParentalSettingsReset("cp_button_0","Description_0","Your access to the Internet is currently paused by the network administrator. Please check with your network administrator for more info on this restriction.")
def SettingsWebsiteFilterMsg_Reset():
    return ParentalSettingsReset("cp_button_1","Description_1","Your attempt to access this website was denied. Please check with your network administrator for more info on this restriction.")
def SettingsCustomScheduleMsg_Reset():
    return ParentalSettingsReset("cp_button_2","Description_2","Internet access is scheduled to be unavailable at this time by the network administrator. Please check with your network administrator for more info on this restriction.")
def SettingsBedtimeScheduleMsg_Reset():
    return ParentalSettingsReset("cp_button_3","Description_3","Internet access is unavailable during bedtime hours. Please check with your network administrator for more info on this restriction.")

def AddWebsiteFilter_dlink():
    result_AddWebsiteFilter_dlink = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(500)
        wf_name = [
            "dlink",
        ]
        wf_url = [
            "www.dlink.com",
        ]
        for name, url in zip(wf_name, wf_url):
            d.element("id", "wf_createButton", sec=a.buffer_time)
            d.element("input", "wf_name", txt=name, sec=a.buffer_time)
            d.element("input", "wf_url", txt=url, sec=a.buffer_time)
            try:
                apply_buttons = d._driver.find_elements(By.TAG_NAME, "button")
                for button in apply_buttons:
                    if "Apply" in button.text:
                        d._driver.execute_script("arguments[0].click();", button)
                        print("Clicked the 'Apply' button successfully.")
                        break
            except:
                print("Failed to click the 'Apply' button.")
                time.sleep(5)
        d.save_new()
        result_AddWebsiteFilter_dlink.append(True)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.scrolldown(800)
        label_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, 'wf_RemainingRules'))
        )
        label_text = label_element.text
        if label_text == "23":
            print(f"Pass.Remaining: {label_text}")
            result_AddWebsiteFilter_dlink.append(True)
        else:
            result_AddWebsiteFilter_dlink.append(False)
            print(f"Fail.Remaining: {label_text}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AddWebsiteFilter_dlink = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AddWebsiteFilter_dlink, execution_time, current_time
    
def TelnetDate(day,date_time):
    result_TelnetDate = False
    start_time = time.time()
    try:
        time.sleep(30)
        TERATERM_PATH = a.TERATERM_PATH
        p = subprocess.Popen(TERATERM_PATH)
        time.sleep(10)
        new_connection_window = gw.getWindowsWithTitle('建立新連線')[0]
        # 切換到 "建立新連線" 視窗
        new_connection_window.activate()
        new_connection_window.always_on_top = True
        time.sleep(10)
        pyautogui.typewrite(a.DUT_default_Lan_IP)
        pyautogui.press('enter')
        time.sleep(5)
        pyautogui.typewrite('admin')
        pyautogui.press('enter')
        time.sleep(2)
        pyautogui.typewrite(a.DUT_admin_pwd)
        pyautogui.press('enter')
        time.sleep(2)
        pyautogui.typewrite('date')
        pyautogui.press('enter')
        time.sleep(2)
        pyautogui.typewrite(day)
        pyautogui.press('enter')
        pyautogui.typewrite(date_time)
        pyautogui.press('enter')
        time.sleep(10)
        pyautogui.typewrite('date')
        pyautogui.press('enter')
        time.sleep(5)
        result_TelnetDate = True
        print("Finish.Telnet command Date.")
        print("Finish")
    except Exception:
        print("Fail.Exception...")
        result_TelnetDate = False
    finally:
        p.terminate()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_TelnetDate, execution_time, current_time

def TelnetDate1310():
    return TelnetDate(a.MondayDate,"date 13:10")
def TelnetDate2300():
    return TelnetDate(a.MondayDate,"date 23:00")
def TelnetDate1440():
    return TelnetDate(a.MondayDate,"date 14:40")
def TelnetDate2358():
    return TelnetDate(a.MondayDate,"date 23:58")
def TelnetDate1730():
    return TelnetDate(a.MondayDate,"date 17:30")
def TelnetDate0758():
    return TelnetDate(a.MondayDate,"date 07:58")
def TelnetSundayDate2358():
    return TelnetDate(a.SundayDate,"date 23:58")
def TelnetSundayDate1900():
    return TelnetDate(a.SundayDate,"date 19:00")
def TelnetSundayDate1730():
    return TelnetDate(a.SundayDate,"date 17:30")

def upgrade_file(file_name):
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_upgrade = False
    file_path = f"{a.all_file_path}\\{file_name}"
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_UpdateFirmware", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='adButton']/span", sec=a.buffer_time)
        time.sleep(5)
        select = d._driver.find_element('xpath', '//*[@id="manualFirmwareTable2_selectFileBtn"]')
        time.sleep(5)
        select.click()
        time.sleep(5)
        pyautogui.write(file_path)
        time.sleep(5)
        pyautogui.hotkey('alt', 'o')
        time.sleep(5)
        d.element("id", "manualFirmwareTable2_upgradeBtn", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.buffer_time)
        wait = WebDriverWait(d._driver, a.button_time)
        restricted = wait.until(EC.presence_of_element_located((By.XPATH, '//*[contains(text(), "Firmware Upgrade failed!")]')))
        if restricted:
            print(f"Pass. Firmware Upgrade failed for {file_name}!")
            result_upgrade = True
        else:
            print("Fail")
            result_upgrade = False
        time.sleep(5)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        time.sleep(a.reboot_time)
        result_upgrade = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_upgrade, execution_time, current_time
def upgrade1bin():
    return upgrade_file("1.bin")
def upgrade2png():
    return upgrade_file("2.png")
def upgrade3pdf():
    return upgrade_file("3.pdf")

def TimeZoneChange(time_zone):
    result = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Time", sec=a.buffer_time)
        time_zone_input = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.XPATH, '//input[@name="timeZone_Search"]'))
        )
        time_zone_input.clear()
        d.element("input", "timeZone_Search", txt=time_zone, sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Time", sec=a.buffer_time)
        time_zone_input = WebDriverWait(d._driver, a.button_time).until(
            EC.visibility_of_element_located((By.XPATH, '//input[@name="timeZone_Search"]'))
        )
        if time_zone in time_zone_input.get_attribute("value"):
            print(f"Pass. {time_zone}")
            result = True
        else:
            print("Fail.")
            result = False
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result, execution_time, current_time

def TimeZoneChangeToAdelaide():
    return TimeZoneChange("Australia/Adelaide")
def TimeZoneChangeToTaipei():
    return TimeZoneChange("Asia/Taipei")

def ScheduleTest(start_time, end_time):
    file_path = f"{a.Log_folder}\\ScheduleTest.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ScheduleTest")
    overall_start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    result_ScheduleTest = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(600)
        xpath_Advanced = "//span[contains(@onclick, 'showAdv(\"24\")') and contains(., 'Advanced Settings')]"
        Advanced = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, xpath_Advanced))
        )
        Advanced.click()
        print("Click Advanced.")
        d.element("xpath", "//li[@data-name='Add']", sec=a.buffer_time)
        day = ["Monday",
               "Tuesday", 
               "Wednesday", 
               "Thursday", 
               "Friday", 
               "Saturday", 
               "Sunday",
               ]
        time_intervals = [
            (start_time, end_time),
        ]
        for Day in day:
            for start_time1, end_time1 in time_intervals:
                d.plan(Day, start_time1, end_time1, sec=3)
        buttons = d._driver.find_elements(By.XPATH, "//button[contains(text(), 'Apply')]")
        if buttons:
            buttons[0].click()
        else:
            print("Apply button not found.")
        d.save_new()
        result_ScheduleTest = True
        logger.info("Finish")
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ScheduleTest = False
        time.sleep(5)
    finally:
        overall_end_time = time.time()
        execution_time = overall_end_time - overall_start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ScheduleTest, execution_time, current_time

def ScheduleTest17to18():
    return ScheduleTest("17:00", "18:00")
def ScheduleTest16to17():
    return ScheduleTest("16:00", "17:00")


#####

def upgrade_fileSuccess(file_name):
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_upgrade = False
    file_path = f"{a.all_file_path}\\{file_name}"
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_UpdateFirmware", sec=a.buffer_time)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='adButton']/span", sec=a.buffer_time)
        time.sleep(5)
        select = d._driver.find_element('xpath', '//*[@id="manualFirmwareTable2_selectFileBtn"]')
        time.sleep(5)
        select.click()
        time.sleep(5)
        pyautogui.write(file_path)
        time.sleep(5)
        pyautogui.hotkey('alt', 'o')
        time.sleep(5)
        d.element("id", "manualFirmwareTable2_upgradeBtn", sec=a.buffer_time)
        d.element("id", "popalert_ok", sec=a.reboot_time)
        result_upgrade = True
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        time.sleep(a.reboot_time)
        result_upgrade = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_upgrade, execution_time, current_time
def upgradeFW10():
    return upgrade_fileSuccess("MS30A1_FW100B24.bin")
def upgradeFW11():
    return upgrade_fileSuccess("MS30A1_FW110B24.bin")

def CheckCannotGoTo6RestrictedWeb2():
    file_path = f"{a.Log_folder}\\CheckCannotGoTo6RestrictedWeb.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCannotGoTo6RestrictedWeb")
    start_time = time.time()
    options = webdriver.ChromeOptions()
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--incognito')
    driver = webdriver.Chrome(options=options)
    result_CheckCannotGoTo6RestrictedWeb = []
    try:
        driver.set_window_size(a.W, a.H)
        websites = [
            #{
            #    "url": "https://yahoo.com",
            #    "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            #},
            {
                "url": "https://www.youtube.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.facebook.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.google.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.ge.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://www.xn--fiq228c.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
            {
                "url": "https://microsoft.com",
                "expected_texts": ["Access to this website is restricted.", "你的連線不是私人連線", "無法連上這個網站"]
            },
        ]
        for website in websites:
            try:
                driver.get(website["url"])
                wait = WebDriverWait(driver, a.button_time)
                found_restricted = False

                for text in website["expected_texts"]:
                    try:
                        restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                        if restricted:
                            logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                            print("Pass.")
                            result_CheckCannotGoTo6RestrictedWeb.append(True)
                            found_restricted = True
                            time.sleep(3)
                            break
                    except Exception:
                        continue
                # 如果沒有找到任何預期的文本，則視為無法訪問
                if not found_restricted:
                    logger.info(f"Pass. URL: {website['url']} is not accessible.")
                    print("Pass (not accessible).")
                    result_CheckCannotGoTo6RestrictedWeb.append(True)

            except Exception as e:
                logger.error(f"Error accessing {website['url']}: {str(e)}")
                print(f"Error accessing {website['url']}. Pass (not accessible).")
                result_CheckCannotGoTo6RestrictedWeb.append(True)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckCannotGoTo6RestrictedWeb = False
    finally:
        print(result_CheckCannotGoTo6RestrictedWeb)
        driver.quit()
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCannotGoTo6RestrictedWeb, execution_time, current_time

def CannotPingv4v6RestrictedDomain6_2():
    file_path = f"{a.Log_folder}\\CannotPingv4v6RestrictedDomain6.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CannotPingv4v6RestrictedDomain6")
    def execute_ping(address, version):
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                logger.info("Pass. Cannot Ping v4 v6 Restricted Domain 6.")
                print("Pass.")
                return True
            else:
                logger.error("Fail. Still can Ping v4 v6 Restricted Domain 6.")
                print("Fail.")
                return False
        else:
            logger.error("Fail. Still can Ping v4 v6.")
            print("Fail.")
            return False
    print("ipconfig/flushdns")
    subprocess.run(["ipconfig", "/flushdns"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/release")
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    print("ipconfig/renew")
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    print("Wait 60 sec...")
    time.sleep(60)
    start_time = time.time()
    CannotPingv4v6RestrictedDomain6_v4 = []
    CannotPingv4v6RestrictedDomain6_v6 = []
    addresses = [
        #"yahoo.com",
        "www.youtube.com",
        "www.facebook.com",
        "www.google.com",
        "www.ge.com",
        "www.xn--fiq228c.com",
        "microsoft.com",
    ]
    versions = ["-4", "-6"]
    try:
        for address in addresses:
            for version in versions:
                if version == "-4" or version == "-6":
                    is_passed = execute_ping(address, version)
                    if version == "-4":
                        CannotPingv4v6RestrictedDomain6_v4.append(is_passed)
                    elif version == "-6":
                        CannotPingv4v6RestrictedDomain6_v6.append(is_passed)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception..")
        CannotPingv4v6RestrictedDomain6_v4 = False
        CannotPingv4v6RestrictedDomain6_v6 = False
    finally:
        print(CannotPingv4v6RestrictedDomain6_v4, CannotPingv4v6RestrictedDomain6_v6)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return CannotPingv4v6RestrictedDomain6_v4, CannotPingv4v6RestrictedDomain6_v6, execution_time, current_time
    
def CheckCanGoTo7DeletedRestrictedWeb2():
    file_path = f"{a.Log_folder}\\CheckCanGoTo7DeletedRestrictedWeb.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckCanGoTo7DeletedRestrictedWeb")
    start_time = time.time()
    options = webdriver.ChromeOptions()
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--incognito')
    driver = webdriver.Chrome(options=options)
    result_CheckCanGoTo7DeletedRestrictedWeb = []
    try:
        driver.set_window_size(a.W, a.H)
        websites = [
            {
                "url": "https://yahoo.com",
                "expected_texts": ["yahoo"]
            },
            {
                "url": "https://www.youtube.com",
                "expected_texts": ["youtube"]
            },
            {
                "url": "https://www.facebook.com",
                "expected_texts": ["facebook"]
            },
            {
                "url": "https://www.google.com",
                "expected_texts": ["google"]
            },
            {
                "url": "https://www.ge.com",
                "expected_texts": ["ge"]
            },
            {
                "url": "https://xn--fiq228c.com",
                "expected_texts": ["xn--fiq228c"]
            },
            {
                "url": "https://microsoft.com",
                "expected_texts": ["microsoft"]
            },
        ]
        for website in websites:
            driver.get(website["url"])
            wait = WebDriverWait(driver, a.button_time)
            for text in website["expected_texts"]:
                try:
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass.")
                        result_CheckCanGoTo7DeletedRestrictedWeb.append(True)
                        time.sleep(3)
                        break
                    else:
                        logger.error(f"Fail. URL: {website['url']}, No expected text found.")
                        print("Fail.")
                        result_CheckCanGoTo7DeletedRestrictedWeb.append(False)
                except Exception:
                    pass
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_CheckCanGoTo7DeletedRestrictedWeb = False
    finally:
        print(result_CheckCanGoTo7DeletedRestrictedWeb)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckCanGoTo7DeletedRestrictedWeb, execution_time, current_time
    
def RemoveProfile1Client_0():
    file_path = f"{a.Log_folder}\\RemoveProfile1Client.log"
    logger = setup_logger(file_path)
    logger.info("Log message for RemoveProfile1Client")
    result_RemoveProfile1Client = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        #edit
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.element("id", "edit_Btn_profileName", sec=a.buffer_time)
        input_profileName = 'test1.'
        d.element("input", "pop_profileName",txt=input_profileName, sec=a.buffer_time)
        d.element("id", "wf_save", sec=a.buffer_time)
        d.scrolldown(600)
        d.element("class", "cardElement_remove",index=1, sec=a.buffer_time)
        time.sleep(5)
        d.save_new()
        #check
        time.sleep(5)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        element_1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, f'//td[text()="{input_profileName}"]'))
        )
        value_1 = element_1.text
        if value_1 == input_profileName:
            print(f"Pass.ProfileName: {value_1}")
            result_RemoveProfile1Client.append(True)
        else:
            print(f"Fail.ProfileName: {value_1}")
            result_RemoveProfile1Client.append(False)
        
        element_2 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, f'//td[text()="{input_profileName}"]/following-sibling::td[1]'))
        )
        value_2 = element_2.text
        if value_2 == "0":
            logger.info(f"Pass.DeviceCount: {value_2}")
            result_RemoveProfile1Client.append(True)
            print("Pass.")
        else:
            logger.error(f"Fail.DeviceCount: {value_2}")
            result_RemoveProfile1Client.append(False)
            print("Fail.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("Fail.Exception...")
        result_RemoveProfile1Client = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_RemoveProfile1Client, execution_time, current_time

def QoSsetPriority():
    file_path = f"{a.Log_folder}\\QoSsetPriority.log"
    logger = setup_logger(file_path)
    logger.info("Log message for QoSsetPriority")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_QoSsetPriority = False
    try :
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        more_info_btn = WebDriverWait(d._driver, a.button_time).until(
        EC.element_to_be_clickable((By.CLASS_NAME, 'more_info_btn'))
        )
        more_info_btn.click()
        d.element("downmenu", "Low: Always Enable", sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        d.save_new()
        result_QoSsetPriority = True
        logger.info("Pass.You can save the settings.")
        print("Finish")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_QoSsetPriority = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_QoSsetPriority, execution_time, current_time
    
def TelnetDate0745():
    return TelnetDate(a.MondayDate,"date 07:45")

def ChangePPPoEStatic():
    file_path = f"{a.Log_folder}\\ChangePPPoEStatic.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangePPPoEStatic")
    result_ChangePPPoEStatic = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "PPPoE", sec=a.buffer_time)
        d.element("input", "userName_PPPoE",txt=a.CHT_static_name,sec=a.buffer_time)
        d.element("input", "password_PPPoE",txt=a.CHT_pwd,sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(600)
        d.element("xpath", "//*[starts-with(@id, 'sbOptions_')]/li[2]/a[contains(., 'Static IP')]", sec=a.buffer_time)
        input_Name = "PPPoE"
        d.element("input", "serviceName_PPPoE",txt = input_Name, sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        Static = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowConnectionType"]'))
        )
        ConnectionType = Static.text
        print(f"The Connection Type after change is: {ConnectionType}")
        if ConnectionType == "Static IP (PPPoE)":
            logger.info(f"Pass. The Connection Type is: {ConnectionType}")
            print("Pass")
            result_ChangePPPoEStatic.append(True)
        else:
            logger.error("Fail.The Connection Type after change is error.")
            print("Fail.")
            result_ChangePPPoEStatic.append(False)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangePPPoEStatic = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangePPPoEStatic, execution_time, current_time
    
def ChangePPPoE1350():
    file_path = f"{a.Log_folder}\\ChangePPPoE1350.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangePPPoE1350")
    result_ChangePPPoE1350 = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(600)
        d.element("input","mtu_PPPoE_Input", txt = "1350", sec=a.buffer_time)
        d.save_new()
        print("Pass")
        result_ChangePPPoE1350.append(True)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangePPPoE1350 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangePPPoE1350, execution_time, current_time
    
def MacAddressClone():
    file_path = f"{a.Log_folder}\\MacAddressClone.log"
    logger = setup_logger(file_path)
    logger.info("Log message for MacAddressClone")
    result_MacAddressClone = []
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(600)
        MACAddressClone = a.MACAddress
        d.element("input","macAddress_PPPoE", txt = MACAddressClone, sec=a.buffer_time)
        d.save_new()
        print("Pass")
        result_MacAddressClone.append(True)
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_MacAddressClone = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_MacAddressClone, execution_time, current_time
    
def WirelessGuestZoneSSID_LanguageCharacters2():
    url = a.DUT_GUI_url
    d = Dlink(browser='firefox')
    start_time = time.time()
    result_WirelessGuestZoneSSID_LanguageCharacters2 = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_GuestZoneSSID = [
            "À Á Â Ã Ä Å Æ Ç È É Ê",
            "😐😨☀♠🐣",
        ]
        for GuestZoneSSID in input_GuestZoneSSID:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.element("xpath", '//div[@id="page_btn" and @class="linkstyle_1" and contains(., "Guest Zone")]', sec=a.buffer_time)
            d.element("checkbox", "status_gz_24",status="enable", sec=a.buffer_time)
            d.element("input", "wifiName_24g", txt=GuestZoneSSID, sec=a.buffer_time)
            d.save_new()
            #check
            d.open(url, a.DUT_admin_pwd)
            d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
            d.element("id", "routerInfo_circle", sec=a.buffer_time)
            d.scrolldown(500)
            NewSSID = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_24G_Guest"]'))
            )
            SSID = NewSSID.text
            print(f"The New Wi-Fi Name (SSID) after change is: {SSID}")
            if SSID == GuestZoneSSID:
                print(f"Pass. The New Wi-Fi Name (SSID) is: {SSID}")
                result_WirelessGuestZoneSSID_LanguageCharacters2.append(True)
            else:
                print("Fail.The New Wi-Fi Name (SSID) after change is error.")
                result_WirelessGuestZoneSSID_LanguageCharacters2.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WirelessGuestZoneSSID_LanguageCharacters2 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WirelessGuestZoneSSID_LanguageCharacters2, execution_time, current_time

def WirelessSSID_LanguageCharacters2():
    url = a.DUT_GUI_url
    d = Dlink(browser='firefox')
    start_time = time.time()
    result_WirelessSSID_LanguageCharacters2 = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_WirelessSSID = [
            "À Á Â Ã Ä Å Æ Ç È É Ê",
            "😐😨☀♠🐣",
        ]
        for WirelessSSID in input_WirelessSSID:
            d.element("id", "submenu_WiFi", sec=a.buffer_time)
            d.scrolldown(500)
            d.element("input", "wifiName_24", txt=WirelessSSID, sec=a.buffer_time)
            d.save_new()
            #check
            d.open(url, a.DUT_admin_pwd)
            d.element("id", "rwdBtn_Topology", sec=a.buffer_time)
            d.element("id", "routerInfo_circle", sec=a.buffer_time)
            d.scrolldown(500)
            NewSSID = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowSSID_24G"]'))
            )
            SSID = NewSSID.text
            print(f"The New Wi-Fi Name (SSID) after change is: {SSID}")
            if SSID == WirelessSSID:
                print(f"Pass. The New Wi-Fi Name (SSID) is: {SSID}")
                result_WirelessSSID_LanguageCharacters2.append(True)
            else:
                print("Fail.The New Wi-Fi Name (SSID) after change is error.")
                result_WirelessSSID_LanguageCharacters2.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_WirelessSSID_LanguageCharacters2 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WirelessSSID_LanguageCharacters2, execution_time, current_time
    
def AddClientManuallyAndCheck_M95():
    result_AddClientManuallyAndCheck = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        buffer_time = 15
        d.open(url, a.DUT_admin_pwd)
        input_name = "test1"
        input_Mac = "1a:03:4f:db:da:55"
        input_IP = a.client1IP
        d.element("id", "clientInfo_circle", sec=buffer_time)
        d.scrolldown(500)
        d.element("class", "client_add_Tag", sec=buffer_time)
        d.element("input", "client_Name",txt=input_name, sec=buffer_time)
        d.element("input", "client_editMac",txt=input_Mac, sec=buffer_time)
        d.element("checkbox", "enableReserveIP",status="enable", sec=buffer_time)
        d.element("input", "client_IPAdrReserve",txt=input_IP, sec=buffer_time)
        d.element("id", "check_btn", sec=buffer_time)
        time.sleep(20)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=buffer_time)
        d.element("id", "clientInfo_circle", sec=buffer_time)
        d.scrolldown(500)
        client_name_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//div[@class="client_Name client_Name_Offline"]'))
        )
        print(f"Name: {client_name_element.text}")
        clientReserveIPs = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.CLASS_NAME, 'client_IPv4Address'))
        )
        if clientReserveIPs:
            for clientReserveIP in clientReserveIPs:
                print(f"Reserve IP: {clientReserveIP.text}")
        else:
            print("Client Reserve IP not found.")
        d.element("edit",a.editData2, sec=buffer_time)
        ClientMAC = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_all_elements_located((By.ID, 'client_MACAddress'))
        )
        if ClientMAC:
            MAC = ClientMAC[0].text
            print("MAC:", MAC)
        else:
            print("Client MAC not found.")
        if (
            client_name_element.text == input_name
            and clientReserveIPs
            and any(clientReserveIP.text == input_IP for clientReserveIP in clientReserveIPs)
        ):
            result_AddClientManuallyAndCheck = True
            print("Pass.Device name、mac address、reserve IP match to your settings.")
        else:
            result_AddClientManuallyAndCheck = False
            print("Fail. Client information does not match.")

    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_AddClientManuallyAndCheck = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AddClientManuallyAndCheck, execution_time, current_time

def DisableGuestZoneSmartConnect_M95():
    file_path = f"{a.Log_folder}\\DisableGuestZoneSmartConnect_M95.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisableGuestZoneSmartConnect_M95")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_DisableGuestZoneSmartConnect_M95 = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("checkbox", "status_superMesh",status="disable", sec=a.buffer_time)
        d.element("checkbox", "status_smart",status="disable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.element("java", "GuestZone", sec=a.buffer_time)
        d.scrolldown(200)
        d.element("checkbox", "GuestEnabled_Smart",status="disable", sec=a.buffer_time)
        d.save_new()
        result_DisableGuestZoneSmartConnect_M95 = True
        logger.info("Finish.")
        print("Finish.")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DisableGuestZoneSmartConnect_M95 = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisableGuestZoneSmartConnect_M95, execution_time, current_time

def ChangeHostName():
    file_path = f"{a.Log_folder}\\ChangeHostName.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeHostName")
    result_ChangeHostName = True
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        advBtn = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.ID, "advBtn_internet"))
        )
        advBtn.click()
        d.scrolldown(500)
        input_hostName = "DUTmodel"
        d.element("input","hostName_DynamicIP", txt = input_hostName, sec=a.buffer_time)
        d.save_new()
        result_ChangeHostName = True
    except Exception as e:
        import traceback
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        traceback.print_exc()
        result_ChangeHostName = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeHostName, execution_time, current_time

def AITrafficOptimizer_disable():
    file_path = f"{a.Log_folder}\\AITrafficOptimizer_disable.log"
    logger = setup_logger(file_path)
    logger.info("Log message for AITrafficOptimizer_disable")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_AITrafficOptimizer_disable = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        label_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, 'label[for="id_MGMT_TYPE_checkbox"]'))
        )
        span_enabled = label_element.find_element(By.CLASS_NAME, "chkbox_disabled")
        element_text = span_enabled.text
        if element_text == "Disabled":
            logger.info("Pass.The AI Traffic Optimizer is 'Disabled'.")
            print("Pass.")
            result_AITrafficOptimizer_disable = True
        else:
            logger.error(f"Fail.The AI Traffic Optimizer is not 'Disabled'.")
            print("Fail")
            result_AITrafficOptimizer_disable = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_AITrafficOptimizer_disable = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_AITrafficOptimizer_disable, execution_time, current_time
    
def QoSsetWANSpeed():
    file_path = f"{a.Log_folder}\\QoSsetWANSpeed.log"
    logger = setup_logger(file_path)
    logger.info("Log message for QoSsetWANSpeed")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_QoSsetWANSpeed = False
    try :
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        d.element("checkbox", "id_MGMT_TYPE_checkbox",status="enable", sec=a.buffer_time)
        d.element("xpath", "//*[@id='privacyNotice_QoSEnabling']/button", sec=a.buffer_time)
        d.element("xpath", "//*[@id='privacyNotice']/button", sec=a.buffer_time)
        d.element("input", "QoS_DownloadSpeed",txt="100", sec=a.buffer_time)
        d.element("input", "QoS_UploadSpeed",txt="50", sec=a.buffer_time)
        d.save_new()
        result_QoSsetWANSpeed = True
        logger.info("Pass.You can save the settings.")
        print("Finish")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_QoSsetWANSpeed = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_QoSsetWANSpeed, execution_time, current_time

def test_speed():
    file_path = f"{a.Log_folder}\\test_speed.log"
    logger = setup_logger(file_path)
    logger.info("Log message for test_speed")
    start_time = time.time()
    result_test_speed = False
    try :
        st = speedtest.Speedtest()
        print("Select Server...")
        st.get_best_server()
        print("Test download speed...")
        download_speed = st.download() / 1_000_000  # 轉換為 Mbps
        print("Test upload speed...")
        upload_speed = st.upload() / 1_000_000  # 轉換為 Mbps
        print(f"Download speed: {download_speed:.2f} Mbps")
        print(f"Upload speed: {upload_speed:.2f} Mbps")

        if 85 < download_speed < 100 and 40 < upload_speed < 50:
            print("Pass")
            result_test_speed = True
        else:
            print("Fail")
            result_test_speed = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_test_speed = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_test_speed, execution_time, current_time
    
def QoSsetPriority_SpecifyMAC(MAC,level):
    file_path = f"{a.Log_folder}\\QoSsetPriority.log"
    logger = setup_logger(file_path)
    logger.info("Log message for QoSsetPriority")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_QoSsetPriority = False
    target_string = MAC
    print(MAC)
    try :
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        more_info_btn = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, f"//span[contains(translate(@onclick, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ:', 'abcdefghijklmnopqrstuvwxyz'), '{target_string.lower().replace(':', '')}')]"))
        )
        more_info_btn.click()
        d.element("downmenu", level, sec=a.buffer_time)
        d.element("id", "check_btn", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        more_info_btn2 = WebDriverWait(d._driver, a.button_time).until(
            EC.element_to_be_clickable((By.XPATH, f"//span[contains(translate(@onclick, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ:', 'abcdefghijklmnopqrstuvwxyz'), '{target_string.lower().replace(':', '')}')]"))
        )
        more_info_btn2.click()
        element = WebDriverWait(d._driver, 10).until(
            EC.visibility_of_element_located((By.XPATH, f"//a[contains(text(), '{level}')]"))
        )
        print(f"find: {element.text}")
        result_QoSsetPriority = True
        logger.info("Pass.You can save the settings.")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_QoSsetPriority = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_QoSsetPriority, execution_time, current_time
def highpriority1hour():
    return QoSsetPriority_SpecifyMAC(a.Lan2_MAC,"High: 1 Hour")
def highpriorityAlways():
    return QoSsetPriority_SpecifyMAC(a.Lan1_MAC,"High: Always Enable")
def priorityNormal():
    return QoSsetPriority_SpecifyMAC(a.Lan1_MAC,"Normal")

def HeavyConsumer():
    file_path = f"{a.Log_folder}\\HeavyConsumer.log"
    logger = setup_logger(file_path)
    logger.info("Log message for HeavyConsumer")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_HeavyConsumer = False
    try :
        DisplayYTFor1Minutes()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        d.element("id", "clientHeavy_btn", sec=a.buffer_time)
        HeavyConsumerClient = a.hostname
        element = WebDriverWait(d._driver, 60).until(
            EC.visibility_of_element_located((By.XPATH, f"//div[contains(text(), '{HeavyConsumerClient}')]"))
        )
        print(f"find: {element.text}")
        result_HeavyConsumer = True
        logger.info("Pass.")
        print("Pass")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_HeavyConsumer = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_HeavyConsumer, execution_time, current_time
    
def DisplayYT(sleep_time):
    file_path = f"{a.Log_folder}\\DisplayYTFor15Minutes.log"
    logger = setup_logger(file_path)
    logger.info("Log message for DisplayYTFor15Minutes")
    start_time = time.time()
    options = webdriver.ChromeOptions()
    options.add_argument('--ignore-certificate-errors')
    driver = webdriver.Chrome(options=options)
    result_DisplayYTFor15Minutes = []
    try:
        driver.set_window_size(a.W, a.H)
        websites = [
            {
                "url": "https://www.youtube.com/watch?v=aIFTUmQGTEQ",
                "expected_texts": ["youtube"]
            },
            {
                "url": "https://www.youtube.com/watch?v=EkjMKZzYwwA",
                "expected_texts": ["youtube"]
            },
            {
                "url": "https://www.youtube.com/watch?v=Qk5xF1Likck",
                "expected_texts": ["youtube"]
            },
        ]
        for website in websites:
            wait = WebDriverWait(driver, a.button_time)
            for text in website["expected_texts"]:
                try:
                    driver.execute_script("window.open('');")  # 開啟新分頁
                    driver.switch_to.window(driver.window_handles[-1])  # 切換到新分頁 
                    time.sleep(5)
                    driver.get(website["url"])
                    #pyautogui.press('space')
                    time.sleep(20)
                    settings_button = driver.find_element(By.CLASS_NAME, "ytp-settings-button")
                    settings_button.click()
                    time.sleep(10)
                    quality_button = driver.find_element(By.XPATH, '//*[text()="畫質"]')
                    quality_button.click()
                    time.sleep(10)
                    high_quality_option = driver.find_element(By.XPATH, '//*[text()="2160p"]')
                    high_quality_option.click()
                    time.sleep(10)
                    restricted = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[contains(text(), "{text}")]')))
                    if restricted:
                        logger.info(f"Pass. URL: {website['url']}, Text: {text}")
                        print("Pass")
                        result_DisplayYTFor15Minutes.append(True)
                        logger.info("Finish")
                        print("Finish")
                        time.sleep(10)
                        break
                    else:
                        logger.error(f"Fail. URL: {website['url']}, No expected text found.")
                        print("Fail")
                        result_DisplayYTFor15Minutes.append(False)
                except Exception as e:
                    logger.error(f"An error occurred while processing the website: {str(e)}")
        print(f"\n+++++ Play video for {sleep_time} minutes +++++\n")
        time.sleep(sleep_time)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DisplayYTFor15Minutes = False
    finally:
        print(result_DisplayYTFor15Minutes)
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DisplayYTFor15Minutes, execution_time, current_time
    
def DisplayYTFor15Minutes():
    return DisplayYT(900)
def DisplayYTFor1Minutes():
    return DisplayYT(60)

def disableQOS():
    file_path = f"{a.Log_folder}\\disableQOS.log"
    logger = setup_logger(file_path)
    logger.info("Log message for disableQOS")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_disableQOS = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        d.element("checkbox", "id_MGMT_TYPE_checkbox",status="enable", sec=a.buffer_time)
        d.element("input", "QoS_DownloadSpeed",txt="999", sec=a.buffer_time)
        d.element("input", "QoS_UploadSpeed",txt="999", sec=a.buffer_time)
        d.element("checkbox", "id_MGMT_TYPE_checkbox",status="disable", sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        label_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, 'label[for="id_MGMT_TYPE_checkbox"]'))
        )
        span_enabled = label_element.find_element(By.CLASS_NAME, "chkbox_disabled")
        element_text = span_enabled.text
        if element_text == "Disabled":
            logger.info("Pass.The AI Traffic Optimizer is 'Disabled'.")
            print("Pass.")
            result_disableQOS = True
        else:
            logger.error(f"Fail.The AI Traffic Optimizer is not 'Disabled'.")
            print("Fail")
            result_disableQOS = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_disableQOS = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_disableQOS, execution_time, current_time

def disableQOSClientInfo():
    file_path = f"{a.Log_folder}\\disableQOSClientInfo.log"
    logger = setup_logger(file_path)
    logger.info("Log message for disableQOSClientInfo")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_disableQOSClientInfo = []
    try :
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_QoS", sec=a.buffer_time)
        d.element("class", "more_info_btn ", sec=a.buffer_time)
        element1 = WebDriverWait(d._driver, 60).until(
            EC.visibility_of_element_located((By.ID, "qosInfoPop_deviceName"))
        )
        print(f"find: {element1.text}")
        result_disableQOSClientInfo.append(True)
        element2 = WebDriverWait(d._driver, 60).until(
            EC.visibility_of_element_located((By.XPATH, "//div[contains(@class, 'sbHolder') and contains(@class, 'sbHolderDisabled')]"))
        )
        print(f"find: {element2.text}")
        result_disableQOSClientInfo.append(True)
        time.sleep(5)
        try:
            qos_container = WebDriverWait(d._driver, 10).until(
                EC.visibility_of_element_located((By.ID, "qosClientGraphic"))
            )
            result_disableQOSClientInfo.append(False)
            try:
                real_time_traffic = qos_container.find_element(By.XPATH, "//div[contains(text(), 'Real-Time Traffic')]").text
                logger.info(f"Find: {real_time_traffic}")
                result_disableQOSClientInfo.append(False)
            except:
                logger.info("Pass.Not Find Real-Time Traffic,skip.")
                result_disableQOSClientInfo.append(True)
            try:
                weekly_traffic = qos_container.find_element(By.XPATH, "//div[contains(text(), 'Weekly Traffic')]").text
                logger.info(f"Fail.Find : {weekly_traffic}")
                result_disableQOSClientInfo.append(False)
            except:
                logger.info("Pass.Not Find Weekly Traffic,skip.")
                result_disableQOSClientInfo.append(True)
        except:
            logger.info("Pass.Not Find qosClientGraphic.Pass.")
            print("Pass")
            result_disableQOSClientInfo.append(True)
        
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_disableQOSClientInfo = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_disableQOSClientInfo, execution_time, current_time
    
def fakeStaticIP():
    result_fakeStaticIP = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("downmenu", "Static IP", sec=a.buffer_time)
        d.element("input", "iPAddress_StaticIP",txt="192.168.33.120", sec=a.buffer_time)
        d.element("input", "subnetMask_StaticIP",txt="255.255.255.0", sec=a.buffer_time)
        d.element("input", "defaultGateway_StaticIP",txt="192.168.33.1", sec=a.buffer_time)
        d.element("input", "primaryDNSAddress_StaticIP",txt="192.168.33.1", sec=a.buffer_time)
        d.save_new()
        print("Pass.")
        result_fakeStaticIP = True
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_fakeStaticIP = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_fakeStaticIP, execution_time, current_time

def configureCHTPPPoEv6():
    result_configureCHTPPPoEv6 = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d.element("downmenu", "PPPoE", sec=a.buffer_time)
        d.element("downmenu", "Create a new session", sec=a.buffer_time)
        d.element("input", "pppoe_Username",txt=a.CHT_name,sec=a.buffer_time)
        d.element("input", "pppoe_Password",txt=a.CHT_pwd,sec=a.buffer_time)
        d.save_new()
        result_configureCHTPPPoEv6 = True
        print("Pass.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_configureCHTPPPoEv6 = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_configureCHTPPPoEv6, execution_time, current_time
    
def EnableSecureDNS():
    result_EnableSecureDNS = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("checkbox", "sdns_enabled",status="enable", sec=a.buffer_time)
        d.element("downmenu", "Google", sec=a.buffer_time)
        d.save_new()
        print("Pass.")
        result_EnableSecureDNS = True
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_EnableSecureDNS = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_EnableSecureDNS, execution_time, current_time

def run_pingv6():
    file_path = f"{a.Log_folder}\\run_pingv6.log"
    logger = setup_logger(file_path)
    logger.info("Log message for run_pingv6")
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    time.sleep(10)
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    time.sleep(60)
    def execute_ping(address, version):
        time.sleep(40)
        result = subprocess.run(["ping", address, version, "-n", "10"], capture_output=True, text=True)
        filename = time.strftime("ping_result_{}_{}.txt".format(version, time.strftime("%Y%m%d_%H%M%S")))
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)
        connection_issues_counts = 0
        connection_issue_messages = ["目的地連接埠無法連線", "目的地主機無法連線", "要求等候逾時", "Ping 要求找不到主機","傳輸失敗。一般失敗","目的地網路無法連線"]
        for message in connection_issue_messages:
            connection_issues_counts += result.stdout.count(message)
        if connection_issues_counts > 5:
            logger.error("Fail. More than 4 occurrences of connection issues.")
            print("Fail.")
            return False
        else:
            logger.info("Pass. Connection issues found but not exceeding 4 occurrences.")
            print("Pass.")
            return True
    try:
        start_time = time.time()
        result_run_pingv6 = []
        v6_address = "2001:4860:4860::8888"
        result_run_pingv6.append(execute_ping(v6_address, "-6"))
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_run_pingv6 = [False]
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        print(result_run_pingv6)
        logging.shutdown()
        return result_run_pingv6, execution_time, current_time
    
def WLANCompatibility(wifiName):
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_WLANCompatibility = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("input", "wifiName_24",txt=wifiName, sec=a.buffer_time)
        d.element("input", "wifiName_5",txt=wifiName, sec=a.buffer_time)
        d.save_new()
        result_WLANCompatibility = True
        print("Finish.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_WLANCompatibility = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_WLANCompatibility, execution_time, current_time
def WLANCompatibility_abgnWPA3():
    return WLANCompatibility("-i~[-=)<-i~[-i=#$>('~;)*")
def WLANCompatibility_acWPA3():
    return WLANCompatibility("-i~[-=)<-i~[-i=#$>('~;)*_ac3")
def WLANCompatibility_acWPA2WPA3():
    return WLANCompatibility("-i~[-=)<-i~[-i=#$>('~;)*_ac23")

def SecurityMode(mode):
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_SecurityMode = False
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("downmenu", mode, sec=a.buffer_time)
        d.element("id", "btn_OK", sec=a.buffer_time)
        d.save_new()
        result_SecurityMode = True
        print("Finish.")
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_SecurityMode = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_SecurityMode, execution_time, current_time
def ChangeWPA3():
    return SecurityMode("WPA3-Personal")
def ChangeWPA2WPA3():
    return SecurityMode("WPA2/WPA3-Personal")

def pingDUTgateway():
    result_pingDUTgateway = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internet_image", sec=a.buffer_time)
        d.scrolldown(300)
        # DefaultGateway
        DefaultGateway1 = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="index_ShowDefaultGateway"]'))
        )
        DefaultGateway = DefaultGateway1.text
        
        if DefaultGateway1:
            print(f"Default Gateway: {DefaultGateway}")
            result_pingDUTgateway = True
            ping_result, execution_time, current_time = ping_DefaultGateway(DefaultGateway)
            print(f"Ping Result: {ping_result}, Execution Time: {execution_time}, Current Time: {current_time}")
        else:
            print("Default Gateway not found.")
            result_pingDUTgateway = False

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_pingDUTgateway = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_pingDUTgateway, execution_time, current_time
def ping_DefaultGateway(DefaultGateway):
    start_time = time.time()
    result_ping_DefaultGateway = False
    try:
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        time.sleep(10)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        time.sleep(60)
        result = subprocess.run(["ping", DefaultGateway, "-n", "10"], capture_output=True, text=True)
        
        filename = time.strftime("ping_result_%Y%m%d_%H%M%S.txt")
        full_filepath = os.path.join(a.all_file_path, filename)
        with open(full_filepath, "w", encoding="utf-8") as f:
            f.write(result.stdout)

        if ("目的地連接埠無法連線" in result.stdout or
            "目的地主機無法連線" in result.stdout or
            "要求等候逾時" in result.stdout or
            "Ping 要求找不到主機" in result.stdout):
            counts1 = result.stdout.count("目的地連接埠無法連線") + result.stdout.count("目的地主機無法連線") + result.stdout.count("要求等候逾時")
            counts2 = result.stdout.count("Ping 要求找不到主機")
            if counts1 > 4 or counts2 == 1:
                print("Fail.")
                result_ping_DefaultGateway = False
            else:
                result_ping_DefaultGateway = True
                print("Pass.")
        else:
            result_ping_DefaultGateway = True
            print("Pass.")

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ping_DefaultGateway = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ping_DefaultGateway, execution_time, current_time

def ChangeWireless_NegativePwd():
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeWireless_NegativePwd = []
    try:
        d.open(url, a.DUT_admin_pwd)
        input_pwd = [
            " 1a2b3c4d5e",
            "1a2b3c4d5e ",
            "112b3c4d5e",
            "1a2b3c4d5e",
            "1a2b3c4d5e",
            "0123456789",
            "abcedfghij",
        ]
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        for pwd in input_pwd:
            d.element("input", "password_24", txt=pwd, sec=a.buffer_time)
            d._driver.execute_script("window.scrollTo(0, 0);")
            d.element("id", "Save_btn", sec=a.buffer_time)
            try:
                error_element = d._driver.find_element(By.XPATH, '//label[@for="password_24" and contains(@class, "error")]')
                error_text = error_element.text
                print(f"Pass.Error text: {error_text}")
                result_ChangeWireless_NegativePwd.append(True)
            except NoSuchElementException:
                print("Error element not found.")
                result_ChangeWireless_NegativePwd.append(False)
        time.sleep(5)
        input_pwd2 = a.WiFi_pwd
        d.element("input","password_24",txt=input_pwd2 ,sec=a.buffer_time)
        d.save_new()
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "routerInfo_circle", sec=a.buffer_time)
        d.scrolldown(500)
        NewPwd = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//label[@id="index_ShowPassword_24G"]'))
        )
        pwd_after_change = NewPwd.text
        print(f"The New Wi-Fi pwd after change is: {pwd_after_change}")
        if pwd_after_change == input_pwd2:
            print(f"Pass. The New Wi-Fi pwd is: {pwd_after_change}")
            result_ChangeWireless_NegativePwd.append(True)
        else:
            print("Fail. The New Wi-Fi pwd after change is error.")
            result_ChangeWireless_NegativePwd.append(False)
    except Exception as e:
        print(e)
        print("\n+++++ False +++++\n")
        result_ChangeWireless_NegativePwd = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print(result_ChangeWireless_NegativePwd)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeWireless_NegativePwd, execution_time, current_time

def defaultCancelWizard_M95(Browser):
    file_path = f"{a.Log_folder}\\DefaultCancelWizard.log"
    logger = setup_logger(file_path)
    logger.info("Pass.Log message for DefaultCancelWizard")
    url = a.DUT_GUI_url
    d = Dlink(browser=Browser)
    result_DefaultCancelWizard = False
    start_time = time.time()
    try:
        d.open(url, a.DUT_default_pwd)
        d.element("downmenu", "English",sec=a.buffer_time)
        d.element("id", "btn_agree",sec=a.buffer_time)
        d.element("id", "closeCreatePopBtn",sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.buffer_time)
        d.element("input", "device_password",txt=a.DUT_admin_pwd,sec=a.buffer_time)
        d.element("id", "btn_next",sec=a.wizard_time)
        #check
        d.open(url,a.DUT_admin_pwd )
        timeout = a.button_time
        profileInfo_chk_false = WebDriverWait(d._driver, timeout).until(
        EC.presence_of_element_located((By.CLASS_NAME, "profileInfo_chk_false"))
        )
        logger.info("Finish.Dut has finished wizard and can access login page.")
        result_DefaultCancelWizard = True
        print("Finish")
        time.sleep(5)
    except TimeoutException:
        logger.error("Fail.Dut has not finished wizard and cannot access login page.")
        result_DefaultCancelWizard = False
        print("Fail")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_DefaultCancelWizard = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_DefaultCancelWizard, execution_time, current_time
def M95DefaultCancelWizard():
    return defaultCancelWizard('chrome')
def M95DefaultCancelWizard_firefox():
    return defaultCancelWizard('firefox')

def test_speed_1Mbps():
    file_path = f"{a.Log_folder}\\test_speed_1Mbps.log"
    logger = setup_logger(file_path)
    logger.info("Log message for test_speed_1Mbps")
    start_time = time.time()
    result_test_speed_1Mbps = False
    try :
        st = speedtest.Speedtest()
        print("Select Server...")
        st.get_best_server()
        print("Test download speed...")
        download_speed = st.download() / 1_000_000  # 轉換為 Mbps
        print("Test upload speed...")
        upload_speed = st.upload() / 1_000_000  # 轉換為 Mbps
        print(f"Download speed: {download_speed:.2f} Mbps")
        print(f"Upload speed: {upload_speed:.2f} Mbps")

        if 0.1 < download_speed <= 1 and 0.1 < upload_speed <= 1:
            print("Pass")
            result_test_speed_1Mbps = True
        else:
            print("Fail")
            result_test_speed_1Mbps = False
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_test_speed_1Mbps = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_test_speed_1Mbps, execution_time, current_time

def EditProflleTest1Enable_AllowLimitedAccess():
    result_EditProflleTest1Enable_AllowLimitedAccess = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_ParentalControl", sec=a.buffer_time)
        d.element("xpath", a.EditIcon, sec=a.buffer_time)
        d.element("checkbox", "status_SlowAccess", status="enable", sec=a.buffer_time)
        d.save_new()
        time.sleep(5)
        print("Pass.")
        result_EditProflleTest1Enable_AllowLimitedAccess = True
        time.sleep(5)
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_EditProflleTest1Enable_AllowLimitedAccess = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_EditProflleTest1Enable_AllowLimitedAccess, execution_time, current_time

def UPnP(Status):
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_UPnP = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "upnp",status=Status,sec=a.buffer_time)
        d.element("input", "presentDeviceName", txt="", sec=a.buffer_time)
        d.save_new()
        print("Finish.")
        result_UPnP = True
        time.sleep(5)
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        result_UPnP = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_UPnP, execution_time, current_time
    
def UPnP_enable():
    return UPnP('enable')
def UPnP_disable():
    return UPnP('disable')

def capture_packets(keyword, duration):
    captured_packets = []
    capture = pyshark.LiveCapture(interface=a.Lan1)
    start_time = time.time()
    print(f"Start capturing packets, lasting {duration} seconds...")
    time.sleep(1)
    subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
    print("release")
    time.sleep(1)
    subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
    print("renew")
    time.sleep(1)
    try:
        for packet in capture.sniff_continuously(packet_count=None):
            if time.time() - start_time > duration:
                break
            if keyword in str(packet):
                print(f"Captured packet matching keyword: {packet}")
                captured_packets.append(str(packet))
    except Exception as e:
        print("Request failed:", e)
    finally:
        capture.close()
        print("Capture ended.")
        return captured_packets

def save_captured_packets_to_txt(keyword, output_file="captured_packets.txt", duration=30, retries=1):
    attempt = 0
    while attempt <= retries:
        captured_packets = capture_packets(keyword, duration)
        if captured_packets:
            with open(output_file, 'w') as f:
                f.write("\n".join(captured_packets))
            print(f"The packet content has been output to {output_file}")
            return output_file
        else:
            print("No packets captured. Retrying...")
            attempt += 1
            time.sleep(5)
    print("No packets captured after retries.")
    return None
def ssdp_PKtoTXT():
    return save_captured_packets_to_txt('ssdp')

def checkURL_isFound(file_name):
    target_string = (a.DUT_GUI_url + ":5000/rootDesc.xml\r\n").strip()
    result_checkURL_isFound = False
    start_time = time.time()
    try:
        with open(file_name, 'r') as f:
            content = f.read()
            if target_string in content:
                print("Target string found, test passed")
                result_checkURL_isFound = True
            else:
                print("The target string was not found, and the test failed.")
                print("The capture content is as follows:")
                print(content)
                result_checkURL_isFound = False
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        result_checkURL_isFound = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_checkURL_isFound, execution_time, current_time
def checkURL_NotFound(file_name):
    target_string = a.DUT_GUI_url.strip()
    result_checkURL_NotFound = False
    start_time = time.time()
    try:
        with open(file_name, 'r') as f:
            content = f.read()
            if target_string in content:
                print("The target string was found, and the test failed.")
                print("The capture content is as follows:")
                print(content)
                result_checkURL_NotFound = False
            else:
                print("The capture content is as follows:")
                print(content)
                print("Target string not found, test passed")
                result_checkURL_NotFound = True
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        result_checkURL_NotFound = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_checkURL_NotFound, execution_time, current_time
    
def AlwaysBroadcast(Status,Range1):
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_AlwaysBroadcast = False
    try :
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.scrolldown(300)
        d.element("xpath", "//*[@id='main']/div[1]/span",sec=a.buffer_time)
        d.scrolldown(500)
        d.element("checkbox", "alwaysBroadcast",status=Status,sec=a.buffer_time)
        d.element("input", "presentDeviceName", txt="", sec=a.buffer_time)
        d.element("input", "dhcpIPAddressRange1",txt=Range1,sec=a.buffer_time)
        d.save_new()
        print("Finish.")
        result_AlwaysBroadcast = True
        time.sleep(5)
    except Exception as e:
        print(e)
        result_AlwaysBroadcast = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_AlwaysBroadcast, execution_time, current_time
def AlwaysBroadcast_enable():
    return AlwaysBroadcast('enable',"103")
def AlwaysBroadcast_disable():
    return AlwaysBroadcast('disable',"102")

#以下為啟動wireshark抓封包截圖方法
'''
def wireshark(filter,name):
    start_time = time.time()
    result_wireshark = False
    try:
        command = [a.Wireshark, "-k", "-Y", filter, "-i", a.Lan1]
        process = subprocess.Popen(command)
        time.sleep(2)
        subprocess.run(["ipconfig", "/release"], capture_output=True, text=True)
        print("IP released.")
        time.sleep(1)
        subprocess.run(["ipconfig", "/renew"], capture_output=True, text=True)
        print("IP renewed.")
        time.sleep(5)
        screenshot = pyautogui.screenshot()
        screenshot.save(name)
        time.sleep(5)
        process.terminate()
        result_wireshark = True
    except Exception as e:
        print(e)
        result_wireshark = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_wireshark, execution_time, current_time
def wireshark_bootp1():
    return wireshark('bootp.option.type == 1',"wireshark_bootp_screenshot.png")
def wireshark_bootp():
    return wireshark('bootp',"wireshark_bootp_screenshot.png")
# 指定 Tesseract 的路徑
pytesseract.pytesseract.tesseract_cmd = a.pytesseract_path
def extract_text_from_image(image_path, output_txt_path):
    image = Image.open(image_path)
    extracted_text = pytesseract.image_to_string(image)
    with open(output_txt_path, 'w', encoding='big5', errors='replace') as txt_file:
        txt_file.write(extracted_text)
    return extracted_text
def check_ip_in_text_file(txt_file_path, target):
    with open(txt_file_path, 'r', encoding='big5', errors='replace') as txt_file:
        content = txt_file.readlines()
    matching_lines = [line.strip() for line in content if target in line]
    return matching_lines, content


def NOTFind_targetIP(image_path, output_txt_path, target):
    start_time = time.time()
    result_NOTFind_targetIP = False
    try:
        extracted_text = extract_text_from_image(image_path, output_txt_path)
        matching_lines, all_content = check_ip_in_text_file(output_txt_path, target)
        print("extracted_text:")
        for line in all_content:
            print(line.strip())
        if matching_lines:
            result_NOTFind_targetIP = False
            print(f"Fail,still can find {target} in package.")
            time.sleep(2)
        else:
            result_NOTFind_targetIP = True
            print(f"Pass,not found {target} in package.")
            time.sleep(2)
        if os.path.exists(image_path):
            os.remove(image_path)
            print(f"Deleted files: {image_path}")
        else:
            print(f"File does not exist: {image_path}")

        if os.path.exists(output_txt_path):
            os.remove(output_txt_path)
            print(f"Deleted files: {output_txt_path}")
        else:
            print(f"File does not exist: {output_txt_path}")
        time.sleep(2)
    except Exception as e:
        print(e)
        result_NOTFind_targetIP = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_NOTFind_targetIP, execution_time, current_time

def Find_targetIP(image_path, output_txt_path, target):
    start_time = time.time()
    result_Find_targetIP = False
    try:
        extracted_text = extract_text_from_image(image_path, output_txt_path)
        matching_lines, all_content = check_ip_in_text_file(output_txt_path, target)
        print("extracted_text:")
        for line in all_content:
            print(line.strip())
        if matching_lines:
            result_Find_targetIP = True
            print(f"Pass,find {target} in package")
            time.sleep(2)
        else:
            result_Find_targetIP = False
            print(f"Fail,not found {target} in package")
            time.sleep(2)
        if os.path.exists(image_path):
            os.remove(image_path)
            print(f"Deleted files: {image_path}")
        else:
            print(f"File does not exist: {image_path}")

        if os.path.exists(output_txt_path):
            os.remove(output_txt_path)
            print(f"Deleted files: {output_txt_path}")
        else:
            print(f"File does not exist: {output_txt_path}")
        time.sleep(2)
    except Exception as e:
        print(e)
        result_Find_targetIP = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_Find_targetIP, execution_time, current_time
'''
def v6_SLAAC_StatelessDHCP():
    result_v6_SLAAC_StatelessDHCP = False
    start_time = time.time()
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    try:
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "submenu_Internet", sec=a.buffer_time)
        d.element("java", "Internet_IPv6", sec=a.buffer_time)
        d.scrolldown(600)
        d.element("xpath", "//*[@id='advButtonv6_span']", sec=a.buffer_time)
        d.element("downmenu", "SLAAC+Stateless DHCP", sec=a.buffer_time)
        d.save_new()
        time.sleep(60)
        d.open(url, a.DUT_admin_pwd)
        d.element("id", "menu_Home", sec=a.buffer_time)
        d.element("id", "internetInfo_circle", sec=a.buffer_time)
        d.element("id", "v6_btn_WAN", sec=a.buffer_time)
        d.scrolldown(300)
        connection_type_element = WebDriverWait(d._driver, a.button_time).until(
            EC.presence_of_element_located((By.XPATH, '//td[@id="Connection_Type_IPv6"]'))
        )
        print(f"Connection Type: {connection_type_element.text}")
        ConnectionType = ["PPPoE", "Auto Detection"]
        if connection_type_element.text in ConnectionType:
            result_v6_SLAAC_StatelessDHCP = True
            print("Pass. Internet status display correctly on Home page.")
        else:
            result_v6_SLAAC_StatelessDHCP = False
            print("Fail. Connection Type does not match.")
    except Exception as e:
            print(e)
            print("\n+++++ False +++++\n")
            result_v6_SLAAC_StatelessDHCP = False
            time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_v6_SLAAC_StatelessDHCP, execution_time, current_time

def set_static_ip(interface, ip_address, subnet_mask, gateway):
    result_set_static_ip = False
    start_time = time.time()
    try:
        subprocess.run([
            "netsh", "interface", "ip", "set", "address",
            f"name={interface}", "static", ip_address, subnet_mask, gateway
        ], check=True)
        print(f"Successfully set static IP {ip_address} on {interface}.")
        result_set_static_ip = True
    except subprocess.CalledProcessError as e:
        print(f"Failed to set static IP: {e}")
        result_set_static_ip = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_set_static_ip, execution_time, current_time

def disable_netbios():
    result_disable_netbios = False
    start_time = time.time()
    try:
        command = """
        Get-WmiObject -Class Win32_NetworkAdapterConfiguration | 
        Where-Object { $_.IPEnabled -eq $true } | 
        ForEach-Object { $_.SetTcpipNetbios(2) }
        """        
        result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
        if result.returncode == 0:
            print("NetBIOS has been disabled successfully.")
            result_disable_netbios = True
        else:
            print(f"Failed to disable NetBIOS: {result.stderr}")
            result_disable_netbios = False
    except Exception as e:
        print(f"An error occurred: {e}")
        result_disable_netbios = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_disable_netbios, execution_time, current_time

def enable_netbios():
    result_enable_netbios = False
    start_time = time.time()
    try:
        command = """
        Get-WmiObject -Class Win32_NetworkAdapterConfiguration | 
        Where-Object { $_.IPEnabled -eq $true } | 
        ForEach-Object { $_.SetTcpipNetbios(0) }
        """        
        result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True)
        if result.returncode == 0:
            print("NetBIOS has been enabled successfully.")
            result_enable_netbios = True
        else:
            print(f"Failed to enable NetBIOS: {result.stderr}")
            result_enable_netbios = False
    except Exception as e:
        print(f"An error occurred: {e}")
        result_enable_netbios = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_enable_netbios, execution_time, current_time

def check_dhcp(interface):
    result_check_dhcp = False
    start_time = time.time()
    try:
        result = subprocess.run([
            "netsh", "interface", "ip", "show", "config", f"name={interface}"
        ], capture_output=True, text=True, encoding='utf-8')
        if "DHCP Enabled" in result.stdout:
            print(f"{interface} is already set to DHCP.")
            result_check_dhcp = True
        else:
            print(f"{interface} is not set to DHCP.")
            set_dhcp(interface)
            result_check_dhcp = True
    except Exception as e:
        print(f"An error occurred: {e}")
        result_check_dhcp = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_check_dhcp, execution_time, current_time

def set_dhcp(interface):
    try:
        subprocess.run([
            "netsh", "interface", "ip", "set", "address",
            f"name={interface}", "dhcp"
        ], check=True)
        print(f"Successfully set {interface} to DHCP.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to set DHCP: {e}")
        print("Try resetting the network interface or check the interface name.")

def CheckChangeLanIP(URL):
    file_path = f"{a.Log_folder}\\CheckChangeLanIP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for CheckChangeLanIP")
    start_time = time.time()
    result_CheckChangeLanIP = False
    time.sleep(30)
    try :
        url = URL
        response = requests.get(url, verify=False)
        if response.status_code == 200:
            logger.info("Pass.Browser will auto direct to DUT's new IP.")
            print("Pass")
            result_CheckChangeLanIP = True
            time.sleep(5)
        else :
            logger.error("Fail to Check Change Lan IP.")
            print("Fail")
            result_CheckChangeLanIP = False
            time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_CheckChangeLanIP = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_CheckChangeLanIP, execution_time, current_time

def ChangeLanIPToDefault(URL):
    file_path = f"{a.Log_folder}\\ChangeLanIPToDefault.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeLanIPToDefault")
    url = URL
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeLanIPToDefault = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.element("input", "lanIP",txt=a.DUT_default_Lan_IP, sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        wait = WebDriverWait(d._driver, a.reboot_time)
        ok_button = wait.until(EC.visibility_of_element_located((By.ID, "popalert_ok")))
        time.sleep(5)
        ok_button.click()
        print(f"click OK ")
        result_ChangeLanIPToDefault = True
        print("Finish.")
        time.sleep(5)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeLanIPToDefault = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeLanIPToDefault, execution_time, current_time

def ChangeLanIP(LAN):
    file_path = f"{a.Log_folder}\\ChangeLanIP.log"
    logger = setup_logger(file_path)
    logger.info("Log message for ChangeLanIP")
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeLanIP = False
    try :
        d.open(url, a.DUT_admin_pwd)
        #Network
        d.element("id", "submenu_Network", sec=a.buffer_time)
        time.sleep(5)
        d.element("input", "lanIP",txt=LAN, sec=a.buffer_time)
        d._driver.execute_script("window.scrollTo(0, 0);")
        d.element("id", "Save_btn", sec=a.buffer_time)
        wait = WebDriverWait(d._driver, a.reboot_time)
        ok_button = wait.until(EC.visibility_of_element_located((By.ID, "popalert_ok")))
        time.sleep(5)
        ok_button.click()
        print(f"click OK ")
        result_ChangeLanIP = True
        print("Finish")
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        result_ChangeLanIP = False
        print("\n+++++ False +++++\n")
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logging.shutdown()
        return result_ChangeLanIP, execution_time, current_time

def ChangeWiFiInvisible(ssid,wifiName):
    url = a.DUT_GUI_url
    d = Dlink(browser='chrome')
    start_time = time.time()
    result_ChangeEncryptionNone = False
    try:
        d.open(url, a.DUT_admin_pwd)
        SSID = a.DUT_Wifi_SSID+ssid
        d.element("id", "submenu_WiFi", sec=a.buffer_time)
        d.scrolldown(800)
        d.element("xpath", "//*[@id='RADIO_24']/div[1]/span", sec=a.buffer_time)
        d.element("downmenu_Multiple", "Invisible", sec=a.buffer_time)
        d.element("input",wifiName,txt=SSID,sec=a.buffer_time)
        d.save_new()
        print("Finish.")
        result_ChangeEncryptionNone = True
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_ChangeEncryptionNone = False
        time.sleep(5)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_ChangeEncryptionNone, execution_time, current_time
def ChangeInvisible24G():
    return ChangeWiFiInvisible('_Invisible24',"wifiName_24")
def ChangeInvisible5G():
    return ChangeWiFiInvisible('_Invisible5',"wifiName_5")

def CheckChangeInvisible(txt1,txt2):
    start_time = time.time()
    results_CheckChangeInvisible = []
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    txt_paths = [
        os.path.join(a.all_file_path, "wlan.txt")
    ]
    try:
        for txt_path in txt_paths:
            with open(txt_path, 'r', encoding='utf-8', errors='replace') as file:
                file_contents = file.read()
                if txt1 in file_contents and txt2 in file_contents:
                    result = True
                    print(f"{txt1} and {txt2} found in file: {txt_path}")
                else:
                    result = False
                    print(f"Fail to find {txt1} or {txt2}.")
                results_CheckChangeInvisible.append(result)
        for txt_path in txt_paths:
            directory, filename = os.path.split(txt_path)
            new_filename = "wlan_" + current_time + ".txt"
            new_filepath = os.path.join(directory, new_filename)
            os.rename(txt_path, new_filepath)
            print("Finish")
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        results_CheckChangeInvisible.append(False)
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        print("Current Time:", current_time)
        return results_CheckChangeInvisible, execution_time, current_time
def CheckChangeInvisible24G():
    return CheckChangeInvisible('2.4 GHz','_Invisible24')
def CheckChangeInvisible5G():
    return CheckChangeInvisible('5 GHz','_Invisible5')

def wifi_profile(command):
    """Executes the specified command to add a wireless network profile."""
    try:
        subprocess.run(command, check=True, shell=True)
        print("The wireless network profile has been added successfully.")
    except subprocess.CalledProcessError as e:
        print(f"An error occurred while executing the command: {e}")

def add_wifi_profile(file_path):
    start_time = time.time()
    result_add_wifi_profile = False
    try:
        """Adds a wireless network profile, using the specified XML file path."""
        command = f'netsh wlan add profile filename="{file_path}"'
        wifi_profile(command)
        result_add_wifi_profile = True
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_add_wifi_profile = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_add_wifi_profile, execution_time, current_time
    
def delete_wifi_profile(profile_name):
    start_time = time.time()
    result_delete_wifi_profile = False
    try:
        """Deletes the specified wireless network profile."""
        command = f'netsh wlan delete profile name="{profile_name}"'
        wifi_profile(command)
        result_delete_wifi_profile = True
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("\n+++++ False +++++\n")
        result_delete_wifi_profile = False
    finally:
        end_time = time.time()
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        return result_delete_wifi_profile, execution_time, current_time